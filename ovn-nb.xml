<?xml version="1.0" encoding="utf-8"?>
<database name="ovn-nb" title="OVN Northbound Database">
  <p>
    This database is the interface between OVN and the cloud management system
    (CMS), such as OpenStack, running above it.  The CMS produces almost all of
    the contents of the database.  The <code>ovn-northd</code> program
    monitors the database contents, transforms it, and stores it into the <ref
    db="OVN_Southbound"/> database.
  </p>

  <p>
    We generally speak of ``the'' CMS, but one can imagine scenarios in
    which multiple CMSes manage different parts of an OVN deployment.
  </p>

  <h2>External IDs</h2>

  <p>
    Each of the tables in this database contains a special column, named
    <code>external_ids</code>.  This column has the same form and purpose each
    place it appears.
  </p>

  <dl>
    <dt><code>external_ids</code>: map of string-string pairs</dt>
    <dd>
      Key-value pairs for use by the CMS.  The CMS might use certain pairs, for
      example, to identify entities in its own configuration that correspond to
      those in this database.
    </dd>
  </dl>

  <table name="NB_Global" title="Northbound configuration">
    <p>
      Northbound configuration for an OVN system.  This table must have exactly
      one row.
    </p>

    <group title="Identity">
      <column name="name">
        The name of the OVN cluster, which uniquely identifies the OVN cluster
        throughout all OVN clusters supposed to interconnect with each other.
      </column>
    </group>

    <group title="Status">
      These columns allow a client to track the overall configuration state of
      the system.

      <column name="nb_cfg">
        Sequence number for client to increment.  When a client modifies any
        part of the northbound database configuration and wishes to wait for
        <code>ovn-northd</code> and possibly all of the hypervisors to finish
        applying the changes, it may increment this sequence number.
      </column>

      <column name="nb_cfg_timestamp">
        <p>
          The timestamp, in milliseconds since the epoch, when
          <code>ovn-northd</code> sees the latest <code>nb_cfg</code> and starts
          processing.
        </p>

        <p>
          To print the timestamp as a human-readable date:
        </p>

        <pre>
          date -d "@$(ovn-nbctl get NB_Global . nb_cfg_timestamp | sed 's/...$//')"
        </pre>
      </column>

      <column name="sb_cfg">
        Sequence number that <code>ovn-northd</code> sets to the value of <ref
        column="nb_cfg"/> after it finishes applying the corresponding
        configuration changes to the <ref db="OVN_Southbound"/> database.
      </column>

      <column name="sb_cfg_timestamp">
        The timestamp, in milliseconds since the epoch, when
        <code>ovn-northd</code> finishes applying the
        corresponding configuration changes to the <ref db="OVN_Southbound"/>
        database successfully.
      </column>

      <column name="hv_cfg">
        <p>
          Sequence number that <code>ovn-northd</code> sets to the smallest
          sequence number of all the chassis in the system, as reported in the
          <code>Chassis_Private</code> table in the southbound database.  Thus,
          <ref column="hv_cfg"/> equals <ref column="nb_cfg"/> if all chassis
          are caught up with the northbound configuration (which may never
          happen, if any chassis is down).  This value can regress, if a
          chassis was removed from the system and rejoins before catching up.
        </p>

        <p>
          If there are no chassis, then <code>ovn-northd</code> copies
          <code>nb_cfg</code> to <ref column="hv_cfg"/>.  Thus, in this case,
          the (nonexistent) hypervisors are always considered to be caught up.
          This means that hypervisors can be "caught up" even in cases where
          <ref column="sb_cfg"/> would show that the southbound database is
          not.  To detect when both the hypervisors and the southbound database
          are caught up, a client should take the smaller of <ref
          column="sb_cfg"/> and <ref column="hv_cfg"/>.
        </p>
      </column>

      <column name="hv_cfg_timestamp">
        The largest timestamp, in milliseconds since the epoch, of the smallest
        sequence number of all the
        chassis in the system, as reported in the <code>Chassis_Private</code>
        table in the southbound database.  In other words, this timestamp
        reflects the time when the slowest chassis catches up with the
        northbound configuration, which is useful for end-to-end control plane
        latency measurement.
      </column>
    </group>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>

    <group title="Common options">
      <column name="options">
        This column provides general key/value settings. The supported
        options are described individually below.
      </column>

      <group title="Options for configuring OVS BFD">
        <p>
          These options apply when <code>ovn-controller</code> configures
          OVS BFD on tunnels interfaces. Please note these parameters refer
          to legacy OVS BFD implementation and not to OVN BFD one.
        </p>

        <column name="options" key="bfd-min-rx">
          BFD option <code>min-rx</code> value to use when configuring BFD on
          tunnel interfaces.
        </column>

        <column name="options" key="bfd-decay-min-rx">
          BFD option <code>decay-min-rx</code> value to use when configuring
          BFD on tunnel interfaces.
        </column>

        <column name="options" key="bfd-min-tx">
          BFD option <code>min-tx</code> value to use when configuring BFD on
          tunnel interfaces.
        </column>

        <column name="options" key="bfd-mult">
          BFD option <code>mult</code> value to use when configuring BFD on
          tunnel interfaces.
        </column>
      </group>

       <column name="options" key="ignore_chassis_features">
        <p>
          When set to <code>false</code>, the <code>ovn-northd</code> will
          evaluate the features supported by each chassis and will only
          activate features that are universally supported by all chassis. This
          approach is crucial for maintaining backward compatibility during an
          upgrade when the <code>ovn-northd</code> is updated prior to the
          <code>ovn-controller</code>. However, if any chassis is poorly
          managed and the upgrade is unsuccessful, it will restrict
          <code>ovn-northd</code> from activating the new features.
        </p>
        <p>
          Alternatively, setting this option to <code>true</code> instructs
          <code>ovn-northd</code> to bypass the support status of features on
          each chassis and to directly implement the latest features. This
          approach safeguards the operation of <code>ovn-northd</code> from
          being adversely affected by a mismatched configuration of a chassis.
        </p>
        <p>
          The default setting for this option is <code>false</code>.
        </p>
      </column>

      <column name="options" key="mac_prefix">
        Configure a given OUI to be used as prefix when L2 address is
        dynamically assigned, e.g. <code>00:11:22</code>
      </column>

      <column name="options" key="mac_binding_removal_limit"
              type='{"type": "integer", "minInteger": 0, "maxInteger": 4294967295}'>
        MAC binding aging bulk removal limit. This limits how many rows
        can expire in a single transaction. Default value is 0 which
        is unlimited. When we hit the limit next batch removal is delayed by
        5 s.
      </column>

      <column name="options" key="fdb_removal_limit"
              type='{"type": "integer", "minInteger": 0, "maxInteger": 4294967295}'>
        FDB aging bulk removal limit. This limits how many rows
        can expire in a single transaction. Default value is 0 which
        is unlimited. When we hit the limit next batch removal is delayed by
        5 s.
      </column>

      <column name="options" key="controller_event" type='{"type": "boolean"}'>
        Value set by the CMS to enable/disable ovn-controller event reporting.
        Traffic into OVS can raise a 'controller' event that results in a
        Controller_Event being written to the <ref table="Controller_Event"/>
        table in SBDB. When the CMS has seen the event and taken appropriate
        action, it can remove the corresponding row in
        <ref table="Controller_Event"/> table.
        The intention is for a CMS to see the events and take some sort of
        action. Please see the <ref table="Controller_Event"/> table in SBDB.
        It is possible to associate a meter to each controller event type
        in order to not overload the pinctrl thread under heavy load.
        Each event type relies on a meter with a defined name:

        <ul>
          <li>empty_lb_backends: event-elb</li>
        </ul>

      </column>

      <column name="options" key="northd_probe_interval">
        <p>
          The inactivity probe interval of the connection to the OVN Northbound
          and Southbound databases from <code>ovn-northd</code>, in milliseconds.
          If the value is zero, it disables the connection keepalive feature.
        </p>

        <p>
          If the value is nonzero, then it will be forced to a value of
          at least 1000 ms.
        </p>
      </column>

      <column name="options" key="ic_probe_interval">
        <p>
          The inactivity probe interval of the connection to the OVN Northbound
          and Southbound databases from <code>ovn-ic</code>, in milliseconds.
          If the value is zero, it disables the connection keepalive feature.
        </p>

        <p>
          If the value is nonzero, then it will be forced to a value of
          at least 1000 ms.
        </p>
      </column>

      <column name="options" key="nbctl_probe_interval">
        <p>
          The inactivity probe interval of the connection to the OVN Northbound
          database from <code>ovn-nbctl</code> utility, in milliseconds.
          If the value is zero, it disables the connection keepalive feature.
        </p>

        <p>
          If the value is nonzero, then it will be forced to a value of
          at least 1000 ms.
        </p>

        <p>
          If the value is less than zero, then the default inactivity probe
          interval for <code>ovn-nbctl</code> would be left intact (120000 ms).
        </p>
      </column>

      <column name="options" key="northd_trim_timeout">
        <p>
          When used, this configuration value specifies the time, in
          milliseconds, since the last <code>ovn-northd</code> active operation
          after which memory trimming is performed.  By default this is set to
          30000 (30 seconds).
        </p>
      </column>

      <column name="options" key="use_logical_dp_groups">
        <p>
          Note: This option is deprecated, the only behavior is to always
          combine logical flows by datapath groups.  Changing the value or
          removing this option all toghether will have no effect.
        </p>
        <p>
          <code>ovn-northd</code> combines logical flows that differs
          only by logical datapath into a single logical flow with
          logical datapath group attached.
        </p>
      </column>
      <column name="options" key="use_parallel_build">
        <p>
          If set to <code>true</code>, <code>ovn-northd</code> will attempt
          to compute logical flows in parallel.
        </p>
        <p>
          Parallel computation is enabled only if the system has 4 or more
          cores/threads available to be used by ovn-northd.
        </p>
        <p>
          The default value is <code>false</code>.
        </p>
      </column>

      <column name="options" key="ignore_lsp_down">
        <p>
          If set to false, ARP/ND reply flows for logical switch ports will be
          installed only if the port is up, i.e. claimed by a Chassis. If set
          to true, these flows are installed regardless of the status of the
          port, which can result in a situation that ARP request to an IP is
          resolved even before the relevant VM/container is running. For
          environments where this is not an issue, setting it to
          <code>true</code> can reduce the load and latency of the control
          plane. The default value is <code>true</code>.
        </p>
      </column>

      <column name="options" key="use_ct_inv_match">
        <p>
          If set to false, <code>ovn-northd</code> will not use the
          <code>ct.inv</code> field in any of the logical flow matches.
          The default value is true.  If the NIC supports offloading
          OVS datapath flows but doesn't support offloading ct_state
          <code>inv</code> flag, then the datapath flows matching on this flag
          (either <code>+inv</code> or <code>-inv</code>) will not be
          offloaded.  CMS should consider setting <code>use_ct_inv_match</code>
          to <code>false</code> in such cases.  This results in a side effect
          of the invalid packets getting delivered to the destination VIF,
          which otherwise would have been dropped by <code>OVN</code>.
        </p>
      </column>

      <column name="options" key="default_acl_drop">
        <p>
          If set to <code>true</code>., <code>ovn-northd</code> will
          generate a logical flow to drop all traffic in the ACL stages.
          By default this option is set to <code>false</code>.
        </p>
      </column>

      <column name="options" key="debug_drop_domain_id">
        <p>
          If set to a 8-bit number and if
          <code>debug_drop_collector_set</code> is also configured,
          <code>ovn-northd</code> will add a <code>sample</code> action to
          every logical flow that contains a 'drop' action.
          The 8 most significant bits of the observation_domain_id field will
          be those specified in the
          <code> debug_drop_domain_id</code>.
          The 24 least significant bits of the observation_domain_id field will
          be the datapath's key.
        </p>
        <p>
          The observation_point_id will be set to the first 32 bits of the
          logical flow's UUID.
        </p>
      </column>

      <column name="options" key="debug_drop_collector_set">
        <p>
          If set to a 32-bit number <code>ovn-northd</code> will add a
          <code>sample</code> action to every logical flow that contains a
          'drop' action. The sample action will have the specified
          collector_set_id. The value must match that of the local OVS
          configuration as described in <code>ovs-actions</code>(7).
        </p>
      </column>

      <column name="options" key="use_common_zone" type='{"type": "boolean"}'>
        Default value is <code>false</code>. If set to <code>true</code>
        the SNAT and DNAT happens in common zone, instead of happening in
        separate zones, depending on the configuration. However, this option
        breaks traffic when there is configuration of DGP + LB + SNAT on
        this LR. The value <code>true</code> should be used only in case
        of HWOL compatibility with GDP.
      </column>

      <column name="options" key="northd-backoff-interval-ms">
        Maximum interval that the northd incremental engine is delayed by
        in milliseconds. Setting the value to nonzero delays the next northd
        engine run by the previous run time, capped by the specified value.
        If the value is zero the engine won't be delayed at all.
        The recommended period is smaller than 500 ms, beyond that the latency
        of SB changes would be very noticeable.
      </column>

      <group title="Options for configuring interconnection route advertisement">
        <p>
          These options control how routes are advertised between OVN
          deployments for interconnection.  If enabled, <code>ovn-ic</code>
          from different OVN deployments exchanges routes between each other
          through the global <ref db="OVN_IC_Southbound"/> database.  Only
          routers with ports connected to interconnection transit switches
          participate in route advertisement.  For each of these routers, there
          are two types of routes to be advertised:
        </p>

        <p>
          Firstly, the static routes configured in the router are advertised.
        </p>

        <p>
          Secondly, the <code>networks</code> configured in the logical router
          ports that are not on the transit switches are advertised.  These
          are considered as directly connected subnets on the router.
        </p>

        <p>
          Link local prefixes (IPv4 169.254.0.0/16 and IPv6 FE80::/10)
          are never advertised.
        </p>

        <p>
          The learned routes are added to the
          <ref column="static_routes" table="Logical_Router"/> column of the
          <ref table="Logical_Router"/> table, with
          <code>external_ids:ic-learned-route</code> set to the uuid
          of the row in <ref table="Route" db="OVN_IC_Southbound"/>
          table of the <ref db="OVN_IC_Southbound"/> database.
        </p>

        <column name="options" key="ic-route-adv">
          A boolean value that enables route advertisement to the global
          <ref db="OVN_IC_Southbound"/> database.  Default is
          <code>false</code>.
        </column>

        <column name="options" key="ic-route-learn">
          A boolean value that enables route learning from the global
          <ref db="OVN_IC_Southbound"/> database.  Default is
          <code>false</code>.
        </column>

        <column name="options" key="ic-route-adv-default">
          A boolean value that enables advertising default route to the global
          <ref db="OVN_IC_Southbound"/> database.  Default is
          <code>false</code>.  This option takes effect only when option
          <code>ic-route-adv</code> is <code>true</code>.
        </column>

        <column name="options" key="ic-route-learn-default">
          A boolean value that enables learning default route from the global
          <ref db="OVN_IC_Southbound"/> database.  Default is
          <code>false</code>.  This option takes effect only when option
          <code>ic-route-learn</code> is <code>true</code>.
        </column>

        <column name="options" key="ic-route-blacklist">
          A string value contains a list of CIDRs delimited by ",".  A route
          will not be advertised or learned if the route's prefix belongs to
          any of the CIDRs listed.
        </column>
      </group>

    </group>

    <group title="Connection Options">
      <column name="connections">
        Database clients to which the Open vSwitch database server should
        connect or on which it should listen, along with options for how these
        connections should be configured.  See the <ref table="Connection"/>
        table for more information.
      </column>
      <column name="ssl">
        Global SSL configuration.
      </column>
    </group>
    <group title="Security Configurations">
      <column name="ipsec">
        Tunnel encryption configuration. If this column is set to be true, all
        OVN tunnels will be encrypted with IPsec.
      </column>
    </group>

    <group title="Read-only Options">
      <column name="options" key="max_tunid">
        <p>
          The maximum supported tunnel ID. Depends on types of encapsulation
          enabled in the cluster.
        </p>
      </column>
    </group>

  </table>

  <table name="Copp" title="Control plane protection">
    <p>
      This table is used to define control plane protection policies, i.e.,
      associate entries from table <ref table="Meter"/> to control protocol
      names.
    </p>
    <column name="name">
      CoPP name.
    </column>
    <column name="meters" key="arp">
      Rate limiting meter for ARP packets (request/reply) used for learning
      neighbors.
    </column>
    <column name="meters" key="arp-resolve">
      Rate limiting meter for packets that require resolving the next-hop
      (through ARP).
    </column>
    <column name="meters" key="dhcpv4-opts">
      Rate limiting meter for packets that require adding DHCPv4 options.
    </column>
    <column name="meters" key="dhcpv6-opts">
      Rate limiting meter for packets that require adding DHCPv6 options.
    </column>
    <column name="meters" key="dns">
      Rate limiting meter for DNS query packets that need to be replied to.
    </column>
    <column name="meters" key="event-elb">
      Rate limiting meter for empty load balancer events.
    </column>
    <column name="meters" key="icmp4-error">
      Rate limiting meter for packets that require replying with an ICMP
      error.
    </column>
    <column name="meters" key="icmp6-error">
      Rate limiting meter for packets that require replying with an ICMPv6
      error.
    </column>
    <column name="meters" key="igmp">
      Rate limiting meter for IGMP packets.
    </column>
    <column name="meters" key="nd-na">
      Rate limiting meter for ND neighbor advertisement packets used for
      learning neighbors.
    </column>
    <column name="meters" key="nd-ns">
      Rate limiting meter for ND neighbor solicitation packets used for
      learning neighbors.
    </column>
    <column name="meters" key="nd-ns-resolve">
      Rate limiting meter for packets that require resolving the next-hop
      (through ND).
    </column>
    <column name="meters" key="nd-ra-opts">
      Rate limiting meter for packets that require adding ND router
      advertisement options.
    </column>
    <column name="meters" key="tcp-reset">
      Rate limiting meter for packets that require replying with TCP RST
      packet.
    </column>
    <column name="meters" key="bfd">
      Rate limiting meter for BFD packets.
    </column>
    <column name="meters" key="reject">
      Rate limiting meter for packets that trigger a reject action
    </column>
    <column name="meters" key="svc-monitor">
      Rate limiting meter for packets that are arriving to service
      monitor MAC address.
    </column>
    <column name="external_ids">
      See <em>External IDs</em> at the beginning of this document.
    </column>
  </table>

  <table name="Logical_Switch" title="L2 logical switch">
    <p>
      Each row represents one L2 logical switch.
    </p>

    <p>
      There are two kinds of logical switches, that is, ones that fully
      virtualize the network (overlay logical switches) and ones that provide
      simple connectivity to physical networks (bridged logical switches).
      They work in the same way when providing connectivity between logical
      ports on same chassis, but differently when connecting remote logical
      ports.  Overlay logical switches connect remote logical ports by tunnels,
      while bridged logical switches provide connectivity to remote ports by
      bridging the packets to directly connected physical L2 segments with the
      help of <code>localnet</code> ports.  Each bridged logical switch has
      one or more <code>localnet</code> ports, which have only one special
      address <code>unknown</code>.
    </p>

    <column name="ports">
      <p>
        The logical ports connected to the logical switch.
      </p>

      <p>
        It is an error for multiple logical switches to include the same
        logical port.
      </p>
    </column>

    <column name="load_balancer">
      Set of load balancers associated to this logical switch.
    </column>

    <column name="load_balancer_group">
      Set of load balancers groups associated to this logical switch.
    </column>

    <column name="acls">
      Access control rules that apply to packets within the logical switch.
    </column>

    <column name="qos_rules">
      QoS marking and metering rules that apply to packets within the
      logical switch.
    </column>

    <column name="dns_records">
      This column defines the DNS records to be used for resolving internal
      DNS queries within the logical switch by the native DNS resolver.
      Please see the <ref table="DNS"/> table.
    </column>

    <column name="forwarding_groups">
      Groups a set of logical port endpoints for traffic going out of the
      logical switch.
    </column>

    <group title="Naming">
      <p>
        These columns provide names for the logical switch.  From OVN's
        perspective, these names have no special meaning or purpose other than
        to provide convenience for human interaction with the  database.
        There is no requirement for the name to be unique.  (For a unique
        identifier for a logical switch, use its row UUID.)
      </p>

      <p>
        (Originally, <ref column="name"/> was intended to serve the purpose of
        a human-friendly name, but the Neutron integration used it to uniquely
        identify its own switch object, in the format
        <code>neutron-<var>uuid</var></code>.  Later on, Neutron started
        propagating the friendly name of a switch as <ref column="external_ids"
        key="neutron:network_name"/>.  Perhaps this can be cleaned up someday.)
      </p>

      <column name="name">
        A name for the logical switch.
      </column>

      <column name="external_ids" key="neutron:network_name">
        Another name for the logical switch.
      </column>
    </group>

    <group title="IP Address Assignment">
      <p>
        These options control automatic IP address management (IPAM) for ports
        attached to the logical switch.  To enable IPAM for IPv4, set <ref
        column="other_config" key="subnet"/> and optionally <ref
        column="other_config:exclude_ips"/>.  To enable IPAM for IPv6, set
        <ref column="other_config" key="ipv6_prefix"/>.  IPv4 and IPv6 may
        be enabled together or separately.
      </p>

      <p>
        To request dynamic address assignment for a particular port, use the
        <code>dynamic</code> keyword in the <ref table="Logical_Switch_Port"
        column="addresses"/> column of the port's <ref
        table="Logical_Switch_Port"/> row.  This requests both an IPv4 and an
        IPv6 address, if IPAM for IPv4 and IPv6 are both enabled.
      </p>

      <column name="other_config" key="subnet">
        Set this to an IPv4 subnet, e.g. <code>192.168.0.0/24</code>, to enable
        <code>ovn-northd</code> to automatically assign IP addresses within
        that subnet.
      </column>

      <column name="other_config" key="exclude_ips">
        <p>
          To exclude some addresses from automatic IP address management, set
          this to a list of the IPv4 addresses or <code>..</code>-delimited
          ranges to exclude.  The addresses or ranges should be a subset of
          those in <ref column="other_config" key="subnet"/>.
        </p>
        <p>
          Whether listed or not, <code>ovn-northd</code> will never allocate
          the first or last address in a subnet, such as 192.168.0.0 or
          192.168.0.255 in 192.168.0.0/24.
        </p>
        <p>
          Examples:
        </p>
        <ul>
          <li><code>192.168.0.2 192.168.0.10</code></li>
          <li><code>192.168.0.4 192.168.0.30..192.168.0.60 192.168.0.110..192.168.0.120</code></li>
          <li><code>192.168.0.110..192.168.0.120 192.168.0.25..192.168.0.30 192.168.0.144</code></li>
        </ul>
      </column>

      <column name="other_config" key="ipv6_prefix">
        Set this to an IPv6 prefix to enable <code>ovn-northd</code> to
        automatically assign IPv6 addresses using this prefix.  The assigned
        IPv6 address will be generated using the IPv6 prefix and the MAC
        address (converted to an IEEE EUI64 identifier) of the port.  The IPv6
        prefix defined here should be a valid IPv6 address ending with
        <code>::</code>.
        <p>
          Examples:
        </p>
        <ul>
          <li><code>aef0::</code></li>
          <li><code>bef0:1234:a890:5678::</code></li>
          <li><code>8230:5678::</code></li>
        </ul>
      </column>

      <column name="other_config" key="mac_only" type='{"type": "boolean"}'>
        Value used to request to assign L2 address only if neither subnet
        nor ipv6_prefix are specified
      </column>

      <column name="other_config" key="fdb_age_threshold"
              type='{"type": "integer", "minInteger": 0, "maxInteger": 4294967295}'>
        FDB aging <code>threshold</code> value in seconds. FDB exceeding
        this timeout will be automatically removed. The value defaults
        to 0, which means disabled.
      </column>
    </group>

    <group title="IP Multicast Snooping Options">
      <p>
        These options control IP Multicast Snooping configuration of the
        logical switch. To enable IP Multicast Snooping set
        <ref column="other_config" key="mcast_snoop"/> to true. To enable IP
        Multicast Querier set <ref column="other_config" key="mcast_querier"/>
        to true. If IP Multicast Querier is enabled
        <ref column="other_config" key="mcast_eth_src"/> and
        <ref column="other_config" key="mcast_ip4_src"/> must be set.
      </p>
      <column name="other_config" key="mcast_snoop"
          type='{"type": "boolean"}'>
        Enables/disables IP Multicast Snooping on the logical switch.
        Default: <code>false</code>.
      </column>
      <column name="other_config" key="mcast_querier"
          type='{"type": "boolean"}'>
        Enables/disables IP Multicast Querier on the logical switch.
        Only applicable if <ref column="other_config" key="mcast_snoop"/>
        is enabled.
        Default: <code>true</code>.
      </column>
      <column name="other_config" key="mcast_flood_unregistered"
          type='{"type": "boolean"}'>
        Determines whether unregistered multicast traffic should be flooded
        or not. Only applicable if
        <ref column="other_config" key="mcast_snoop"/> is enabled.
        Default: <code>false</code>.
      </column>
      <column name="other_config" key="mcast_table_size"
          type='{"type": "integer", "minInteger": 1, "maxInteger": 32766}'>
        Number of multicast groups to be stored. Default: 2048.
      </column>
      <column name="other_config" key="mcast_idle_timeout"
          type='{"type": "integer", "minInteger": 15, "maxInteger": 3600}'>
        Configures the IP Multicast Snooping group idle timeout (in seconds).
        Default: 300 seconds.
      </column>
      <column name="other_config" key="mcast_query_interval"
          type='{"type": "integer", "minInteger": 1, "maxInteger": 3600}'>
        Configures the IP Multicast Querier interval between queries (in
        seconds). Default:
        <ref column="other_config" key="mcast_idle_timeout"/> / 2.
      </column>
      <column name="other_config" key="mcast_query_max_response"
          type='{"type": "integer", "minInteger": 1, "maxInteger": 10}'>
        Configures the value of the "max-response" field in the multicast
        queries originated by the logical switch. Default: 1 second.
      </column>
      <column name="other_config" key="mcast_eth_src">
        Configures the source Ethernet address for queries originated by the
        logical switch.
      </column>
      <column name="other_config" key="mcast_ip4_src">
        Configures the source IPv4 address for queries originated by the
        logical switch.
      </column>
      <column name="other_config" key="mcast_ip6_src">
        Configures the source IPv6 address for queries originated by the
        logical switch.
      </column>
    </group>

    <group title="Interconnection">
      <column name="other_config" key="interconn-ts"
          type='{"type": "string"}'>
        The <ref table="Transit_Switch" column="name" db="OVN_IC_Northbound"/>
        of corresponding transit switch in <ref db="OVN_IC_Northbound"/>
        database.  This kind of logical switch is created and controlled
        by <code>ovn-ic</code>.
      </column>
    </group>

    <group title="Tunnel Key">
      <column name="other_config" key="requested-tnl-key"
          type='{"type": "integer", "minInteger": 1, "maxInteger": 16777215}'>
        Configures the datapath tunnel key for the logical switch.  Usually
        this is not needed because <code>ovn-northd</code> will assign an
        unique key for each datapath by itself.  However, if it is configured,
        <code>ovn-northd</code> honors the configured value.  The typical use
        case is for interconnection: the tunnel keys for transit switches need
        to be unique globally, so they are maintained in the global
        <ref db="OVN_IC_Southbound"/> database, and <code>ovn-ic</code> simply
        syncs the value from <ref db="OVN_IC_Southbound"/> through this config.
      </column>
    </group>

    <column name="copp">
      <p>
        The control plane protection policy from table <ref table="Copp"/>
        used for metering packets sent to <code>ovn-controller</code> from
        ports of this logical switch.
      </p>
    </column>

    <group title="Other options">
      <column name="other_config" key="vlan-passthru"
          type='{"type": "boolean"}'>
        Determines whether VLAN tagged incoming traffic should be allowed. Note
        that this may have security implications when enabled for a logical
        switch with a tag=0 localnet port. If not properly isolated from other
        localnet ports, fabric traffic that belongs to other tagged networks may
        be passed through such a port.
      </column>

      <column name="other_config" key="broadcast-arps-to-all-routers"
          type='{"type": "boolean"}'>
        Determines whether arp requests and ipv6 neighbor solicitations should
        be sent to all routers and other switchports (default) or if it should
        only be sent to switchports where the ip/mac address is unknown.
        Setting this to false can significantly reduce the load if the logical
        switch can receive arp requests for ips it does not know about.
        However setting this to false also means that garps are no longer
        forwarded to all routers and therefor the mac bindings of the routers
        are no longer updated.
      </column>
    </group>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="Logical_Switch_Port" title="L2 logical switch port">
    <p>
      A port within an L2 logical switch.
    </p>

    <group title="Core Features">
      <column name="name">
        <p>
          The logical port name.
        </p>

        <p>
          For entities (VMs or containers) that are spawned in the hypervisor,
          the name used here must match those used in the <ref key="iface-id"
          table="Interface" column="external_ids" db="Open_vSwitch"/> in the
          <ref db="Open_vSwitch"/> database's <ref table="Interface"
          db="Open_vSwitch"/> table, because hypervisors use <ref key="iface-id"
          table="Interface" column="external_ids" db="Open_vSwitch"/> as a lookup
          key to identify the network interface of that entity.
        </p>

        <p>
          For containers that share a VIF within a VM, the name can be any
          unique identifier.  See <code>Containers</code>, below, for more
          information.
        </p>

        <p>
          A logical switch port may not have the same name as a logical router
          port, but the database schema cannot enforce this.
        </p>
      </column>

      <column name="type">
        <p>
          Specify a type for this logical port.  Logical ports can be used to
          model other types of connectivity into an OVN logical switch.  The
          following types are defined:
        </p>

        <dl>
          <dt>(empty string)</dt>
          <dd>
            A VM (or VIF) interface.
          </dd>

          <dt><code>router</code></dt>
          <dd>
            A connection to a logical router.  The value of <ref
            column="options" key="router-port"/> specifies the <ref
            column="name"/> of the <ref table="Logical_Router_Port"/>
            to which this logical switch port is connected.
          </dd>

          <dt><code>localnet</code></dt>
          <dd>
            A connection to a locally accessible network from
            <code>ovn-controller</code> instances that have a corresponding
            bridge mapping.  A logical switch can have multiple
            <code>localnet</code> ports attached.  This type is used to model
            direct connectivity to existing networks.  In this case, each
            chassis should have a mapping for one of the physical networks
            only.  Note: nothing said above implies that a chassis cannot be
            plugged to multiple physical networks as long as they belong to
            different switches.
          </dd>

          <dt><code>localport</code></dt>
          <dd>
            A connection to a local VIF. Traffic that arrives on a
            <code>localport</code> is never forwarded over a tunnel to another
            chassis. These ports are present on every chassis and have the same
            address in all of them. This is used to model connectivity to local
            services that run on every hypervisor.
          </dd>

          <dt><code>l2gateway</code></dt>
          <dd>
            A connection to a physical network.
          </dd>

          <dt><code>vtep</code></dt>
          <dd>
            A port to a logical switch on a VTEP gateway.
          </dd>

          <dt><code>external</code></dt>
          <dd>
            <p>
              Represents a logical port which is external and not having
              an OVS port in the integration bridge.
              <code>OVN</code> will never receive any traffic from this port or
              send any traffic to this port. <code>OVN</code> can support
              native services like DHCPv4/DHCPv6/DNS for this port.
              If <ref column="ha_chassis_group"/> is defined,
              <code>ovn-controller</code> running in the master chassis of
              the HA chassis group will bind this port to provide these native
              services. It is expected that this port belong to a bridged
              logical switch (with a <code>localnet</code> port).
            </p>

            <p>
              It is recommended to use the same HA chassis group for all the
              external ports of a logical switch. Otherwise, the physical
              switch might see MAC flap issue when different chassis provide
              the native services. For example when supporting native DHCPv4
              service, DHCPv4 server mac (configured in
              <ref column="options:server_mac" table="DHCP_Options"
              db="OVN_NB"/> column in table <ref table="DHCP_Options"/>)
              originating from different ports can cause MAC flap issue.
              The MAC of the logical router IP(s) can also flap if the
              same HA chassis group is not set for all the external ports
              of a logical switch.
            </p>

            <p>
              Below are some of the use cases where <code>external</code>
              ports can be used.
            </p>

            <ul>
              <li>
                VMs connected to SR-IOV nics - Traffic from these VMs by passes
                the kernel stack and local <code>ovn-controller</code> do not
                bind these ports and cannot serve the native services.
              </li>

              <li>
                When CMS supports provisioning baremetal servers.
              </li>
            </ul>
          </dd>

          <dt><code>virtual</code></dt>
          <dd>
            <p>
              Represents a logical port which does not have an OVS
              port in the integration bridge and has a virtual ip configured
              in the <ref column="options:virtual-ip"/> column. This virtual ip
              can move around between the logical ports configured in
              the <ref column="options:virtual-parents"/> column.
            </p>

            <p>
              One of the use case where <code>virtual</code>
              ports can be used is.
            </p>

            <ul>
              <li>
                The <code>virtual ip</code> represents a load balancer vip
                and the <code>virtual parents</code> provide load balancer
                service in an active-standby setup with the active virtual
                parent owning the <code>virtual ip</code>.
              </li>
            </ul>
          </dd>

          <dt><code>remote</code></dt>
          <dd>
            A remote port is to model a port that resides remotely on another
            OVN, which is on the other side of a transit logical switch for OVN
            interconnection.  This type of ports are created by
            <code>ovn-ic</code> instead of by CMS.  Any change to the port will
            be automatically overwritten by <code>ovn-ic</code>.
          </dd>
        </dl>
      </column>
    </group>

    <group title="Options">
      <column name="options">
        This column provides key/value settings specific to the logical port
        <ref column="type"/>.  The type-specific options are described
        individually below.
      </column>

      <group title="Options for router ports">
        <p>
          These options apply when <ref column="type"/> is <code>router</code>.
        </p>

        <column name="options" key="router-port">
          Required.  The <ref column="name"/> of the <ref
          table="Logical_Router_Port"/> to which this logical switch port is
          connected.
        </column>

        <column name="options" key="nat-addresses">
          <p>
            This is used to send gratuitous ARPs for SNAT and DNAT IP
            addresses via the <code>localnet</code> port that is attached
            to the same logical switch as this type <code>router</code>
            port.  This option is specified on a logical switch port that is
            connected to a gateway router, or a logical switch port that is
            connected to a distributed gateway port on a logical router.
          </p>

          <p>
            This must take one of the following forms:
          </p>

          <dl>
            <dt><code>router</code></dt>
            <dd>
              <p>
                Gratuitous ARPs will be sent for all SNAT and DNAT external IP
                addresses and for all load balancer IP addresses defined on the
                <ref column="options" key="router-port"/>'s logical router,
                using the <ref column="options" key="router-port"/>'s MAC
                address.
              </p>

              <p>
                This form of <ref column="options" key="nat-addresses"/> is
                valid for logical switch ports where <ref column="options"
                key="router-port"/> is the name of a port on a gateway router,
                or the name of a distributed gateway port.
              </p>

              <p>
                Supported only in OVN 2.8 and later.  Earlier versions required
                NAT addresses to be manually synchronized.
              </p>
            </dd>

            <dt><code>Ethernet address followed by one or more IPv4 addresses</code></dt>
            <dd>
              <p>
                Example: <code>80:fa:5b:06:72:b7 158.36.44.22
                158.36.44.24</code>. This would result in generation of
                gratuitous ARPs for IP addresses 158.36.44.22 and 158.36.44.24
                with a MAC address of 80:fa:5b:06:72:b7.
              </p>

              <p>
                This form of <ref column="options" key="nat-addresses"/> is
                only valid for logical switch ports where <ref column="options"
                key="router-port"/> is the name of a port on a gateway router.
              </p>
            </dd>
          </dl>
        </column>

        <column name="options" key="exclude-lb-vips-from-garp">
          If <ref column="options" key="nat-addresses"/> is set to
          <code>router</code>, Gratuitous ARPs will be sent for all
          SNAT and DNAT external IP addresses defined on the
          <ref column="options" key="router-port"/>'s logical router,
          using the <ref column="options" key="router-port"/>'s MAC address,
          not cosidering configured load balancers.
        </column>

        <column name="options" key="arp_proxy">
          Optional. A list of MAC and addresses/cidrs or just addresses/cidrs
          that this logical switch <code>router</code> port will reply to
          ARP/NDP requests. Examples:
          <code>169.254.239.254 169.254.239.2</code>,
          <code>0a:58:a9:fe:01:01 169.254.239.254 169.254.239.2
           169.254.238.0/24</code>,
          <code>fd7b:6b4d:7b25:d22f::1 fd7b:6b4d:7b25:d22f::2</code>,
          <code>0a:58:a9:fe:01:01 fd7b:6b4d:7b25:d22f::0/64</code>.
          The<ref column="options" key="router-port"/>'s logical router
          should have a route to forward packets sent to configured proxy ARP
          MAC/IPs to an appropriate destination.
        </column>

        <column name="options" key="enable_router_port_acl"
                type='{"type": "boolean"}'>
          Optional. Enable conntrack for the router port whose peer is
          l3dgw_port if set to <code>true</code>. The default value is
          <code>false</code>.
        </column>

      </group>

      <group title="Options for localnet ports">
        <p>
          These options apply when <ref column="type"/> is
          <code>localnet</code>.
        </p>

        <column name="options" key="network_name">
          Required.  The name of the network to which the <code>localnet</code>
          port is connected.  Each hypervisor, via <code>ovn-controller</code>,
          uses its local configuration to determine exactly how to connect to
          this locally accessible network, if at all.
        </column>

        <column name="options" key="ethtype">
          Optional. VLAN EtherType field value for encapsulating VLAN
          headers. Supported values: 802.1q (default), 802.1ad.
        </column>

        <column name="options" key="localnet_learn_fdb"
                type='{"type": "boolean"}'>
          Optional. Allows localnet port to learn MACs and store them in FDB
          table if set to <code>true</code>. The default value is
          <code>false</code>.
        </column>

      </group>

      <group title="Options for l2gateway ports">
        <p>
          These options apply when <ref column="type"/> is
          <code>l2gateway</code>.
        </p>

        <column name="options" key="network_name">
          Required.  The name of the network to which the <code>l2gateway</code>
          port is connected.  The L2 gateway, via <code>ovn-controller</code>,
          uses its local configuration to determine exactly how to connect to
          this network.
        </column>

        <column name="options" key="l2gateway-chassis">
          Required. The chassis on which the <code>l2gateway</code> logical
          port should be bound to. <code>ovn-controller</code> running on the
          defined chassis will connect this logical port to the physical network.
        </column>

      </group>

      <group title="Options for vtep ports">
        <p>
          These options apply when <ref column="type"/> is <code>vtep</code>.
        </p>

        <column name="options" key="vtep-physical-switch">
          Required.  The name of the VTEP gateway.
        </column>

        <column name="options" key="vtep-logical-switch">
          Required.  A logical switch name connected by the VTEP gateway.
        </column>
      </group>

      <group title="VMI (or VIF) Options">
        <p>
          These options apply to logical ports with <ref column="type"/> having
          (empty string)
        </p>

        <column name="options" key="requested-chassis">
          <p>
            If set, identifies a specific chassis (by name or hostname) that
            is allowed to bind this port. Using this option will prevent
            thrashing between two chassis trying to bind the same port during
            a live migration. It can also prevent similar thrashing due to a
            mis-configuration, if a port is accidentally created on more than
            one chassis.
          </p>

          <p>
            If set to a comma separated list, the first entry identifies the
            main chassis and the rest are one or more additional chassis that
            are allowed to bind the same port.
          </p>

          <p>
            When multiple chassis are set for the port, and the logical switch
            is connected to an external network through a <code>localnet</code>
            port, tunneling is enforced for the port to guarantee delivery of
            packets directed to the port to all its locations. This has MTU
            implications because the network used for tunneling must have MTU
            larger than <code>localnet</code> for stable connectivity.
          </p>

          <p>
            If the same host co-hosts more than one controller instance
            (either belonging to the same or separate clusters), special
            attention should be given to consistently using unique chassis
            names used in this option. It is advised that chassis names -
            and not host names - are used for this option.
          </p>
        </column>

        <column name="options" key="activation-strategy">
          If used with multiple chassis set in
          <ref column="requested-chassis"/>, specifies an activation strategy
          for all additional chassis. By default, no activation strategy is
          used, meaning additional port locations are immediately available for
          use. When set to "rarp", the port is blocked for ingress and egress
          communication until a RARP packet is sent from a new location. The
          "rarp" strategy is useful in live migration scenarios for virtual
          machines.
        </column>

        <column name="options" key="iface-id-ver">
          If set, this port will be bound by <code>ovn-controller</code>
          only if this same key and value is configured in the
          <ref table="Interface" column="external_ids" db="Open_vSwitch"/>
          column in the Open_vSwitch database's
          <ref table="Interface" db="Open_vSwitch"/> table.
        </column>

        <column name="options" key="qos_min_rate">
          If set, indicates the minimum guaranteed rate available for data sent
          from this interface, in bit/s.
        </column>

        <column name="options" key="qos_max_rate">
          If set, indicates the maximum rate for data sent from this interface,
          in bit/s. The traffic will be shaped according to this limit.
        </column>

        <column name="options" key="qos_burst">
          If set, indicates the maximum burst size for data sent from this
          interface, in bits.
        </column>

        <column name="options" key="hostname">
          <p>
            If set, indicates the DHCPv4 option "Hostname" (option code 12)
            associated for this Logical Switch Port. If DHCPv4 is enabled for
            this Logical Switch Port, hostname dhcp option will be included in
            DHCP reply.
          </p>
        </column>

        <group title="VIF Plugging Options">
          <column name="options" key="vif-plug-type">
            If set, OVN will attempt to perform plugging of this VIF.  In order
            to get this port plugged by the OVN controller, OVN must be built
            with support for VIF plugging.  The default behavior is for the CMS
            to do the VIF plugging.  Each VIF plug provider have their own
            options namespaced by name, for example "vif-plug:representor:key".

            Please refer to the VIF plug provider documentation located in
            Documentation/topics/vif-plug-providers/ for more information.
          </column>

          <column name="options" key="vif-plug-mtu-request">
            Requested MTU for plugged interfaces.  When set the OVN controller
            will fill the <ref table="Interface" column="mtu_request"/> column
            of the Open vSwitch database's
            <ref table="Interface" db="vswitch"/> table.  This in turn will
            make OVS vswitchd update the MTU of the linked interface.
          </column>
        </group>
      </group>

      <group title="Virtual port Options">
        <p>
          These options apply when <ref column="type"/> is
          <code>virtual</code>.
        </p>

        <column name="options" key="virtual-ip">
          This option represents the virtual IPv4 address.
        </column>

        <column name="options" key="virtual-parents">
          This options represents a set of logical port names (with in the same
          logical switch) which can own the <code>virtual ip</code> configured
          in the <ref column="options:virtual-ip"/>. All these virtual parents
          should add the <code>virtual ip</code> in the
          <ref column="port_security"/> if port security addressed are enabled.
        </column>
      </group>

      <group title="IP Multicast Snooping Options">
        <p>
          These options apply when the port is part of a logical switch
          which has <ref table="Logical_Switch" column="other_config"/>
          :mcast_snoop set to <code>true</code>.
        </p>

        <column name="options" key="mcast_flood"
                type='{"type": "boolean"}'>
          If set to <code>true</code>, multicast packets (except reports) are
          unconditionally forwarded to the specific port.
          Default: <code>false</code>.
        </column>

        <column name="options" key="mcast_flood_reports"
                type='{"type": "boolean"}'>
          If set to <code>true</code>, multicast reports are unconditionally
          forwarded to the specific port.  Default: <code>false</code>.
        </column>
      </group>

    </group>

    <group title="Containers">
      <p>
        When a large number of containers are nested within a VM, it may be too
        expensive to dedicate a VIF to each container.  OVN can use VLAN tags
        to support such cases.  Each container is assigned a VLAN ID and each
        packet that passes between the hypervisor and the VM is tagged with the
        appropriate ID for the container.  Such VLAN IDs never appear on a
        physical wire, even inside a tunnel, so they need not be unique except
        relative to a single VM on a hypervisor.
      </p>

      <p>
        These columns are used for VIFs that represent nested containers using
        shared VIFs.  For VMs and for containers that have dedicated VIFs, they
        are empty.
      </p>

      <column name="parent_name">
        The VM interface through which the nested container sends its network
        traffic.  This must match the <ref column="name"/> column for some
        other <ref table="Logical_Switch_Port"/>.  Note: for performance
        of the OVN Southbound database conditional monitoring, unlike
        for regular VIFs, <code>ovn-controller</code> will register
        to get updates about all OVN Southbound database
        <ref db="OVN_Southbound" table="Port_Binding"/> table records
        that correspond to nested container ports even if
        <code>external_ids:ovn-monitor-all</code> is set to
        <code>false</code>.  See <code>ovn-controller</code>(8) for more
        information.
      </column>

      <column name="tag_request">
        <p>
          The VLAN tag in the network traffic associated with a container's
          network interface.  The client can request <code>ovn-northd</code>
          to allocate a tag that is unique within the scope of a specific
          parent (specified in <ref column="parent_name"/>) by setting a value
          of <code>0</code> in this column.  The allocated value is written
          by <code>ovn-northd</code> in the <ref column="tag"/> column.
          (Note that these tags are allocated and managed locally in
          <code>ovn-northd</code>, so they cannot be reconstructed in the event
          that the database is lost.)  The client can also request a specific
          non-zero tag and <code>ovn-northd</code> will honor it and copy that
          value to the <ref column="tag"/> column.
        </p>

        <p>
          When <ref column="type"/> is set to <code>localnet</code> or
          <code>l2gateway</code>, this can
          be set to indicate that the port represents a connection to a
          specific VLAN on a locally accessible network. The VLAN ID is used
          to match incoming traffic and is also added to outgoing traffic.
        </p>
      </column>

      <column name="tag">
        <p>
          The VLAN tag allocated by <code>ovn-northd</code> based on the
          contents of the <ref column="tag_request"/> column.
        </p>
      </column>
    </group>

    <group title="Port State">
      <column name="up">
        <p>
          This column is populated by <code>ovn-northd</code>, rather
          than by the CMS plugin as is most of this database.  When a
          logical port is bound to a physical location in the OVN
          Southbound database <ref db="OVN_Southbound"
          table="Binding"/> table, <code>ovn-northd</code> sets this
          column to <code>true</code>; otherwise, or if the port
          becomes unbound later, it sets it to <code>false</code>.
          If this column is empty, the port is not considered up.
          This allows the CMS to wait for a VM's (or container's)
          networking to become active before it allows the VM (or
          container) to start.
        </p>

        <p>
          Logical ports of router type are an exception to this rule.
          They are considered to be always up, that is this column is
          always set to <code>true</code>.
        </p>
      </column>

      <column name="enabled">
        This column is used to administratively set port state.  If this column
        is empty or is set to <code>true</code>, the port is enabled.  If this
        column is set to <code>false</code>, the port is disabled.  A disabled
        port has all ingress and egress traffic dropped.
      </column>

    </group>

    <group title="Addressing">
      <column name="addresses">
        <p>
          Addresses owned by the logical port.
        </p>

        <p>
          Each element in the set must take one of the following forms:
        </p>

        <dl>
          <dt><code>Ethernet address followed by zero or more IPv4 or IPv6 addresses (or both)</code></dt>
          <dd>
            <p>
              An Ethernet address defined is owned by the logical port.
              Like a physical Ethernet NIC, a logical port ordinarily has
              a single fixed Ethernet address.
            </p>

            <p>
              When a OVN logical switch processes a unicast Ethernet frame
              whose destination MAC address is in a logical port's <ref
              column="addresses"/> column, it delivers it only to that port, as
              if a MAC learning process had learned that MAC address on the
              port.
            </p>

            <p>
              If IPv4 or IPv6 address(es) (or both) are defined, it indicates
              that the logical port owns the given IP addresses.
            </p>

            <p>
              If IPv4 address(es) are defined, the OVN logical switch uses this
              information to synthesize responses to ARP requests without
              traversing the physical network. The OVN logical router connected
              to the logical switch, if any, uses this information to avoid
              issuing ARP requests for logical switch ports.
            </p>

            <p>
              Note that the order here is important. The Ethernet address must
              be listed before the IP address(es) if defined.
            </p>

            <p>
              Examples:
            </p>

            <dl>
              <dt><code>80:fa:5b:06:72:b7</code></dt>
              <dd>
                This indicates that the logical port owns the above mac address.
              </dd>

              <dt><code>80:fa:5b:06:72:b7 10.0.0.4 20.0.0.4</code></dt>
              <dd>
                This indicates that the logical port owns the mac address and two
                IPv4 addresses.
              </dd>

              <dt><code>80:fa:5b:06:72:b7 fdaa:15f2:72cf:0:f816:3eff:fe20:3f41</code></dt>
              <dd>
                This indicates that the logical port owns the mac address and
                1 IPv6 address.
              </dd>

              <dt><code>80:fa:5b:06:72:b7 10.0.0.4 fdaa:15f2:72cf:0:f816:3eff:fe20:3f41</code></dt>
              <dd>
                This indicates that the logical port owns the mac address and
                1 IPv4 address and 1 IPv6 address.
              </dd>
            </dl>
          </dd>

          <dt><code>unknown</code></dt>
          <dd>
            This indicates that the logical port has an unknown set of Ethernet
            addresses.  When an OVN logical switch processes a unicast Ethernet
            frame whose destination MAC address is not in any logical port's
            <ref column="addresses"/> column, it delivers it to the port (or
            ports) whose <ref column="addresses"/> columns include
            <code>unknown</code>.
          </dd>

          <dt><code>dynamic</code></dt>
          <dd>
            <p>
              Use <code>dynamic</code> to make <code>ovn-northd</code> generate
              a globally unique MAC address, choose an unused IPv4 address with
              the logical port's subnet (if <ref table="Logical_Switch"
              column="other_config" key="subnet"/> is set in the port's <ref
              table="Logical_Switch"/>), and generate an IPv6 address from the
              MAC address (if <ref table="Logical_Switch" column="other_config"
              key="ipv6_prefix"/> is set in the port's <ref
              table="Logical_Switch"/>) and store them in the port's <ref
              column="dynamic_addresses"/> column.
            </p>

            <p>
              Only one element containing <code>dynamic</code> may appear in
              <ref column="addresses"/>.
            </p>
          </dd>

          <dt><code>dynamic</code> <var>ip</var></dt>
          <dt><code>dynamic</code> <var>ipv6</var></dt>
          <dt><code>dynamic</code> <var>ip</var> <var>ipv6</var></dt>
          <dd>
            These act like <code>dynamic</code> alone but specify particular
            IPv4 or IPv6 addresses to use.  OVN IPAM will still automatically
            allocate the other address if configured appropriately.  Example:
            <code>dynamic 192.168.0.1 2001::1</code>.
          </dd>

          <dt><var>mac</var> <code>dynamic</code></dt>
          <dd>
            This acts like <code>dynamic</code> alone but specifies a
            particular MAC address to use.  OVN IPAM will still automatically
            allocate IPv4 or IPv6 addresses, or both, if configured
            appropriately.  Example: <code>80:fa:5b:06:72:b7 dynamic</code>
          </dd>

          <dt><code>router</code></dt>
          <dd>
            <p>
              Accepted only when <ref column="type"/> is <code>router</code>.
              This indicates that the Ethernet, IPv4, and IPv6 addresses for
              this logical switch port should be obtained from the connected
              logical router port, as specified by <code>router-port</code> in
              <ref column="options"/>.
            </p>

            <p>
              The resulting addresses are used to populate the logical
              switch's destination lookup, and also for the logical switch
              to generate ARP and ND replies.
            </p>

            <p>
              If the connected logical router port has a
              distributed gateway port specified and the logical router
              has rules specified in <ref column="nat" table="Logical_Router"/>
              with <ref column="external_mac" table="NAT"/>, then those
              addresses are also used to populate the switch's destination
              lookup.
            </p>

            <p>
              Supported only in OVN 2.7 and later.  Earlier versions required
              router addresses to be manually synchronized.
            </p>
          </dd>

        </dl>
      </column>

      <column name="dynamic_addresses">
        <p>
          Addresses assigned to the logical port by <code>ovn-northd</code>, if
          <code>dynamic</code> is specified in <ref column="addresses"/>.
          Addresses will be of the same format as those that populate the <ref
          column="addresses"/> column.  Note that dynamically assigned
          addresses are constructed and managed locally in ovn-northd, so they
          cannot be reconstructed in the event that the database is lost.
        </p>
      </column>

      <column name="port_security">
        <p>
          This column controls the addresses from which the host attached to the
          logical port (``the host'') is allowed to send packets and to which it
          is allowed to receive packets.  If this column is empty, all addresses
          are permitted.
        </p>

        <p>
          Each element in the set must begin with one Ethernet address.
          This would restrict the host to sending packets from and receiving
          packets to the ethernet addresses defined in the logical port's
          <ref column="port_security"/> column. It also restricts the inner
          source MAC addresses that the host may send in ARP and IPv6
          Neighbor Discovery packets. The host is always allowed to receive packets
          to multicast and broadcast Ethernet addresses.
        </p>

        <p>
          Each element in the set may additionally contain one or more IPv4 or
          IPv6 addresses (or both), with optional masks.  If a mask is given, it
          must be a CIDR mask.  In addition to the restrictions described for
          Ethernet addresses above, such an element restricts the IPv4 or IPv6
          addresses from which the host may send and to which it may receive
          packets to the specified addresses.  A masked address, if the host part
          is zero, indicates that the host is allowed to use any address in the
          subnet; if the host part is nonzero, the mask simply indicates the size
          of the subnet. In addition:
        </p>

        <ul>
          <li>
            <p>
              If any IPv4 address is given, the host is also allowed to receive
              packets to the IPv4 local broadcast address 255.255.255.255 and to
              IPv4 multicast addresses (224.0.0.0/4).  If an IPv4 address with a
              mask is given, the host is also allowed to receive packets to the
              broadcast address in that specified subnet.
            </p>

            <p>
              If any IPv4 address is given, the host is additionally restricted
              to sending ARP packets with the specified source IPv4 address.
              (RARP is not restricted.)
            </p>
          </li>

          <li>
            <p>
              If any IPv6 address is given, the host is also allowed to receive
              packets to IPv6 multicast addresses (ff00::/8).
            </p>

            <p>
              If any IPv6 address is given, the host is additionally restricted
              to sending IPv6 Neighbor Discovery Solicitation or Advertisement
              packets with the specified source address or, for solicitations,
              the unspecified address.
            </p>
          </li>
        </ul>

        <p>
          If an element includes an IPv4 address, but no IPv6 addresses, then
          IPv6 traffic is not allowed.  If an element includes an IPv6 address,
          but no IPv4 address, then IPv4 and ARP traffic is not allowed.
        </p>

        <p>
          This column uses the same lexical syntax as the <ref column="match"
          table="Pipeline" db="OVN_Southbound"/> column in the OVN Southbound
          database's <ref table="Pipeline" db="OVN_Southbound"/> table.  Multiple
          addresses within an element may be space or comma separated.
        </p>

        <p>
          This column is provided as a convenience to cloud management systems,
          but all of the features that it implements can be implemented as ACLs
          using the <ref table="ACL"/> table.
        </p>

        <p>
          Examples:
        </p>

        <dl>
          <dt><code>80:fa:5b:06:72:b7</code></dt>
          <dd>
            The host may send traffic from and receive traffic to the specified
            MAC address, and to receive traffic to Ethernet multicast and
            broadcast addresses, but not otherwise.  The host may not send ARP or
            IPv6 Neighbor Discovery packets with inner source Ethernet addresses
            other than the one specified.
          </dd>

          <dt><code>80:fa:5b:06:72:b7 192.168.1.10/24</code></dt>
          <dd>
            This adds further restrictions to the first example.  The host may
            send IPv4 packets from or receive IPv4 packets to only 192.168.1.10,
            except that it may also receive IPv4 packets to 192.168.1.255 (based
            on the subnet mask), 255.255.255.255, and any address in 224.0.0.0/4.
            The host may not send ARPs with a source Ethernet address other than
            80:fa:5b:06:72:b7 or source IPv4 address other than 192.168.1.10.
            The host may not send or receive any IPv6 (including IPv6 Neighbor
            Discovery) traffic.
          </dd>

          <dt><code>"80:fa:5b:12:42:ba", "80:fa:5b:06:72:b7 192.168.1.10/24"</code></dt>
          <dd>
            The host may send traffic from and receive traffic to the
            specified MAC addresses, and
            to receive traffic to Ethernet multicast and broadcast addresses,
            but not otherwise.   With MAC 80:fa:5b:12:42:ba, the host may
            send traffic from and receive traffic to any L3 address.
            With MAC 80:fa:5b:06:72:b7, the host may send IPv4 packets from or
            receive IPv4 packets to only 192.168.1.10, except that it may also
            receive IPv4 packets to 192.168.1.255 (based on the subnet mask),
            255.255.255.255, and any address in 224.0.0.0/4.  The host may not
            send or receive any IPv6 (including IPv6 Neighbor Discovery) traffic.
          </dd>
        </dl>
      </column>
    </group>

    <group title="DHCP">
      <column name="dhcpv4_options">
        This column defines the DHCPv4 Options to be included by the
        <code>ovn-controller</code> when it replies to the DHCPv4 requests.
        Please see the <ref table="DHCP_Options"/> table.
      </column>

      <column name="dhcpv6_options">
        This column defines the DHCPv6 Options to be included by the
        <code>ovn-controller</code> when it replies to the DHCPv6 requests.
        Please see the <ref table="DHCP_Options"/> table.
      </column>
    </group>

    <column name="mirror_rules">
        Mirror rules that apply to logical switch port which is the source.
        Please see the <ref table="Mirror"/> table.
    </column>

    <column name="ha_chassis_group">
      References a row in the OVN Northbound database's
      <ref table="HA_Chassis_Group" db="OVN_Northbound"/> table.
      It indicates the HA chassis group to use if the
      <ref column="type"/> is set to <code>external</code>.
      If <ref column="type"/> is not <code>external</code>, this
      column is ignored.
    </column>

    <group title="Naming">
      <column name="external_ids" key="neutron:port_name">
        <p>
          This column gives an optional human-friendly name for the port.  This
          name has no special meaning or purpose other than to provide
          convenience for human interaction with the northbound database.
        </p>

        <p>
          Neutron copies this from its own port object's name.  (Neutron ports
          do are not assigned human-friendly names by default, so it will often
          be empty.)
        </p>
      </column>
    </group>

    <group title="Tunnel Key">
      <column name="options" key="requested-tnl-key"
          type='{"type": "integer", "minInteger": 1, "maxInteger": 32767}'>
        Configures the port binding tunnel key for the port.  Usually
        this is not needed because <code>ovn-northd</code> will assign an
        unique key for each port by itself.  However, if it is configured,
        <code>ovn-northd</code> honors the configured value.  The typical use
        case is for interconnection: the tunnel keys for ports on transit
        switches need to be unique globally, so they are maintained in the
        global <ref db="OVN_IC_Southbound"/> database, and <code>ovn-ic</code>
        simply syncs the value from <ref db="OVN_IC_Southbound"/> through this
        config.
      </column>
    </group>

    <group title="Common Columns">
      <column name="external_ids">
        <p>
          See <em>External IDs</em> at the beginning of this document.
        </p>

        <p>
          The <code>ovn-northd</code> program copies all these pairs into the
          <ref column="external_ids"/> column of the
          <ref table="Port_Binding"/> table in <ref db="OVN_Southbound"/>
          database.
        </p>
      </column>
    </group>
  </table>

  <table name="Forwarding_Group" title="forwarding group">
    <p>
      Each row represents one forwarding group.
    </p>

    <column name="name">
      A name for the forwarding group.  This name has no special meaning or
      purpose other than to provide convenience for human interaction with
      the ovn-nb database.
    </column>

    <column name="vip">
      The virtual IP address assigned to the forwarding group. It will respond
      with vmac when an ARP request is sent for vip.
    </column>

    <column name="vmac">
      The virtual MAC address assigned to the forwarding group.
    </column>

    <column name="liveness">
      If set to <code>true</code>, liveness is enabled for child ports
      otherwise it is disabled.
    </column>

    <column name="child_port">
      List of child ports in the forwarding group.
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="Address_Set" title="Address Sets">
    <p>
      Each row in this table represents a named set of addresses.
      An address set may contain Ethernet, IPv4, or IPv6 addresses
      with optional bitwise or CIDR masks.
      Address set may ultimately be used in ACLs to compare against
      fields such as <code>ip4.src</code> or <code>ip6.src</code>.
      A single address set must contain addresses of the
      same type. As an example, the following would create an address set
      with three IP addresses:
    </p>

    <pre>
      ovn-nbctl create Address_Set name=set1 addresses='10.0.0.1 10.0.0.2 10.0.0.3'
    </pre>

    <p>
      Address sets may be used in the <ref column="match" table="ACL"/> column
      of the <ref table="ACL"/> table.  For syntax information, see the details
      of the expression language used for the <ref column="match"
      table="Logical_Flow" db="OVN_Southbound"/> column in the <ref
      table="Logical_Flow" db="OVN_Southbound"/> table of the <ref
      db="OVN_Southbound"/> database.
    </p>

    <column name="name">
      A name for the address set.  Names are ASCII and must match
      <code>[a-zA-Z_.][a-zA-Z_.0-9]*</code>.
    </column>

    <column name="addresses">
      The set of addresses in string form.
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="Port_Group" title="Port Groups">
    <p>
      Each row in this table represents a named group of logical switch ports.
    </p>

    <p>
      Port groups may be used in the <ref column="match" table="ACL"/> column
      of the <ref table="ACL"/> table.  For syntax information, see the details
      of the expression language used for the <ref column="match"
      table="Logical_Flow" db="OVN_Southbound"/> column in the <ref
      table="Logical_Flow" db="OVN_Southbound"/> table of the <ref
      db="OVN_Southbound"/> database.
    </p>

    <p>
      For each port group, there are two address sets generated to the
      <ref table="Address_Set" db="OVN_Southbound"/> table of the
      <ref db="OVN_Southbound"/> database, containing the IP addresses
      of the group of ports, one for IPv4, and the other for IPv6, with
      <ref column="name" table="Address_Set" db="OVN_Southbound"/> being
      the <ref column="name" table="Port_Group" db="OVN_Northbound"/>
      of the <ref table="Port_Group" db="OVN_Northbound"/> followed by
      a suffix <code>_ip4</code> for IPv4 and <code>_ip6</code> for IPv6.
      The generated address sets can be used in the same way as regular
      address sets in the <ref column="match" table="ACL"/> column
      of the <ref table="ACL"/> table. For syntax information, see the details
      of the expression language used for the <ref column="match"
      table="Logical_Flow" db="OVN_Southbound"/> column in the <ref
      table="Logical_Flow" db="OVN_Southbound"/> table of the <ref
      db="OVN_Southbound"/> database.
    </p>

    <column name="name">
      A name for the port group.  Names are ASCII and must match
      <code>[a-zA-Z_.][a-zA-Z_.0-9]*</code>.
    </column>

    <column name="ports">
      The logical switch ports belonging to the group in uuids.
    </column>

    <column name="acls">
      Access control rules that apply to the port group. Applying an ACL
      to a port group has the same effect as applying the ACL to all logical
      lswitches that the ports of the port group belong to.
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="Load_Balancer" title="load balancer">
    <p>
      Each row represents one load balancer.
    </p>

    <column name="name">
      A name for the load balancer.  This name has no special meaning or
      purpose other than to provide convenience for human interaction with
      the ovn-nb database.
    </column>

    <column name="vips">
      <p>
        A map of virtual IP addresses (and an optional port number with
        <code>:</code> as a separator) associated with this load balancer and
        their corresponding endpoint IP addresses (and optional port numbers
        with <code>:</code> as separators) separated by commas.  If
        the destination IP address (and port number) of a packet leaving a
        container or a VM matches the virtual IP address (and port number)
        provided here as a key, then OVN will statefully replace the
        destination IP address by one of the provided IP address (and port
        number) in this map as a value.  IPv4 and IPv6 addresses are supported
        for load balancing; however a VIP of one address family may not be
        mapped to a destination IP address of a different family.  If
        specifying an IPv6 address with a port, the address portion must be
        enclosed in square brackets.  Examples for keys are "192.168.1.4" and
        "[fd0f::1]:8800".  Examples for value are "10.0.0.1, 10.0.0.2" and
        "20.0.0.10:8800, 20.0.0.11:8800".
      </p>
      <p>
        When the <code>Load_Balancer</code> is added to the
        <code>logical_switch</code>, the VIP has to be in a different subnet
        than the one used for the <code>logical_switch</code>.  Since VIP is
        in a different subnet, you should connect your logical switch to
        either a OVN logical router or a real router (this is because the
        client can now send a packet with VIP as the destination IP address
        and router's mac address as the destination MAC address).
      </p>
    </column>

    <column name="protocol">
      <p>
        Valid protocols are <code>tcp</code>, <code>udp</code>, or
        <code>sctp</code>.  This column is useful when a port number is
        provided as part of the <code>vips</code> column.  If this column is
        empty and a port number is provided as part of <code>vips</code>
        column, OVN assumes the protocol to be <code>tcp</code>.
      </p>
    </column>

    <group title="Health Checks">
      <p>
        OVN supports health checks for load balancer endpoints. When health
        checks are enabled, the load balancer uses only healthy endpoints.
      </p>

      <p>
        Suppose that <ref column="vips"/> contains a key-value pair
        <code>10.0.0.10:80</code>=<code>10.0.0.4:8080,20.0.0.4:8080</code>.  To
        enable health checks for this virtual's endpoints, add two key-value
        pairs to <ref column="ip_port_mappings"/>, with keys
        <code>10.0.0.4</code> and <code>20.0.0.4</code>, and add to <ref
        column="health_check"/> a reference to a <ref
        table="Load_Balancer_Health_Check"/> row whose <ref
        table="Load_Balancer_Health_Check" column="vip"/> is set to
        <code>10.0.0.10</code>. The same approach can be used for IPv6 as well.
      </p>

      <column name="health_check">
        Load balancer health checks associated with this load balancer.
      </column>

      <column name="ip_port_mappings">
        <p>
          Maps from endpoint IP to a colon-separated pair of logical port name
          and source IP,
          e.g. <code><var>port_name</var>:<var>sourc_ip</var></code> for IPv4.
          Health checks are sent to this port with the specified source IP.
          For IPv6 square brackets must be used around IP address, e.g:
          <code><var>port_name</var>:<var>[sourc_ip]</var></code>
        </p>

        <p>
          For example, in the example above, IP to port mappings might be
          defined as <code>10.0.0.4</code>=<code>sw0-p1:10.0.0.2</code> and
          <code>20.0.0.4</code>=<code>sw1-p1:20.0.0.2</code>, if the values
          given were suitable ports and IP addresses.
        </p>

        <p>
          For IPv6 IP to port mappings might be defined as
          <code>[2001::1]</code>=<code>sw0-p1:[2002::1]</code>.
        </p>
      </column>
    </group>

    <column name="selection_fields">
      <p>
        OVN native load balancers are supported using the OpenFlow groups
        of type <code>select</code>. OVS supports two selection methods:
        <code>dp_hash</code> and <code>hash (with optional fields
        specified)</code> in selecting the buckets of a group.
        Please see the OVS documentation (man ovs-ofctl)
        for more details on the selection methods. Each endpoint IP (and port
        if set) is mapped to a bucket in the group flow.
      </p>

      <p>
        CMS can choose the <code>hash</code> selection method by setting the
        selection fields in this column. <code>ovs-vswitchd</code> uses the
        specified fields in generating the hash.
      </p>

      <p>
        <code>dp_hash</code> selection method uses the assistance of
        datapath to calculate the hash and it is expected to be
        faster than <code>hash</code> selection method. So CMS should take
        this into consideration before using the <code>hash</code> method.
        Please consult the OVS documentation and OVS sources for the
        implementation details.
      </p>
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
    <group title="Load_Balancer options">
      <column name="options" key="reject" type='{"type": "boolean"}'>
        If the load balancer is created with <code>--reject</code> option and
        it has no active backends, a TCP reset segment (for tcp) or an ICMP
        port unreachable packet (for all other kind of traffic) will be sent
        whenever an incoming packet is received for this load-balancer.
        Please note using <code>--reject</code> option will disable empty_lb
        SB controller event for this load balancer.
      </column>

      <column name="options" key="hairpin_snat_ip">
        IP to be used as source IP for packets that have been hair-pinned
        after load balancing.  The default behavior when the option is not set
        is to use the load balancer VIP as source IP.  This option may have
        exactly one IPv4 and/or one IPv6 address on it, separated by a space
        character.
      </column>

      <column name="options" key="skip_snat">
        If the load balancing rule is configured with <code>skip_snat</code>
        option, the option lb_force_snat_ip configured for the logical router
        that references this load balancer will not be applied for this load
        balancer.
      </column>

      <column name="options" key="add_route">
        If set to <code>true</code>, then neighbor routers will have logical
        flows added that will allow for routing to the VIP IP. It also will
        have ARP resolution logical flows added. By setting this option, it
        means there is no reason to create a
        <ref table="Logical_Router_Static_Route"/> from neighbor routers to
        this NAT address. It also means that no ARP request is required for
        neighbor routers to learn the IP-MAC mapping for this VIP IP. For
        more information about what flows are added for IP routes, please
        see the <code>ovn-northd</code> manpage section on IP Routing.
      </column>

      <column name="options" key="neighbor_responder">
        If set to <code>all</code>, then routers on which the load balancer
        is applied reply to ARP/neighbor discovery requests for all VIPs
        of the load balancer.  If set to <code>reachable</code>, then routers
        on which the load balancer is applied reply to ARP/neighbor discovery
        requests only for VIPs that are part of a router's subnet.  If set to
        <code>none</code>, then routers on which the load balancer is applied
        never reply to ARP/neighbor discovery requests for any of the load
        balancer VIPs. Load balancers with <code>options:template=true</code>
        do not support <code>reachable</code> as a valid mode.  The default
        value of this option, if not specified, is <code>reachable</code> for
        regular load balancers and <code>none</code> for template load
        balancers.
      </column>

      <column name="options" key="template">
        <p>
          Option to be set to <code>true</code>, if the load balancer is a
          template.  The load balancer VIPs and backends must be using
          <ref table="Chassis_Template_Var"/> in their definitions.
        </p>

        <p>
          Load balancer template VIP supported formats are:
        </p>
        <pre>
^VIP_VAR[:^PORT_VAR|:port]
        </pre>

        <p>
          where <code>VIP_VAR</code> and <code>PORT_VAR</code> are keys of
          the <ref table="Chassis_Template_Var"/> <ref column="variables"/>
          records.
        </p>

        <p>
          Note: The VIP and PORT cannot be combined into a single template
          variable. For example, a <ref table="Chassis_Template_Var"/>
          variable expanding to <code>10.0.0.1:8080</code> is not valid
          if used as VIP.
        </p>

        <p>
          Load balancer template backend supported formats are:
        </p>
        <pre>
^BACKEND_VAR1[:^PORT_VAR1|:port],^BACKEND_VAR2[:^PORT_VAR2|:port]

or

^BACKENDS_VAR1,^BACKENDS_VAR2
        </pre>
        <p>
          where <code>BACKEND_VAR1</code>, <code>PORT_VAR1</code>,
          <code>BACKEND_VAR2</code>, <code>PORT_VAR2</code>,
          <code>BACKENDS_VAR1</code> and <code>BACKENDS_VAR2</code> are keys
          of the <ref table="Chassis_Template_Var"/> <ref column="variables"/>
          records.
        </p>
      </column>

      <column name="options" key="address-family">
        Address family used by the load balancer.  Supported values are
        <code>ipv4</code> and <code>ipv6</code>.  The address-family is
        only used for load balancers with <code>options:template=true</code>.
        For explicit load balancers, setting the address-family has no
        effect.
      </column>

      <column name="options" key="affinity_timeout">
        If the CMS provides a positive value (in seconds) for
        <code>affinity_timeout</code>, OVN will dnat connections received
        from the same client to this lb to the same backend if received in
        the affinity timeslot. Max supported affinity_timeout is 65535
        seconds.
      </column>

      <column name="options" key="ct_flush" type='{"type": "boolean"}'>
        The value indicates whether ovn-controller should flush CT entries
        that are related to this LB. The flush happens if the LB is removed,
        any of the backends is updated/removed or the LB is not considered
        local anymore by the ovn-controller. This option is set to
        <code>false</code> by default.
      </column>
    </group>
  </table>

  <table name="Load_Balancer_Group" title="load balancer group">
    <p>
      Each row represents a logical grouping of load balancers.  It is up to
      the CMS to decide the criteria on which load balancers are grouped
      together.  To simplify configuration and to optimize its processing
      load balancers that must be associated to the same set of logical
      switches and/or logical routers should be grouped together.
    </p>

    <column name="name">
      A name for the load balancer group.  This name has no special meaning or
      purpose other than to provide convenience for human interaction with
      the ovn-nb database.
    </column>

    <column name="load_balancer">
      A set of load balancers.
    </column>
  </table>

  <table name="Load_Balancer_Health_Check" title="load balancer">
    <p>
      Each row represents one load balancer health check.
    </p>

    <column name="vip">
      <code>vip</code> whose endpoints should be monitored for health check.
    </column>

    <group title="Health check options">
      <column name="options" key="interval" type='{"type": "integer"}'>
        The interval, in seconds, between health checks.
      </column>

      <column name="options" key="timeout" type='{"type": "integer"}'>
        The time, in seconds, after which a health check times out.
      </column>

      <column name="options" key="success_count" type='{"type": "integer"}'>
        The number of successful checks after which the endpoint is
        considered online.
      </column>

      <column name="options" key="failure_count" type='{"type": "integer"}'>
        The number of failure checks after which the endpoint is considered
        offline.
      </column>
    </group>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="ACL" title="Access Control List (ACL) rule">
    <p>
      Each row in this table represents one ACL rule for a logical switch
      or a port group that points to it through its <ref column="acls"/>
      column.  The <ref column="action"/> column for the
      highest-<ref column="priority"/> matching row in this table determines a
      packet's treatment.  If no row matches, packets are allowed by default.
      (Default-deny treatment is possible: add a rule with
      <ref column="priority"/> 0, <code>1</code> as <ref column="match"/>,
      and <code>deny</code> as <ref column="action"/>.)
    </p>

    <column name="label">
      <p>
        Associates an identifier with the ACL.
        The same value will be written to corresponding connection
        tracker entry. The value should be a valid 32-bit unsigned integer.
        This value can help in debugging from connection tracker side.
        For example, through this "label" we can backtrack to the ACL rule
        which is causing a "leaked" connection. Connection tracker entries are
        created only for allowed connections so the label is valid only
        for allow and allow-related actions.
      </p>
    </column>
    <column name="priority">
      <p>
        The ACL rule's priority.  Rules with numerically higher priority
        take precedence over those with lower.  If two ACL rules with
        the same priority both match, then the one actually applied to a
        packet is undefined.
      </p>

      <p>
        Return traffic from an <code>allow-related</code> flow is always
        allowed and cannot be changed through an ACL.
      </p>

      <p>
        <code>allow-stateless</code> flows always take precedence before
        stateful ACLs, regardless of their priority. (Both
        <code>allow</code> and <code>allow-related</code> ACLs can be
        stateful.)
      </p>
    </column>

    <column name="direction">
      <p>Direction of the traffic to which this rule should apply:</p>
      <ul>
        <li>
          <code>from-lport</code>: Used to implement filters on traffic
          arriving from a logical port.  These rules are applied to the
          logical switch's ingress pipeline.
        </li>
        <li>
          <code>to-lport</code>: Used to implement filters on traffic
          forwarded to a logical port.  These rules are applied to the
          logical switch's egress pipeline.
        </li>
      </ul>
    </column>

    <column name="match">
      <p>
        The packets that the ACL should match, in the same expression
        language used for the <ref column="match" table="Logical_Flow"
        db="OVN_Southbound"/> column in the OVN Southbound database's
        <ref table="Logical_Flow" db="OVN_Southbound"/> table.  The
        <code>outport</code> logical port is only available in the
        <code>to-lport</code> direction (the <code>inport</code> is
        available in both directions).
      </p>

      <p>
        By default all traffic is allowed.  When writing a more
        restrictive policy, it is important to remember to allow flows
        such as ARP and IPv6 neighbor discovery packets.
      </p>

      <p>
        Note that you can not create an ACL matching on a port with
        type=router or type=localnet.
      </p>
    </column>

    <column name="action">
      <p>The action to take when the ACL rule matches:</p>
      <ul>
        <li>
          <code>allow-stateless</code>: Always forward the packet in stateless
          manner, omitting connection tracking mechanism, regardless of other
          rules defined for the switch.  May require defining additional rules
          for inbound replies.  For example, if you define a rule to allow
          outgoing TCP traffic directed to an IP address, then you probably
          also want to define another rule to allow incoming TCP traffic coming
          from this same IP address.
          In addition, traffic that matches stateless ACLs will bypass
          load-balancer DNAT/un-DNAT processing. Stateful ACLs should be
          used instead if the traffic is supposed to be load-balanced.
        </li>

        <li>
          <code>allow</code>: Forward the packet. It will also send the
          packets through connection tracking when
          <code>allow-related</code> rules exist on the logical switch.
          Otherwise, it's equivalent to <code>allow-stateless</code>.
        </li>

        <li>
          <code>allow-related</code>: Forward the packet and related traffic
          (e.g. inbound replies to an outbound connection).
        </li>

        <li>
          <code>drop</code>: Silently drop the packet.
        </li>

        <li>
          <code>reject</code>: Drop the packet, replying with a RST for TCP or
          ICMPv4/ICMPv6 unreachable message for other IPv4/IPv6-based
          protocols.
        </li>

        <li>
          <code>pass</code>: Pass to the next ACL tier. If using multiple ACL
          tiers, a match on this ACL will stop evaluating ACLs at the current
          tier and move to the next one. If not using ACL tiers or if a
          <code>pass</code> ACL is matched at the final tier, then the
          <ref column="options" key="default_acl_drop" table="NB_Global" />
          option from the <ref table="NB_Global" /> table is used to
          determine how to proceed.
        </li>
      </ul>
    </column>

    <column name="tier">
      <p>The hierarchical tier that this ACL belongs to.</p>

      <p>
        ACLs can be assigned to numerical tiers. When evaluating ACLs, an
        internal counter is used to determine which tier of ACLs should be
        evaluated. Tier 0 ACLs are evaluated first. If no verdict can be
        determined, then tier 1 ACLs are evaluated next. This continues
        until the maximum tier value is reached. If all tiers of ACLs are
        evaluated and no verdict is reached, then the <ref column="options"
        key="default_acl_drop" table="NB_Global" /> option from table
        <ref table="NB_Global" /> is used to determine how to proceed.
      </p>

      <p>
        In this version of OVN, the maximum tier value for ACLs is 3,
        meaning there are 4 tiers of ACLs allowed (0-3).
      </p>
    </column>

    <group title="options">
      <p>
        ACLs options.
      </p>
      <column name="options" key="apply-after-lb">
        <p>
          If set to true, the ACL will be applied after load balancing
          stage.  Supported only for <code>from-lport</code> direction.
        </p>

        <p>
          The main use case of this option is to support ACLs matching on
          the destination IP address of the packet for the backend IPs
          of load balancers.
        </p>

        <p>
          <code>OVN</code> will apply the <code>from-lport</code> ACLs in two
          stages.  ACLs without this option <code>apply-after-lb</code>
          set, will be applied before the load balancer stage and ACLs
          with this option set will be applied after the load balancer
          stage.  The priorities are indepedent between these stages and
          may not be obvious to the CMS.  Hence CMS should be extra careful
          when using this option and should carefully evaluate the priorities
          of all the ACLs and the default deny/allow ACLs if any.
        </p>
      </column>
    </group>

    <group title="Logging">
      <p>
        These columns control whether and how OVN logs packets that match an
        ACL.
      </p>

      <column name="log">
        <p>
          If set to <code>true</code>, packets that match the ACL will trigger
          a log message on the transport node or nodes that perform ACL
          processing.  Logging may be combined with any <ref column="action"/>.
        </p>

        <p>
          If set to <code>false</code>, the remaining columns in this group
          have no significance.
        </p>
      </column>

      <column name="name">
        <p>
          This name, if it is provided, is included in log records.  It
          provides the administrator and the cloud management system a way to
          associate a log record with a particular ACL.
        </p>
      </column>

      <column name="severity">
        <p>
          The severity of the ACL.  The severity levels match those of syslog,
          in decreasing level of severity: <code>alert</code>,
          <code>warning</code>, <code>notice</code>, <code>info</code>, or
          <code>debug</code>.  When the column is empty, the default is
          <code>info</code>.
        </p>
      </column>

      <column name="meter">
        <p>
            The name of a meter to rate-limit log messages for the ACL.
            The string must match the <ref column="name" table="meter"/>
            column of a row in the <ref table="Meter"/> table.  By
            default, log messages are not rate-limited. In order to ensure
            that the same <ref table="Meter"/> rate limits multiple ACL logs
            separately, set the <ref column="fair" table="meter"/> column.
        </p>
      </column>
    </group>

    <group title="Common Columns">
      <column name="options">
        This column provides general key/value settings. The supported
        options are described individually below.
      </column>

      <group title="ACL configuration options">
        <column name="options" key="log-related">
          If set to <code>true</code>, then log when reply or related
          traffic is admitted from a stateful ACL. In order for this
          option to function, the <ref column="log"/> option must be
          set to <code>true</code> and a <ref column="label"/> must
          be set, and it must be unique to the ACL. The label is necessary
          as it is the only means to associate the reply traffic with the
          ACL to which it belongs. It must be unique, because otherwise it
          is ambiguous which ACL will be matched.

          Note: If this option is enabled, an extra flow is installed in
          order to log the related traffic. Therefore, if this is enabled
          on all ACLs, then the total number of flows necessary to log the
          ACL traffic is doubled, compared to if this option is not enabled.
        </column>
      </group>

      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="Logical_Router" title="L3 logical router">
    <p>
      Each row represents one L3 logical router.
    </p>

    <column name="ports">
      The router's ports.
    </column>

    <column name="static_routes">
      Zero or more static routes for the router.
    </column>

    <column name="policies">
      Zero or more routing policies for the router.
    </column>

    <column name="enabled">
      This column is used to administratively set router state.  If this column
      is empty or is set to <code>true</code>, the router is enabled.  If this
      column is set to <code>false</code>, the router is disabled.  A disabled
      router has all ingress and egress traffic dropped.
    </column>

    <column name="nat">
      One or more NAT rules for the router.  NAT rules only work on
      Gateway routers, and on distributed routers with one and only one
      distributed gateway port.
    </column>

    <column name="load_balancer">
      Set of load balancers associated to this logical router.  Load balancer
      Load balancer rules only work on the Gateway routers or routers with one
      and only one distributed gateway port.
    </column>

    <column name="load_balancer_group">
      Set of load balancers groups associated to this logical router.
    </column>

    <group title="Naming">
      <p>
        These columns provide names for the logical router.  From OVN's
        perspective, these names have no special meaning or purpose other than
        to provide convenience for human interaction with the northbound
        database.  There is no requirement for the name to be unique.  (For a
        unique identifier for a logical router, use its row UUID.)
      </p>

      <p>
        (Originally, <ref column="name"/> was intended to serve the purpose of
        a human-friendly name, but the Neutron integration used it to uniquely
        identify its own router object, in the format
        <code>neutron-<var>uuid</var></code>.  Later on, Neutron started
        propagating the friendly name of a router as <ref column="external_ids"
        key="neutron:router_name"/>.  Perhaps this can be cleaned up someday.)
      </p>

      <column name="name">
        A name for the logical router.
      </column>

      <column name="external_ids" key="neutron:router_name">
        Another name for the logical router.
      </column>
    </group>

    <column name="copp">
      <p>
        The control plane protection policy from table <ref table="Copp"/>
        used for metering packets sent to <code>ovn-controller</code> from
        logical ports of this router.
      </p>
    </column>

    <group title="Options">
      <p>
        Additional options for the logical router.
      </p>

      <column name="options" key="chassis">
        <p>
          If set, indicates that the logical router in question is a Gateway
          router (which is centralized) and resides in the set chassis.  The
          same value is also used by <code>ovn-controller</code> to
          uniquely identify the chassis in the OVN deployment and
          comes from <code>external_ids:system-id</code> in the
          <code>Open_vSwitch</code> table of Open_vSwitch database.
        </p>

        <p>
          The Gateway router can only be connected to a distributed router
          via a switch if SNAT and DNAT are to be configured in the Gateway
          router.
        </p>
      </column>
      <column name="options" key="dnat_force_snat_ip">
        <p>
          If set, indicates a set of IP addresses to use to force SNAT a
          packet that has already been DNATed in the gateway router.  When
          multiple gateway routers are configured, a packet can potentially
          enter any of the gateway router, get DNATted and eventually reach the
          logical switch port.  For the return traffic to go back to the same
          gateway router (for unDNATing), the packet needs a SNAT in the first
          place. This can be achieved by setting the above option with a
          gateway specific set of IP addresses. This option may have exactly
          one IPv4 and/or one IPv6 address on it, separated by a a space.
        </p>
      </column>
      <column name="options" key="lb_force_snat_ip">
        <p>
          If set, this option can take two possible type of values.  Either
          a set of IP addresses or the string value - <code>router_ip</code>.
        </p>

        <p>
          If a set of IP addresses are configured, it indicates to use to
          force SNAT a packet that has already been load-balanced in the
          gateway router.  When multiple gateway routers are configured, a
          packet can potentially enter any of the gateway routers, get
          DNATted as part of the load-balancing and eventually reach the
          logical switch port.  For the return traffic to go back to the
          same gateway router (for unDNATing), the packet needs a SNAT in the
          first place.  This can be achieved by setting the above option with
          a gateway specific set of IP addresses. This option may have exactly
          one IPv4 and/or one IPv6 address on it, separated by a space
          character.
        </p>

        <p>
          If it is configured with the value <code>router_ip</code>, then
          the load balanced packet is SNATed with the IP of router port
          (attached to the gateway router) selected as the destination after
          taking the routing decision.
        </p>
      </column>
      <column name="options" key="mcast_relay" type='{"type": "boolean"}'>
        <p>
          Enables/disables IP multicast relay between logical switches
          connected to the logical router. Default: False.
        </p>
      </column>
      <column name="options" key="dynamic_neigh_routers" type='{"type": "boolean"}'>
        <p>
          If set to <code>true</code>, the router will resolve neighbor
          routers' MAC addresses only by dynamic ARP/ND, instead of
          prepopulating static mappings for all neighbor routers in the ARP/ND
          Resolution stage.  This reduces number of flows, but requires ARP/ND
          messages to resolve the IP-MAC bindings when needed.  It is
          <code>false</code> by default.  It is recommended to set to
          <code>true</code> when a large number of logical routers are
          connected to the same logical switch but most of them never need to
          send traffic between each other. By default, ovn-northd does not
          create mappings to NAT and load balancer addresess. However, for NAT
          and load balancer addresses that have the <code>add_route</code>
          option added, ovn-northd will create logical flows that map NAT and
          load balancer IP addresses to the appropriate MAC address. Setting
          <var>dynamic_neigh_routers</var> to <code>true</code> will prevent
          the automatic creation of these logical flows.
        </p>
      </column>
      <column name="options" key="always_learn_from_arp_request" type='{"type": "boolean"}'>
        <p>
          This option controls the behavior when handling IPv4 ARP requests or
          IPv6 ND-NS packets - whether a dynamic neighbor (MAC binding) entry
          is added/updated.
        </p>

        <p>
          <code>true</code> - Always learn the MAC-IP binding, and add/update
          the MAC binding entry.
        </p>

        <p>
          <code>false</code> - If there is a MAC binding for that IP and the
          MAC is different, or, if TPA of ARP request belongs to any router
          port on this router, then update/add that MAC-IP binding. Otherwise,
          don't update/add entries.
        </p>

        <p>
          It is <code>true</code> by default.  It is recommended to set to
          <code>false</code> when a large number of logical routers are
          connected to the same logical switch but most of them never need to
          send traffic between each other, to reduce the size of the MAC
          binding table.
        </p>
      </column>

      <column name="options" key="requested-tnl-key"
          type='{"type": "integer", "minInteger": 1, "maxInteger": 16777215}'>
        Configures the datapath tunnel key for the logical router.
        This is not needed because <code>ovn-northd</code> will assign an
        unique key for each datapath by itself.  However, if it is configured,
        <code>ovn-northd</code> honors the configured value.
      </column>
      <column name="options" key="snat-ct-zone"
          type='{"type": "integer", "minInteger": 0, "maxInteger": 65535}'>
        Use the requested conntrack zone for SNAT with this router. This can be
        useful if egress traffic from the host running OVN comes from both OVN
        and other sources. This way, OVN and the other sources can make use of
        the same conntrack zone.
      </column>

      <column name="options" key="mac_binding_age_threshold"
              type='{"type": "string"}'>
        <p>
            Specifies the MAC binding aging thresholds based on CIDRs, with the
            format: <var>entry</var>[<code>;</code><var>entry</var>[...]],
            where each <var>entry</var> has the format:
            [<var>cidr</var><code>:</code>]<var>threshold</var>
        </p>

        <ul>
          <li>
            <var>cidr</var>: Can be either an IPv4 or IPv6 CIDR.
          </li>
          <li>
            <var>threshold</var>: Threshold value in seconds. MAC bindings with
            IP addresses matching the specified CIDR that exceed this timeout
            will be automatically removed.
          </li>
        </ul>

        <p>
            If an <var>entry</var> is provided without an CIDR (just the
            threshold value), it specifies the default threshold for MAC
            bindings that don't match any of the given CIDRs. If there are
            multiple default threshold entries in the option, the behavior is
            undefined.
        </p>

        <p>
            If there are multiple CIDRs matching a MAC binding IP, the one with
            the longest prefix length takes effect. If there are multiple
            entries with the same CIDR in the option, the behavior is
            undefined.
        </p>

        <p>
            If no matching CIDR is found for a MAC binding IP, and no default
            threshold is specified, the behavior defaults to the original: the
            binding will not be removed based on age.
        </p>

        <p>
            The value can also default to an empty string, which means that the
            aging threshold is disabled. Any string not in the above format is
            regarded as invalid and the aging is disabled.
        </p>

        <p>
            Example:
            <code>192.168.0.0/16:300;192.168.10.0/24:0;fe80::/10:600;1200</code>
        </p>

        <p>
            This sets a threshold of 300 seconds for MAC bindings with IP
            addresses in the 192.168.0.0/16 range, excluding the 192.168.1.0/24
            range (for which the aging is disabled), a threshold of 600 seconds
            for MAC bindings with IP addresses in the fe80::/10 IPv6 range, and
            a default threshold of 1200 seconds for all other MAC bindings.
        </p>

      </column>
    </group>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="QoS" title="QoS rule">
    <p>
      Each row in this table represents one QoS rule for a logical switch
      that points to it through its <ref column="qos_rules"/> column.
      Two types of QoS are supported: DSCP marking and metering.  A
      <ref column="match"/> with the highest-<ref column="priority"/>
      will have QoS applied to it.  If the <ref column="action"/> column is
      specified, then matching packets will have DSCP marking applied.
      If the <ref column="bandwidth"/> column is specified, then matching
      packets will have metering applied.  <ref column="action"/> and
      <ref column="bandwidth"/> are not exclusive, so both marking and
      metering by defined for the same QoS entry. If no row matches,
      packets will not have any QoS applied.
    </p>

    <column name="priority">
      <p>
        The QoS rule's priority.  Rules with numerically higher priority
        take precedence over those with lower.  If two QoS rules with
        the same priority both match, then the one actually applied to a
        packet is undefined.
      </p>
    </column>

    <column name="direction">
      <p>
        The value of this field is similar to <ref colun="direction"
        table="ACL" db="OVN_Northbound"/> column in the OVN Northbound
        database's <ref table="ACL" db="OVN_Northbound"/> table.
      </p>
    </column>

    <column name="match">
      <p>
        The packets that the QoS rules should match, in the same expression
        language used for the <ref column="match" table="Logical_Flow"
        db="OVN_Southbound"/> column in the OVN Southbound database's
        <ref table="Logical_Flow" db="OVN_Southbound"/> table.  The
        <code>outport</code> logical port is only available in the
        <code>to-lport</code> direction (the <code>inport</code> is
        available in both directions).
      </p>
    </column>

    <column name="action">
      <p>When specified, matching flows will have DSCP marking applied.</p>
      <ul>
        <li>
          <code>dscp</code>: The value of this action should be in the
          range of 0 to 63 (inclusive).
        </li>
      </ul>
    </column>

    <column name="bandwidth">
      <p>
         When specified, matching packets will have bandwidth metering
         applied.  Traffic over the limit will be dropped.
      </p>
      <ul>
        <li>
          <code>rate</code>: The value of rate limit in kbps.
        </li>
        <li>
          <code>burst</code>: The value of burst rate limit in kilobits.
          This is optional and needs to specify the <code>rate</code>.
        </li>
      </ul>
    </column>

    <column name="external_ids">
      See <em>External IDs</em> at the beginning of this document.
    </column>
  </table>

  <table name="Mirror" title="Mirror Entry">
    <p>
      Each row in this table represents a mirror that can be used for
      port mirroring. These mirrors are referenced by the
      <ref column="mirror_rules" table="Logical_Switch_Port"/> column in
      the <ref table="Logical_Switch_Port"/> table.
    </p>

    <column name="name">
      <p>
        Represents the name of the mirror.
      </p>
    </column>

    <column name="filter">
      <p>
        The value of this field represents selection criteria of the mirror.
        <code>to-lport</code> mirrors the packets coming into logical port.
        <code>from-lport</code> mirrors the packets going out of logical port.
        <code>both</code> mirrors for both directions.
      </p>
    </column>

    <column name="sink">
      <p>
        The value of this field represents the destination/sink of the mirror.
        If the <var>type</var> is <code>gre</code> or <code>erspan</code>,
        the value indicates the tunnel remote IP (either IPv4 or IPv6).
        For a <var>type</var> of <code>local</code>, this field defines a
        local interface on the OVS integration bridge to be used as the
        mirror destination. The interface must possess external-ids:mirror-id
        that matches this string.
      </p>
    </column>

    <column name="type">
      <p>
        The value of this field specifies the mirror type - <code>gre</code>,
        <code>erspan</code> or <code>local</code>.
      </p>
    </column>

    <column name="index">
      <p>
        The value of this field represents the tunnel ID. If the configured
        tunnel type is <code>gre</code>, this field represents the
        <code>GRE</code> key value and if the configured tunnel type is
        <code>erspan</code> it represents the <code>erspan_idx</code> value.
        It is ignored if the type is <code>local</code>.
      </p>
    </column>

    <column name="external_ids">
      See <em>External IDs</em> at the beginning of this document.
    </column>
  </table>

  <table name="Meter" title="Meter entry">
    <p>
      Each row in this table represents a meter that can be used for QoS or
      rate-limiting.
    </p>

    <column name="name">
      <p>
        A name for this meter.
      </p>

      <p>
        Names that begin with "__" (two underscores) are reserved for
        OVN internal use and should not be added manually.
      </p>
    </column>

    <column name="unit">
      <p>
        The unit for <ref column="rate" table="Meter_Band"/> and
        <ref column="burst_rate" table="Meter_Band"/> parameters in
        the <ref column="bands"/> entry.  <code>kbps</code> specifies
        kilobits per second, and <code>pktps</code> specifies packets
        per second.
      </p>
    </column>

    <column name="bands">
      <p>
        The bands associated with this meter.  Each band specifies a
        rate above which the band is to take the action
        <code>action</code>.  If multiple bands' rates are exceeded,
        then the band with the highest rate among the exceeded bands is
        selected.
      </p>
    </column>

    <column name="fair">
      <p>
        This column is used to further describe the desired behavior
        of the meter when there are multiple references to it. If this
        column is empty or is set to <code>false</code>, the rate will
        be shared across all rows that refer to the same Meter
        <ref column="name" table="meter"/>. Conversely, when this column
        is set to <code>true</code>, each user of the same Meter will be
        rate-limited on its own.
      </p>
    </column>

    <column name="external_ids">
      See <em>External IDs</em> at the beginning of this document.
    </column>
  </table>

  <table name="Meter_Band" title="Band for meter entries">
    <p>
      Each row in this table represents a meter band which specifies the
      rate above which the configured action should be applied.  These bands
      are referenced by the <ref column="bands" table="Meter"/> column in
      the <ref table="Meter"/> table.
    </p>

    <column name="action">
      <p>
        The action to execute when this band matches.  The only supported
        action is <code>drop</code>.
      </p>
    </column>

    <column name="rate">
      <p>
        The rate limit for this band, in kilobits per second or bits per
        second, depending on whether the parent <ref table="Meter"/>
        entry's <ref column="unit" table="Meter"/> column specified
        <code>kbps</code> or <code>pktps</code>.
      </p>
    </column>

    <column name="burst_size">
      <p>
        The maximum burst allowed for the band in kilobits or packets,
        depending on whether <code>kbps</code> or <code>pktps</code> was
        selected in the parent <ref table="Meter"/> entry's
        <ref column="unit" table="Meter"/> column.  If the size is zero,
        the switch is free to select some reasonable value depending on
        its configuration.
      </p>
    </column>

    <column name="external_ids">
      See <em>External IDs</em> at the beginning of this document.
    </column>
  </table>

  <table name="Logical_Router_Port" title="L3 logical router port">
    <p>
      A port within an L3 logical router.
    </p>

    <p>
      Exactly one <ref table="Logical_Router"/> row must reference a given
      logical router port.
    </p>

    <column name="name">
      <p>
        A name for the logical router port.
      </p>

      <p>
        In addition to provide convenience for human interaction with the
        northbound database, this column is used as reference by its patch port
        in <ref table="Logical_Switch_Port"/> or another logical router port in
        <ref table="Logical_Router_Port"/>.
      </p>

        <p>
          A logical router port may not have the same name as a logical switch
          port, but the database schema cannot enforce this.
        </p>
    </column>

    <column name="networks">
      <p>
        The IP addresses and netmasks of the router.  For example,
        <code>192.168.0.1/24</code> indicates that the router's IP
        address is 192.168.0.1 and that packets destined to
        192.168.0.<var>x</var> should be routed to this port.
      </p>

      <p>
        A logical router port always adds a link-local IPv6 address
        (fe80::/64) automatically generated from the interface's MAC
        address using the modified EUI-64 format.
      </p>
    </column>

    <column name="mac">
      The Ethernet address that belongs to this router port.
    </column>

    <column name="enabled">
      This column is used to administratively set port state.  If this column
      is empty or is set to <code>true</code>, the port is enabled.  If this
      column is set to <code>false</code>, the port is disabled.  A disabled
      port has all ingress and egress traffic dropped.
    </column>

    <group title="Distributed Gateway Ports">
      <p>
        Gateways, as documented under <code>Gateways</code> in the OVN
        architecture guide, provide limited connectivity between
        logical networks and physical ones.  OVN support multiple
        kinds of gateways.  The <ref table="Logical_Router_Port"/>
        table can be used two different ways to configure
        <dfn>distributed gateway ports</dfn>, which are one kind of
        gateway.  These two forms of configuration exist for
        historical reasons.  Both of them produce the same kind of OVN
        southbound records and the same behavior in practice.
      </p>

      <p>
        If either of these are set, this logical router port represents a
        distributed gateway port that connects this router to a
        logical switch with a <code>localnet</code> port or a
        connection to another OVN deployment.
      </p>

      <p>
        Also mentioned in the OVN architecture guide, distributed gateway ports
        can also be used for scalability reasons in deployments where logical
        switches are dedicated to chassises rather than distributed.
      </p>

      <p>
        The preferred way to configure a gateway is <ref
        column="ha_chassis_group"/>, but <ref
        column="gateway_chassis"/> is also supported for backward
        compatibility.  Only one of these should be set at a time on a
        given LRP, since they configure the same features.
      </p>

      <p>
        Even when a gateway is configured, the logical router port
        still effectively resides on each chassis.  However, due to
        the implications of the use of L2 learning in the physical
        network, as well as the need to support advanced features such
        as one-to-many NAT (aka IP masquerading), a subset of the
        logical router processing is handled in a centralized manner
        on the gateway chassis.
      </p>

      <p>
        There can be more than one distributed gateway ports configured
        on each logical router, each connecting to different L2 segments.
        Load-balancing is not yet supported on logical routers with more
        than one distributed gateway ports.
      </p>

      <p>
        For each distributed gateway port, it may have more than one gateway
        chassises. When more than one gateway chassis is specified, OVN only
        uses one at a time.  OVN can rely on OVS BFD implementation to monitor
        gateway connectivity, preferring the highest-priority gateway
        that is online.  Priorities are specified in the <code>priority</code>
        column of <ref table="Gateway_Chassis"/> or <ref table="HA_Chassis"/>.
      </p>

      <p>
        <code>ovn-northd</code> programs the <ref
        column="external_mac" table="NAT"/> rules specified in the
        LRP's LR into the peer logical switch's destination lookup on
        the chassis where the <ref column="logical_port" table="NAT"/>
        resides.  In addition, the logical router's MAC address is
        automatically programmed in the peer logical switch's
        destination lookup flow on the gateway chasssis.  If it is
        desired to generate gratuitous ARPs for NAT addresses, then
        set the peer LSP's <ref column="options" key="nat-addresses"
        table="Logical_Switch_Port"/> to <code>router</code>.
      </p>

      <p>
        OVN 20.03 and earlier supported a third way to configure
        distributed gateway ports using
        <code>options:redirect-chassis</code> to specify the gateway
        chassis.  This method is no longer supported.  Any remaining
        users should switch to one of the newer methods instead.  A
        <ref column="gateway_chassis"/> may be easily configured from
        the command line, e.g. <code>ovn-nbctl lrp-set-gateway-chassis
        <var>lrp</var> <var>chassis</var></code>.
      </p>

      <column name="ha_chassis_group">
        Designates an <ref table="HA_Chassis_Group"/> to provide
        gateway high availability.
      </column>

      <column name="gateway_chassis">
        Designates one or more <ref table="Gateway_Chassis"/> for the
        logical router port.
      </column>

      <group title="Options for Physical VLAN MTU Issues">
        <p>
          MTU issues arise in mixing tunnels with logical networks that are
          bridged to a physical VLAN.  For an explanation of the MTU issues,
          see <code>Physical VLAN MTU Issues</code> in the OVN architecture
          document.  The following options, which are alternatives, provide
          solutions.  Both of them cause packets to be sent over
          <code>localnet</code> instead of tunnels, but they differ in whether
          some or all packets are sent this way.  The most prominent
          tradeoff between these options is that
          <code>reside-on-redirect-chassis</code> is easier to configure and
          that <code>redirect-type</code> performs better for east-west
          traffic.
        </p>

        <column name="options" key="reside-on-redirect-chassis"
                type='{"type": "boolean"}'>
          <p>
            If set to <code>true</code>, this option forces all traffic across
            the logical router port to pass through the gateway chassis using a
            hop across a <code>localnet</code> port.  This changes behavior in
            two ways:
          </p>

          <ul>
            <li>
              Without this option, east-west traffic passes directly between
              source and destination chassis (or even within a single chassis,
              for co-located VMs).  With this option, all east-west traffic
              passes through the gateway chassis.
            </li>

            <li>
              Without this option, traffic between the gateway chassis and
              other chassis is encapsulated in tunnels.  With this option,
              traffic passes over a <code>localnet</code> interface.
            </li>
          </ul>

          <p>
            This option may usefully be set only on logical router ports that
            connect a distributed logical router to a logical switch with VIFs.
            It should not be set on a distributed gateway port.
          </p>

          <p>
            OVN honors this option only if the logical router has one and only
            one distributed gateway port and if the LRP's peer switch has a
            <code>localnet</code> port.
          </p>
        </column>

        <column name="options" key="redirect-type"
                type='{"type": "string", "enum": ["set", ["overlay", "bridged"]]}'>
          <p>
            If set to <code>bridged</code> on a distributed gateway port, this
            option causes OVN to redirect packets to the gateway chassis over a
            <code>localnet</code> port instead of a tunnel.  The relevant
            chassis must share a <code>localnet</code> port.
          </p>

          <p>
            This feature requires the administrator or the CMS to configure
            each participating chassis with a unique Ethernet address for the
            logical router by setting <code>ovn-chassis-mac-mappings</code> in
            the Open vSwitch database, for use by <code>ovn-controller</code>.
          </p>

          <p>
            Setting this option to <code>overlay</code> or leaving it unset has
            no effect.  This option may usefully be set only on a distributed
            gateway port when there is one and only one distributed gateway
            port on the logical router.  It is otherwise ignored.
          </p>
        </column>
      </group>
    </group>

    <column name="ipv6_prefix">
       This column contains IPv6 prefix obtained by prefix delegation
       router according to RFC 3633
    </column>

    <group title="ipv6_ra_configs">
      <p>
        This column defines the IPv6 ND RA address mode and ND MTU Option to be
        included by <code>ovn-controller</code> when it replies to the IPv6
        Router solicitation requests.
      </p>

      <column name="ipv6_ra_configs" key="address_mode">
        The address mode to be used for IPv6 address configuration.
        The supported values are:
        <ul>
          <li>
            <code>slaac</code>: Address configuration using Router
            Advertisement (RA) packet. The IPv6 prefixes defined in the
            <ref table="Logical_Router_Port"/> table's
            <ref table="Logical_Router_Port" column="networks"/> column will
            be included in the RA's ICMPv6 option - Prefix information.
          </li>

          <li>
            <code>dhcpv6_stateful</code>: Address configuration using DHCPv6.
          </li>

          <li>
            <code>dhcpv6_stateless</code>: Address configuration using Router
            Advertisement (RA) packet. Other IPv6 options are provided by
            DHCPv6.
          </li>
        </ul>
      </column>

      <column name="ipv6_ra_configs" key="router_preference">
        Default Router Preference (PRF) indicates whether to prefer this
        router over other default routers (RFC 4191).
        Possible values are:

        <ul>
          <li>HIGH: mapped to 0x01 in RA PRF field</li>
          <li>MEDIUM: mapped to 0x00 in RA PRF field</li>
          <li>LOW: mapped to 0x11 in RA PRF field</li>
        </ul>
      </column>

      <column name="ipv6_ra_configs" key="route_info">
        Route Info is used to configure Route Info Option sent in Router
        Advertisement according to RFC 4191. Route Info is a comma
        separated string where each field provides PRF and prefix for a
        given route (e.g: HIGH-aef1::11/48,LOW-aef2::11/96)
        Possible PRF values are:

        <ul>
          <li>HIGH: mapped to 0x01 in RA PRF field</li>
          <li>MEDIUM: mapped to 0x00 in RA PRF field</li>
          <li>LOW: mapped to 0x11 in RA PRF field</li>
        </ul>
      </column>

      <column name="ipv6_ra_configs" key="mtu">
        The recommended MTU for the link. Default is 0, which means no MTU
        Option will be included in RA packet replied by ovn-controller.
        Per RFC 2460, the mtu value is recommended no less than 1280, so
        any mtu value less than 1280 will be considered as no MTU Option.
      </column>

      <column name="ipv6_ra_configs" key="send_periodic">
        If set to true, then this router interface will send router
        advertisements periodically.  The default is false.
      </column>

      <column name="ipv6_ra_configs" key="max_interval">
        The maximum number of seconds to wait between sending periodic router
        advertisements.  This option has no effect if <ref
        column="ipv6_ra_configs" key="send_periodic"/> is false.  The default
        is 600.
      </column>

      <column name="ipv6_ra_configs" key="min_interval">
        The minimum number of seconds to wait between sending periodic router
        advertisements.  This option has no effect if <ref
        column="ipv6_ra_configs" key="send_periodic"/> is false.  The default
        is one-third of <ref column="ipv6_ra_configs" key="max_interval"/>,
        i.e. 200 seconds if that key is unset.
      </column>

      <column name="ipv6_ra_configs" key="rdnss">
        IPv6 address of RDNSS server announced in RA packets. At the moment
        OVN supports just one RDNSS server.
      </column>

      <column name="ipv6_ra_configs" key="dnssl">
        DNS Search List announced in RA packets. Multiple DNS Search List
        must be 'comma' separated (e.g. "a.b.c, d.e.f")
      </column>
    </group>

    <group title="Options">
      <p>
        Additional options for the logical router port.
      </p>

      <column name="options" key="mcast_flood"
              type='{"type": "boolean"}'>
        <p>
          If set to <code>true</code>, multicast traffic (including reports)
          are unconditionally forwarded to the specific port.
        </p>

        <p>
          This option applies when the port is part of a logical router which
          has <ref table="Logical_Router" column="options"/>:mcast_relay set
          to <code>true</code>.
        </p>

        <p>
          Default: <code>false</code>.
        </p>
      </column>

      <column name="options" key="requested-tnl-key"
          type='{"type": "integer", "minInteger": 1, "maxInteger": 32767}'>
        Configures the port binding tunnel key for the port.  Usually
        this is not needed because <code>ovn-northd</code> will assign an
        unique key for each port by itself.  However, if it is configured,
        <code>ovn-northd</code> honors the configured value.
      </column>

      <column name="options" key="prefix_delegation"
              type='{"type": "boolean"}'>
        <p>
          If set to <code>true</code>, enable IPv6 prefix delegation state
          machine on this logical router port (RFC3633). IPv6 prefix
          delegation is available just on a gateway router or on a gateway
          router port.
        </p>
      </column>

      <column name="options" key="prefix" type='{"type": "boolean"}'>
        <p>
          If set to <code>true</code>, this interface will receive an IPv6
          prefix according to RFC3663
        </p>
      </column>

      <column name="options" key="route_table">
        Designates lookup Logical_Router_Static_Routes with specified
        <code>route_table</code> value. Routes to directly connected networks
        from same Logical Router and routes without <code>route_table</code>
        option set have higher priority than routes with
        <code>route_table</code> option set.
      </column>

      <column name="options" key="gateway_mtu"
          type='{"type": "integer", "minInteger": 68, "maxInteger": 65535}'>
        <p>
          If set, logical flows will be added to router pipeline to check
          packet length.  If packet length is greater than the value set,
          ICMPv4 type 3 (Destination Unreachable) code 4 (Fragmentation Needed
          and Don't Fragment was Set) or ICMPv6 type 2 (Packet Too Big)
          code 0 (no route to destination) packets will be generated.

          This allows for Path MTU Discovery.
        </p>
      </column>

      <column name="options" key="gateway_mtu_bypass">
        <p>
          When configured, represents a match expression, in the same
          expression language used for the <ref column="match"
          table="Logical_Flow" db="OVN_Southbound"/> column in the OVN
          Southbound database's <ref table="Logical_Flow" db="OVN_Southbound"/>
          table.  Packets matching this expression will bypass the length
          check configured through the
          <ref column="options" key="gateway_mtu"/> option.
        </p>
      </column>
    </group>

    <group title="Attachment">
      <p>
        A given router port serves one of two purposes:
      </p>

      <ul>
        <li>
          To attach a logical switch to a logical router.  A logical router
          port of this type is referenced by exactly one <ref
          table="Logical_Switch_Port"/> of type <code>router</code>.
          The value of <ref column="name"/> is set as
          <code>router-port</code> in column <ref column="options"/> of
          <ref table="Logical_Switch_Port"/>.  In this case <ref
          column="peer"/> column is empty.
        </li>

        <li>
          To connect one logical router to another.  This requires a pair of
          logical router ports, each connected to a different router.  Each
          router port in the pair specifies the other in its <ref
          column="peer"/> column.  No <ref table="Logical_Switch"/> refers to
          the router port.
        </li>
      </ul>

      <column name="peer">
        <p>
          For a router port used to connect two logical routers, this
          identifies the other router port in the pair by <ref column="name"/>.
        </p>

        <p>
          For a router port attached to a logical switch, this column is empty.
        </p>
      </column>
    </group>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
        <p>
          The <code>ovn-northd</code> program copies all these pairs into the
          <ref column="external_ids"/> column of the
          <ref table="Port_Binding"/> table in <ref db="OVN_Southbound"/>
          database.
        </p>
      </column>
    </group>

    <group title="Status">
      <p>
        Additional status about the logical router port.
      </p>
      <column name="status" key="hosting-chassis">
        <p>
          This option is populated by <code>ovn-northd</code>.
        </p>

        <p>
          When a distributed gateway port is bound to a location in
          the OVN Southbound database
          <ref db="OVN_Southbound" table="Port_Binding"/>
          <code>ovn-northd</code> will populate this key with the
          name of the Chassis that is currently hosting this port.
        </p>
      </column>
    </group>
  </table>

  <table name="Logical_Router_Static_Route" title="Logical router static routes">
    <p>
      Each record represents a static route.
    </p>

    <p>
      When multiple routes match a packet, the longest-prefix match is chosen.
      For a given prefix length, a <code>dst-ip</code> route is preferred over
      a <code>src-ip</code> route.
    </p>

    <p>
      When there are ECMP routes, i.e. multiple routes with same prefix and
      policy, one of them will be selected based on the 5-tuple hashing of the
      packet header.
    </p>

    <column name="ip_prefix">
      <p>
        IP prefix of this route (e.g. 192.168.100.0/24).
      </p>
    </column>

    <column name="policy">
      <p>
        If it is specified, this setting describes the policy used to make
        routing decisions.  This setting must be one of the following strings:
      </p>
      <ul>
        <li>
          <code>src-ip</code>: This policy sends the packet to the
          <ref column="nexthop"/> when the packet's source IP address matches
          <ref column="ip_prefix"/>.
       </li>
        <li>
          <code>dst-ip</code>: This policy sends the packet to the
          <ref column="nexthop"/> when the packet's destination IP address
          matches <ref column="ip_prefix"/>.
        </li>
      </ul>
      <p>
        If not specified, the default is <code>dst-ip</code>.
     </p>
    </column>

    <column name="nexthop">
      <p>
        Nexthop IP address for this route.  Nexthop IP address should be the IP
        address of a connected router port or the IP address of a logical port
        or can be set to <code>discard</code> for dropping packets which match
        the given route.
      </p>
    </column>

    <column name="output_port">
      <p>
        The name of the <ref table="Logical_Router_Port"/> via which the packet
        needs to be sent out.  This is optional and when not specified,
        OVN will automatically figure this out based on the
        <ref column="nexthop"/>.  When this is specified and there are
        multiple IP addresses on the router port and none of them are in the
        same subnet of <ref column="nexthop"/>, OVN chooses the first IP
        address as the one via which the <ref column="nexthop"/> is reachable.
      </p>
    </column>

    <column name="bfd">
      <p>
        Reference to <ref table="BFD"/> row if the route has associated a
        BFD session
      </p>
    </column>

    <column name="route_table">
      <p>
        Any string to place route to separate routing table. If Logical Router
        Port has configured value in <ref table="Logical_Router_Port"
        column="options" key="route_table"/> other than empty string, OVN
        performs route lookup for all packets entering Logical Router ingress
        pipeline from this port in the following manner:
      </p>

      <ul>
        <li>
          1. First lookup among "global" routes: routes without
          <code>route_table</code> value set and routes to directly connected
          networks.
        </li>
        <li>
          2. Next lookup among routes with same <code>route_table</code> value
          as specified in LRP's options:route_table field.
        </li>
      </ul>
    </column>

    <column name="external_ids" key="ic-learned-route">
      <code>ovn-ic</code> populates this key if the route is learned from the
      global <ref db="OVN_IC_Southbound"/> database.  In this case the value
      will be set to the uuid of the row in <ref table="Route"
      db="OVN_IC_Southbound"/> table of the <ref db="OVN_IC_Southbound"/>
      database.
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>

    <group title="Common options">
      <column name="options">
        This column provides general key/value settings. The supported
        options are described individually below.
      </column>

      <column name="options" key="ecmp_symmetric_reply">
        If true, then new traffic that arrives over this route will have
        its reply traffic bypass ECMP route selection and will be sent out
        this route instead. Note that this option overrides any rules set
        in the <ref table="Logical_Router_policy" /> table. This option
        only works on gateway routers (routers that have
        <ref column="options" key="chassis" table="Logical_Router" /> set).
      </column>

      <column name="options" key="origin">
        In case ovn-interconnection has been learned this route, it will have
        its origin set: either "connected" or "static".  This key is supposed
        to be written only by <code>ovn-ic</code> daemon.  ovn-northd then
        checks this value when generating Logical Flows.  <ref
        table="Logical_Router_Static_Route"/> records with same
        <ref column="ip_prefix"/> within same Logical Router will have next
        lookup order based on <code>origin</code> key value:
        <ol>
          <li>connected</li>
          <li>static</li>
        </ol>
      </column>
    </group>

  </table>

  <table name="Logical_Router_Policy" title="Logical router policies">
    <p>
      Each row in this table represents one routing policy for a logical router
      that points to it through its <ref column="policies"/> column.  The <ref
      column="action"/> column for the highest-<ref column="priority"/>
      matching row in this table determines a packet's treatment.  If no row
      matches, packets are allowed by default. (Default-deny treatment is
      possible: add a rule with <ref column="priority"/> 0, <code>1</code> as
      <ref column="match"/>, and <code>drop</code> as <ref column="action"/>.)
    </p>

    <column name="priority">
      <p>
        The routing policy's priority.  Rules with numerically higher priority
        take precedence over those with lower. A rule is uniquely identified
        by the priority and match string.
      </p>
    </column>

    <column name="match">
      <p>
        The packets that the routing policy should match,
        in the same expression language used for the
        <ref column="match" table="Logical_Flow" db="OVN_Southbound"/>
        column in the OVN Southbound database's
        <ref table="Logical_Flow" db="OVN_Southbound"/> table.
      </p>

      <p>
        By default all traffic is allowed.  When writing a more
        restrictive policy, it is important to remember to allow flows
        such as ARP and IPv6 neighbor discovery packets.
      </p>
    </column>

    <column name="action">
      <p>The action to take when the routing policy matches:</p>
      <ul>
        <li>
          <code>allow</code>: Forward the packet.
        </li>

        <li>
          <code>drop</code>: Silently drop the packet.
        </li>

        <li>
          <code>reroute</code>: Reroute packet to <ref column="nexthop"/> or
          <ref column="nexthops"/>.
        </li>
      </ul>
    </column>

    <column name="nexthop">
      <p>
        Note: This column is deprecated in favor of <ref column="nexthops"/>.
      </p>
      <p>
        Next-hop IP address for this route, which should be the IP
        address of a connected router port or the IP address of a logical port.
      </p>
    </column>

    <column name="nexthops">
      <p>
        Next-hop ECMP IP addresses for this route. Each IP in the list should
        be the IP address of a connected router port or the IP address of a
        logical port.
      </p>

      <p>
        One IP from the list is selected as next hop.
      </p>
    </column>

    <column name="options" key="pkt_mark">
      <p>
        Marks the packet with the value specified when the router policy
        is applied. CMS can inspect this packet marker and take some decisions
        if desired. This value is not preserved when the packet goes out on the
        wire.
      </p>
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="NAT" title="NAT rules">
    <p>
      Each record represents a NAT rule.
    </p>

    <column name="type">
      <p>Type of the NAT rule.</p>
      <ul>
        <li>
          When <ref column="type"/> is <code>dnat</code>, the externally
          visible IP address <ref column="external_ip"/> is DNATted to the IP
          address <ref column="logical_ip"/> in the logical space.
        </li>
        <li>
          When <ref column="type"/> is <code>snat</code>, IP packets
          with their source IP address that either matches the IP address
          in <ref column="logical_ip"/> or is in the network provided by
          <ref column="logical_ip"/> is SNATed into the IP address in
          <ref column="external_ip"/>.
        </li>
        <li>
          When <ref column="type"/> is <code>dnat_and_snat</code>, the
          externally visible IP address <ref column="external_ip"/> is
          DNATted to the IP address <ref column="logical_ip"/> in the
          logical space. In addition, IP packets with the source IP
          address that matches <ref column="logical_ip"/> is SNATed into
          the IP address in <ref column="external_ip"/>.
        </li>
      </ul>
    </column>

    <column name="external_ip">
      An IPv4 address.
    </column>

    <column name="external_mac">
      <p>
        A MAC address.
      </p>

      <p>
        This is only used on the gateway port on distributed routers.
        This must be specified in order for the NAT rule to be
        processed in a distributed manner on all chassis.  If this is
        not specified for a NAT rule on a distributed router, then
        this NAT rule will be processed in a centralized manner on
        the gateway port instance on the gateway chassis.
      </p>

      <p>
        This MAC address must be unique on the logical switch that the
        gateway port is attached to.  If the MAC address used on the
        <ref column="logical_port"/> is globally unique, then that MAC
        address can be specified as this <ref column="external_mac"/>.
      </p>
    </column>

    <column name="external_port_range">
      <p>
        L4 source port range
      </p>

      <p>
        Range of ports, from which a port number will be picked that will
        replace the source port of to be NATed packet. This is basically
        PAT (port address translation).
      </p>

      <p>
        Value of the column is in the format, port_lo-port_hi.
        For example:
        external_port_range : "1-30000"
      </p>

      <p>
        Valid range of ports is 1-65535.
      </p>

    </column>

    <column name="logical_ip">
      An IPv4 network (e.g 192.168.1.0/24) or an IPv4 address.
    </column>

    <column name="logical_port">
      <p>
        The name of the logical port where the <ref column="logical_ip"/>
        resides.
      </p>

      <p>
        This is only used on distributed routers.  This must be
        specified in order for the NAT rule to be processed in a
        distributed manner on all chassis.  If this is not specified
        for a NAT rule on a distributed router, then this NAT rule
        will be processed in a centralized manner on the gateway
        port instance on the gateway chassis.
      </p>
    </column>

    <column name="allowed_ext_ips">
      It represents Address Set of external ips that NAT rule is applicable to.
      For SNAT type NAT rules, this refers to destination addresses.
      For DNAT type NAT rules, this refers to source addresses.

      <p>
        This configuration overrides the default NAT behavior of applying a
        rule solely based on internal IP. Without this configuration, NAT
        happens without considering the external IP (i.e dest/source for
        snat/dnat type rule). With this configuration NAT rule is applied
        ONLY if external ip is in the input Address Set.
      </p>
    </column>

    <column name="exempted_ext_ips">
      It represents Address Set of external ips that NAT rule is NOT
      applicable to.
      For SNAT type NAT rules, this refers to destination addresses.
      For DNAT type NAT rules, this refers to source addresses.

      <p>
        This configuration overrides the default NAT behavior of applying a
        rule solely based on internal IP. Without this configuration, NAT
        happens without considering the external IP (i.e dest/source for
        snat/dnat type rule). With this configuration NAT rule is NOT applied
        if external ip is in the input Address Set.
      </p>

      <p>
        If there are NAT rules in a logical router with overlapping IP prefixes
        (including /32), then usage of <var>exempted_ext_ips</var> should be
        avoided in following scenario.
        a. SNAT rule (let us say RULE1) with logical_ip PREFIX/MASK
           (let us say 50.0.0.0/24).
        b. SNAT rule (let us say RULE2) with logical_ip PREFIX/MASK+1
           (let us say 50.0.0.0/25).
        c. Now, if exempted_ext_ips is associated with RULE2, then a logical
           ip which matches both 50.0.0.0/24 and 50.0.0.0/25 may get the RULE2
           applied to it instead of RULE1.
      </p>

      <p>
        <var>allowed_ext_ips</var> and <var>exempted_ext_ips</var> are mutually
        exclusive to each other. If both Address Sets are set for a rule,
        then the NAT rule is not considered.
      </p>
    </column>

    <column name="gateway_port">
      <p>
        A distributed gateway port in the <ref table="Logical_Router_Port"/>
        table where the NAT rule needs to be applied.
      </p>

      <p>
        When multiple distributed gateway ports are configured on a
        <ref table="Logical_Router"/>, applying a NAT rule at each of the
        distributed gateway ports might not be desired. Consider the case
        where a logical router has 2 distributed gateway port, one with
        <ref column="networks" table="Logical_Router_Port"/>
        <code>50.0.0.10/24</code> and the other with
        <ref column="networks" table="Logical_Router_Port"/>
        <code>60.0.0.10/24</code>. If the logical router has a
        NAT rule of <ref column="type"/> <code>snat</code>,
        <ref column="logical_ip"/> <code>10.1.1.0/24</code> and
        <ref column="external_ip"/> <code>50.1.1.20/24</code>, the rule needs
        to be selectively applied on matching packets entering/leaving
        through the distributed gateway port with
        <ref column="networks" table="Logical_Router_Port"/>
        <code>50.0.0.10/24</code>.
      </p>

      <p>
        When a logical router has multiple distributed gateway ports and this
        column is not set for a NAT rule, then the rule will be applied at the
        distributed gateway port which is in the same network as the
        <ref column="external_ip"/> of the NAT rule, if such a router port
        exists. If logical router has a single distributed gateway port and
        this column is not set for a NAT rule, the rule will be applied at the
        distributed gateway port even if the router port is not in the same
        network as the <ref column="external_ip"/> of the NAT rule.
      </p>
    </column>

    <column name="options" key="stateless">
      Indicates if a dnat_and_snat rule should lead to connection
      tracking state or not.
    </column>

    <column name="options" key="add_route">
      If set to <code>true</code>, then neighbor routers will have logical
      flows added that will allow for routing to the NAT address. It also will
      have ARP resolution logical flows added. By setting this option, it means
      there is no reason to create a <ref table="Logical_Router_Static_Route"/>
      from neighbor routers to this NAT address. It also means that no ARP
      request is required for neighbor routers to learn the IP-MAC mapping for
      this NAT address. This option only applies to NATs of type
      <code>dnat</code> and <code>dnat_and_snat</code>. For more information
      about what flows are added for IP routes, please see the
      <code>ovn-northd</code> manpage section on IP Routing.
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>

  </table>

  <table name="DHCP_Options" title="DHCP options">
    <p>
      OVN implements native DHCPv4 support which caters to the common
      use case of providing an IPv4 address to a booting instance by
      providing stateless replies to DHCPv4 requests based on statically
      configured address mappings. To do this it allows a short list of
      DHCPv4 options to be configured and applied at each compute host
      running <code>ovn-controller</code>.
    </p>

    <p>
      OVN also implements native DHCPv6 support which provides stateless
      replies to DHCPv6 requests.
    </p>

    <column name="cidr">
      <p>
        The DHCPv4/DHCPv6 options will be included if the logical port has its
        IP address in this <ref column="cidr"/>.
      </p>
    </column>

    <group title="DHCPv4 options">
      <p>
        The CMS should define the set of DHCPv4 options as key/value pairs
        in the <ref column="options"/> column of this table. For
        <code>ovn-controller</code> to include these DHCPv4 options, the
        <ref column="dhcpv4_options"/> of <ref table="Logical_Switch_Port"/>
        should refer to an entry in this table.
      </p>

      <group title="Mandatory DHCPv4 options">
        <p>
          The following options must be defined.
        </p>

        <column name="options" key="server_id">
          The IP address for the DHCP server to use.  This should be in the
          subnet of the offered IP.  This is also included in the DHCP offer as
          option 54, ``server identifier.''
        </column>

        <column name="options" key="server_mac">
          The Ethernet address for the DHCP server to use.
        </column>

        <column name="options" key="lease_time"
                type='{"type": "integer", "minInteger": 0, "maxInteger": 4294967295}'>
          <p>
            The offered lease time in seconds,
          </p>

          <p>
            The DHCPv4 option code for this option is 51.
          </p>
        </column>
      </group>

      <group title="IPv4 DHCP Options">
        <p>
          Below are the supported DHCPv4 options whose values are an IPv4
          address, e.g. <code>192.168.1.1</code>.  Some options accept multiple
          IPv4 addresses enclosed within curly braces, e.g. <code>{192.168.1.2,
          192.168.1.3}</code>. Please refer to RFC 2132 for more details on
          DHCPv4 options and their codes.
        </p>

        <column name="options" key="router">
          <p>
            The IP address of a gateway for the client to use.  This should be
            in the subnet of the offered IP.  The DHCPv4 option code for this
            option is 3.
          </p>
        </column>

        <column name="options" key="netmask">
          <p>
            The DHCPv4 option code for this option is 1.
          </p>
        </column>

        <column name="options" key="dns_server">
          <p>
            The DHCPv4 option code for this option is 6.
          </p>
        </column>

        <column name="options" key="log_server">
          <p>
            The DHCPv4 option code for this option is 7.
          </p>
        </column>

        <column name="options" key="lpr_server">
          <p>
            The DHCPv4 option code for this option is 9.
          </p>
        </column>

        <column name="options" key="swap_server">
          <p>
            The DHCPv4 option code for this option is 16.
          </p>
        </column>

        <column name="options" key="policy_filter">
          <p>
            The DHCPv4 option code for this option is 21.
          </p>
        </column>

        <column name="options" key="router_solicitation">
          <p>
            The DHCPv4 option code for this option is 32.
          </p>
        </column>

        <column name="options" key="nis_server">
          <p>
            The DHCPv4 option code for this option is 41.
          </p>
        </column>

        <column name="options" key="ntp_server">
          <p>
            The DHCPv4 option code for this option is 42.
          </p>
        </column>

        <column name="options" key="netbios_name_server">
          <p>
            The DHCPv4 option code for this option is 44.
          </p>
        </column>

        <column name="options" key="classless_static_route">
          <p>
            The DHCPv4 option code for this option is 121.
          </p>

          <p>
             This option can contain one or more static routes, each of which
             consists of a destination descriptor and the IP address of the
             router that should be used to reach that destination. Please see
             RFC 3442 for more details.
          </p>

          <p>
            Example: <code>{30.0.0.0/24,10.0.0.10, 0.0.0.0/0,10.0.0.1}</code>
          </p>
        </column>

        <column name="options" key="ms_classless_static_route">
          <p>
            The DHCPv4 option code for this option is 249. This option is
            similar to <code>classless_static_route</code> supported by
            Microsoft Windows DHCPv4 clients.
          </p>
        </column>

        <column name="options" key="next_server">
          <p>
            The DHCPv4 option code for setting the "Next server IP
            address" field in the DHCP header.
          </p>
        </column>

      </group>

      <group title="Boolean DHCP Options">
        <p>
          These options accept a Boolean value, expressed as <code>0</code> for
          false or <code>1</code> for true.
        </p>

        <column name="options" key="ip_forward_enable"
                type='{"type": "string", "enum": ["set", ["0", "1"]]}'>
          <p>
            The DHCPv4 option code for this option is 19.
          </p>
        </column>

        <column name="options" key="router_discovery"
                type='{"type": "string", "enum": ["set", ["0", "1"]]}'>
          <p>
            The DHCPv4 option code for this option is 31.
          </p>
        </column>

        <column name="options" key="ethernet_encap"
                type='{"type": "string", "enum": ["set", ["0", "1"]]}'>
          <p>
            The DHCPv4 option code for this option is 36.
          </p>
        </column>
      </group>

      <group title="Integer DHCP Options">
        <p>
          These options accept a nonnegative integer value.
        </p>

        <column name="options" key="default_ttl"
                type='{"type": "integer", "minInteger": 0, "maxInteger": 255}'>
          The DHCPv4 option code for this option is 23.
        </column>

        <column name="options" key="tcp_ttl"
                type='{"type": "integer", "minInteger": 0, "maxInteger": 255}'>
          The DHCPv4 option code for this option is 37.
        </column>

        <column name="options" key="mtu"
                type='{"type": "integer", "minInteger": 68, "maxInteger": 65535}'>
          The DHCPv4 option code for this option is 26.
        </column>

        <column name="options" key="T1"
                type='{"type": "integer", "minInteger": 68, "maxInteger": 4294967295}'>
          This specifies the time interval from address assignment until the
          client begins trying to renew its address.  The DHCPv4 option code
          for this option is 58.
        </column>

        <column name="options" key="T2"
                type='{"type": "integer", "minInteger": 68, "maxInteger": 4294967295}'>
          This specifies the time interval from address assignment until the
          client begins trying to rebind its address.  The DHCPv4 option code
          for this option is 59.
        </column>

        <column name="options" key="arp_cache_timeout"
                type='{"type": "integer", "minInteger": 0, "maxInteger": 255}'>
          The DHCPv4 option code for this option is 35. This option
          specifies the timeout in seconds for ARP cache entries.
        </column>

        <column name="options" key="tcp_keepalive_interval"
                type='{"type": "integer", "minInteger": 0, "maxInteger": 255}'>
          The DHCPv4 option code for this option is 38. This option
          specifies the interval that the client TCP should wait before
          sending a keepalive message on a TCP connection.
        </column>

        <column name="options" key="netbios_node_type"
                type='{"type": "integer", "minInteger": 0, "maxInteger": 255}'>
          <p>
            The DHCPv4 option code for this option is 46.
          </p>
        </column>
      </group>

      <group title="String DHCP Options">
        <p>
          These options accept a string value.
        </p>

        <column name="options" key="wpad">
          <p>
            The DHCPv4 option code for this option is 252. This option is used
            as part of web proxy auto discovery to provide a URL for a web
            proxy.
          </p>
        </column>

        <column name="options" key="bootfile_name">
          <p>
            The DHCPv4 option code for this option is 67. This option is used
            to identify a bootfile.
          </p>
        </column>

        <column name="options" key="path_prefix">
          <p>
            The DHCPv4 option code for this option is 210. In PXELINUX'
            case this option is used to set a common path prefix,
            instead of deriving it from the bootfile name.
          </p>
        </column>

        <column name="options" key="tftp_server_address">
          <p>
            The DHCPv4 option code for this option is 150. The option
            contains one or more IPv4 addresses that the client MAY
            use. This option is Cisco proprietary, the IEEE standard
            that matches with this requirement is option 66 (tftp_server).
          </p>
        </column>

        <column name="options" key="hostname">
          <p>
            The DHCPv4 option code for this option is 12.
            If set, indicates the DHCPv4 option "Hostname".
            Alternatively, this option can be configured in
            <ref column="options:hostname" table="Logical_Switch_Port"
            db="OVN_NB"/> column in table <ref table="Logical_Switch_Port"/>.
            If Hostname option value is set in both conflicting
            <ref table="Logical_Switch_Port"/> and
            <ref table="DHCP_Options"/> tables,
            <ref table="Logical_Switch_Port"/> takes precedence.
          </p>
        </column>

        <column name="options" key="domain_name">
          <p>
            The DHCPv4 option code for this option is 15. This option
            specifies the domain name that client should use when
            resolving hostnames via the Domain Name System.
          </p>
        </column>

        <column name="options" key="bootfile_name_alt">
          <p>
          </p>
            "bootfile_name_alt" option is used to support iPXE.
            When both "bootfile_name" and "bootfile_name_alt" are provided
            by the CMS, "bootfile_name" will be used for option 67 if the
            dhcp request contains etherboot option (175), otherwise
            "bootfile_name_alt" will be used.
        </column>

        <column name="options" key="broadcast_address">
          <p>
            The DHCPv4 option code for this option is 28. This option
            specifies the IP address used as a broadcast address.
          </p>
        </column>
      </group>

      <group title="DHCP Options of type host_id">
        <p>
          These options accept either an IPv4 address or a string value.
        </p>

        <column name="options" key="tftp_server">
          <p>
            The DHCPv4 option code for this option is 66.
          </p>
        </column>
      </group>

      <group title=" DHCP Options of type domains">
        <p>
          These options accept string value which is a comma separated
          list of domain names. The domain names are encoded based on RFC 1035.
        </p>

        <column name="options" key="domain_search_list">
          <p>
            The DHCPv4 option code for this option is 119.
          </p>
        </column>
      </group>
    </group>

    <group title="DHCPv6 options">
      <p>
        OVN also implements native DHCPv6 support. The CMS should define
        the set of DHCPv6 options as key/value pairs. The define DHCPv6
        options will be included in the DHCPv6 response to the DHCPv6
        Solicit/Request/Confirm packet from the logical ports having the
        IPv6 addresses in the <ref column="cidr"/>.
      </p>

      <group title="Mandatory DHCPv6 options">
        <p>
          The following options must be defined.
        </p>

        <column name="options" key="server_id">
          <p>
            The Ethernet address for the DHCP server to use. This is also
            included in the DHCPv6 reply as option 2, ``Server Identifier''
            to carry a DUID identifying a server between a client and a server.
            <code>ovn-controller</code> defines DUID based on
            Link-layer Address [DUID-LL].
          </p>
        </column>
      </group>

      <group title="IPv6 DHCPv6 options">
        <p>
          Below are the supported DHCPv6 options whose values are an IPv6
          address, e.g. <code>aef0::4</code>.  Some options accept multiple
          IPv6 addresses enclosed within curly braces, e.g. <code>{aef0::4,
          aef0::5}</code>. Please refer to RFC 3315 for more details on
          DHCPv6 options and their codes.
        </p>

        <column name="options" key="dns_server">
          <p>
            The DHCPv6 option code for this option is 23. This option specifies
            the DNS servers that the VM should use.
          </p>
        </column>
      </group>

      <group title="String DHCPv6 options">
        <p>
          These options accept string values.
        </p>

        <column name="options" key="domain_search">
          <p>
            The DHCPv6 option code for this option is 24. This option specifies
            the domain search list the client should use to resolve hostnames
            with DNS.
          </p>

          <p>
            Example: <code>"ovn.org"</code>.
          </p>
        </column>

        <column name="options" key="dhcpv6_stateless">
          <p>
            This option specifies the OVN native DHCPv6 will work in stateless
            mode, which means OVN native DHCPv6 will not offer IPv6 addresses
            for VM/VIF ports, but only reply other configurations, such as
            DNS and domain search list. When setting this option with string
            value "true", VM/VIF will configure IPv6 addresses by stateless
            way. Default value for this option is false.
          </p>
        </column>

        <column name="options" key="fqdn">
          <p>
            The DHCPv6 option code for this option is 39.
            If set, indicates the DHCPv6 option "FQDN".
          </p>
        </column>
      </group>
    </group>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="Connection" title="OVSDB client connections.">
    <p>
      Configuration for a database connection to an Open vSwitch database
      (OVSDB) client.
    </p>

    <p>
      This table primarily configures the Open vSwitch database server
      (<code>ovsdb-server</code>).
    </p>

    <p>
      The Open vSwitch database server can initiate and maintain active
      connections to remote clients.  It can also listen for database
      connections.
    </p>

    <group title="Core Features">
      <column name="target">
        <p>Connection methods for clients.</p>
        <p>
          The following connection methods are currently supported:
        </p>
        <dl>
          <dt><code>ssl:<var>host</var></code>[<code>:<var>port</var></code>]</dt>
          <dd>
            <p>
              The specified SSL <var>port</var> on the host at the given
              <var>host</var>, which can either be a DNS name (if built with
              unbound library) or an IP address. A valid SSL configuration must
              be provided when this form is used, this configuration can be
              specified via command-line options or the <ref table="SSL"/> table.
            </p>
            <p>
              If <var>port</var> is not specified, it defaults to 6640.
            </p>
            <p>
              SSL support is an optional feature that is not always
              built as part of Open vSwitch.
            </p>
          </dd>

          <dt><code>tcp:<var>host</var></code>[<code>:<var>port</var></code>]</dt>
          <dd>
            <p>
              The specified TCP <var>port</var> on the host at the given
              <var>host</var>, which can either be a DNS name (if built with
              unbound library) or an IP address.  If <var>host</var> is an IPv6
              address, wrap it in square brackets, e.g. <code>tcp:[::1]:6640</code>.
            </p>
            <p>
              If <var>port</var> is not specified, it defaults to 6640.
            </p>
          </dd>
          <dt><code>pssl:</code>[<var>port</var>][<code>:<var>host</var></code>]</dt>
          <dd>
            <p>
              Listens for SSL connections on the specified TCP <var>port</var>.
              Specify 0 for <var>port</var> to have the kernel automatically
              choose an available port.  If <var>host</var>, which can either
              be a DNS name (if built with unbound library) or an IP address,
              is specified, then connections are restricted to the resolved or
              specified local IPaddress (either IPv4 or IPv6 address).  If
              <var>host</var> is an IPv6 address, wrap in square brackets,
              e.g. <code>pssl:6640:[::1]</code>.  If <var>host</var> is not
              specified then it listens only on IPv4 (but not IPv6) addresses.
              A valid SSL configuration must be provided when this form is used,
             this can be specified either via command-line options or the
             <ref table="SSL"/> table.
            </p>
            <p>
              If <var>port</var> is not specified, it defaults to 6640.
            </p>
            <p>
              SSL support is an optional feature that is not always built as
              part of Open vSwitch.
            </p>
          </dd>
          <dt><code>ptcp:</code>[<var>port</var>][<code>:<var>host</var></code>]</dt>
          <dd>
            <p>
              Listens for connections on the specified TCP <var>port</var>.
              Specify 0 for <var>port</var> to have the kernel automatically
              choose an available port.  If <var>host</var>, which can either
              be a DNS name (if built with unbound library) or an IP address,
              is specified, then connections are restricted to the resolved or
              specified local IP address (either IPv4 or IPv6 address).  If
              <var>host</var> is an IPv6 address, wrap it in square brackets,
              e.g. <code>ptcp:6640:[::1]</code>.  If <var>host</var> is not
              specified then it listens only on IPv4 addresses.
            </p>
            <p>
              If <var>port</var> is not specified, it defaults to 6640.
            </p>
          </dd>
        </dl>
        <p>When multiple clients are configured, the <ref column="target"/>
        values must be unique.  Duplicate <ref column="target"/> values yield
        unspecified results.</p>
      </column>
    </group>

    <group title="Client Failure Detection and Handling">
      <column name="max_backoff">
        Maximum number of milliseconds to wait between connection attempts.
        Default is implementation-specific.
      </column>

      <column name="inactivity_probe">
        Maximum number of milliseconds of idle time on connection to the client
        before sending an inactivity probe message.  If Open vSwitch does not
        communicate with the client for the specified number of seconds, it
        will send a probe.  If a response is not received for the same
        additional amount of time, Open vSwitch assumes the connection has been
        broken and attempts to reconnect.  Default is implementation-specific.
        A value of 0 disables inactivity probes.
      </column>
    </group>

    <group title="Status">
      <p>
        Key-value pair of <ref column="is_connected"/> is always updated.
        Other key-value pairs in the status columns may be updated depends
        on the <ref column="target"/> type.
      </p>

      <p>
        When <ref column="target"/> specifies a connection method that
        listens for inbound connections (e.g. <code>ptcp:</code> or
        <code>punix:</code>), both <ref column="n_connections"/> and
        <ref column="is_connected"/> may also be updated while the
        remaining key-value pairs are omitted.
      </p>

      <p>
        On the other hand, when <ref column="target"/> specifies an
        outbound connection, all key-value pairs may be updated, except
        the above-mentioned two key-value pairs associated with inbound
        connection targets. They are omitted.
      </p>

    <column name="is_connected">
        <code>true</code> if currently connected to this client,
        <code>false</code> otherwise.
      </column>

      <column name="status" key="last_error">
        A human-readable description of the last error on the connection
        to the manager; i.e. <code>strerror(errno)</code>.  This key
        will exist only if an error has occurred.
      </column>

      <column name="status" key="state"
              type='{"type": "string", "enum": ["set", ["VOID", "BACKOFF", "CONNECTING", "ACTIVE", "IDLE"]]}'>
        <p>
          The state of the connection to the manager:
        </p>
        <dl>
          <dt><code>VOID</code></dt>
          <dd>Connection is disabled.</dd>

          <dt><code>BACKOFF</code></dt>
          <dd>Attempting to reconnect at an increasing period.</dd>

          <dt><code>CONNECTING</code></dt>
          <dd>Attempting to connect.</dd>

          <dt><code>ACTIVE</code></dt>
          <dd>Connected, remote host responsive.</dd>

          <dt><code>IDLE</code></dt>
          <dd>Connection is idle.  Waiting for response to keep-alive.</dd>
        </dl>
        <p>
          These values may change in the future.  They are provided only for
          human consumption.
        </p>
      </column>

      <column name="status" key="sec_since_connect"
              type='{"type": "integer", "minInteger": 0}'>
        The amount of time since this client last successfully connected
        to the database (in seconds). Value is empty if client has never
        successfully been connected.
      </column>

      <column name="status" key="sec_since_disconnect"
              type='{"type": "integer", "minInteger": 0}'>
        The amount of time since this client last disconnected from the
        database (in seconds). Value is empty if client has never
        disconnected.
      </column>

      <column name="status" key="locks_held">
        Space-separated list of the names of OVSDB locks that the connection
        holds.  Omitted if the connection does not hold any locks.
      </column>

      <column name="status" key="locks_waiting">
        Space-separated list of the names of OVSDB locks that the connection is
        currently waiting to acquire.  Omitted if the connection is not waiting
        for any locks.
      </column>

      <column name="status" key="locks_lost">
        Space-separated list of the names of OVSDB locks that the connection
        has had stolen by another OVSDB client.  Omitted if no locks have been
        stolen from this connection.
      </column>

      <column name="status" key="n_connections"
              type='{"type": "integer", "minInteger": 2}'>
        When <ref column="target"/> specifies a connection method that
        listens for inbound connections (e.g. <code>ptcp:</code> or
        <code>pssl:</code>) and more than one connection is actually active,
        the value is the number of active connections.  Otherwise, this
        key-value pair is omitted.
      </column>

      <column name="status" key="bound_port" type='{"type": "integer"}'>
        When <ref column="target"/> is <code>ptcp:</code> or
        <code>pssl:</code>, this is the TCP port on which the OVSDB server is
        listening.  (This is particularly useful when <ref
        column="target"/> specifies a port of 0, allowing the kernel to
        choose any available port.)
      </column>
    </group>

    <group title="Common Columns">
      The overall purpose of these columns is described under <code>Common
      Columns</code> at the beginning of this document.

      <column name="external_ids"/>
      <column name="other_config"/>
    </group>
  </table>
  <table name="DNS" title="Native DNS resolution">
    <p>
      Each row in this table stores the DNS records. The
      <ref table="Logical_Switch"/> table's <ref table="Logical_Switch"
      column="dns_records"/> references these records.
    </p>

    <column name="records">
      Key-value pair of DNS records with <code>DNS query name</code> as the key
      and value as a string of IP address(es) separated by comma or space.

      For PTR requests, the key-value pair can be
      <code>Reverse IPv4 address.in-addr.arpa</code> and the value
      <code>DNS domain name</code>.  For IPv6 addresses, the key
      has to be <code>Reverse IPv6 address.ip6.arpa</code>.

      <p><b>Example: </b> "vm1.ovn.org" = "10.0.0.4 aef0::4"</p>
      <p><b>Example: </b> "4.0.0.10.in-addr.arpa" = "vm1.ovn.org"</p>
    </column>

    <column name="options" key="ovn-owned">
      If set to true, then the OVN will be the main responsible for
      <code>DNS Records</code> within this row.

      <p>
        A <code>DNS</code> row with this option set to <code>true</code>
        can be created for domains that the user needs to configure
        locally and don't care about IPv6 only interested in IPv4 or
        vice versa.

        This will let ovn send IPv4 DNS reply and reject/ignore IPv6
        queries to save the waiting for a timeout on those uninteresting
        queries.
      </p>
    </column>

    <column name="external_ids">
      See <em>External IDs</em> at the beginning of this document.
    </column>
  </table>
  <table name="SSL">
    SSL configuration for ovn-nb database access.

    <column name="private_key">
      Name of a PEM file containing the private key used as the switch's
      identity for SSL connections to the controller.
    </column>

    <column name="certificate">
      Name of a PEM file containing a certificate, signed by the
      certificate authority (CA) used by the controller and manager,
      that certifies the switch's private key, identifying a trustworthy
      switch.
    </column>

    <column name="ca_cert">
      Name of a PEM file containing the CA certificate used to verify
      that the switch is connected to a trustworthy controller.
    </column>

    <column name="bootstrap_ca_cert">
      If set to <code>true</code>, then Open vSwitch will attempt to
      obtain the CA certificate from the controller on its first SSL
      connection and save it to the named PEM file. If it is successful,
      it will immediately drop the connection and reconnect, and from then
      on all SSL connections must be authenticated by a certificate signed
      by the CA certificate thus obtained.  <em>This option exposes the
      SSL connection to a man-in-the-middle attack obtaining the initial
      CA certificate.</em>  It may still be useful for bootstrapping.
    </column>

    <column name="ssl_protocols">
      List of SSL protocols to be enabled for SSL connections. The default
      when this option is omitted is <code>TLSv1,TLSv1.1,TLSv1.2</code>.
    </column>

    <column name="ssl_ciphers">
      List of ciphers (in OpenSSL cipher string format) to be supported
      for SSL connections. The default when this option is omitted is
      <code>HIGH:!aNULL:!MD5</code>.
    </column>

    <group title="Common Columns">
      The overall purpose of these columns is described under <code>Common
      Columns</code> at the beginning of this document.

      <column name="external_ids"/>
    </group>
  </table>
  <table name="Gateway_Chassis">
    <p>
      Association of a chassis to a logical router port. The traffic
      going out through an specific router port will be redirected to a
      chassis, or a set of them in high availability configurations.
    </p>

    <column name="name">
      <p>
        Name of the <ref table="Gateway_Chassis"/>.
      </p>
      <p>
        A suggested, but not required naming convention is
        <code>${port_name}_${chassis_name}</code>.
      </p>
    </column>

    <column name="chassis_name">
      <p>
        Name of the chassis that we want to redirect traffic through for the
        associated logical router port.  The value must match the
        <ref db="OVN_Southbound" table="Chassis" column="name"/> column
        of the <ref db="OVN_Southbound" table="Chassis"/> table in the
        <ref db="OVN_Southbound"/> database.
      </p>
    </column>

    <column name="priority">
      <p>
        This is the priority of a chassis among all
        <ref table="Gateway_Chassis"/> belonging to the same logical router
        port.
      </p>
    </column>

    <column name="options">
      Reserved for future use.
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="HA_Chassis_Group">
    <p>
      Table representing a group of chassis which can provide high availability
      services. Each chassis in the group is represented by the table
      <ref table="HA_Chassis"/>. The HA chassis with highest priority will
      be the master of this group. If the master chassis failover is detected,
      the HA chassis with the next higher priority takes over the
      responsibility of providing the HA. If a distributed gateway router port
      references a row in this table, then the master HA chassis in this group
      provides the gateway functionality.
    </p>

    <column name="name">
      Name of the <ref table="HA_Chassis_Group"/>. Name should be unique.
    </column>

    <column name="ha_chassis">
      A list of HA chassis which belongs to this group.
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="HA_Chassis">
    <column name="chassis_name">
      <p>
        Name of the chassis which is part of the HA chassis group.
        The value must match the
        <ref db="OVN_Southbound" table="Chassis" column="name"/> column
        of the <ref db="OVN_Southbound" table="Chassis"/> table in the
        <ref db="OVN_Southbound"/> database.
      </p>
    </column>

    <column name="priority">
      <p>
        Priority of the chassis. Chassis with highest priority will be
        the master.
      </p>
    </column>

    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>

  <table name="BFD">
    <p>
      Contains BFD parameter for ovn-controller BFD configuration.
      OVN BFD implementation is used to provide detection of failures in the
      path between adjacent forwarding engines, including the OVN interfaces.
      OVN BFD provides link status info to OVN northd in order to update
      logical flows according to the status of BFD endpoints. In the current
      implementation OVN BFD is used to check next-hop status for ECMP routes.
      Please note BFD table refers to OVN BFD implementation and not to OVS
      legacy one.
    </p>

    <group title="Configuration">
      <p>
        <code>ovn-northd</code> reads configuration from these columns.
      </p>

      <column name="logical_port">
        OVN logical port when BFD engine is running.
      </column>

      <column name="dst_ip">
        BFD peer IP address.
      </column>

      <column name="min_tx">
        This is the minimum interval, in milliseconds, that the local
        system would like to use when transmitting BFD Control packets,
        less any jitter applied. The value zero is reserved. Default
        value is 1000 ms.
      </column>

      <column name="min_rx">
        This is the minimum interval, in milliseconds, between received
        BFD Control packets that this system is capable of supporting,
        less any jitter applied by the sender. If this value is zero,
        the transmitting system does not want the remote system to send
        any periodic BFD Control packets.
      </column>

      <column name="detect_mult">
        Detection time multiplier.  The negotiated transmit interval,
        multiplied by this value, provides the Detection Time for the
        receiving system in Asynchronous mode. Default value is 5.
      </column>

      <column name="options">
        Reserved for future use.
      </column>

      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>

    <group title="Status Reporting">
      <p>
        <code>ovn-northd</code> writes BFD status into these columns.
      </p>

      <column name="status">
        <p>
          BFD port logical states. Possible values are:
          <ul>
            <li>
              <code>admin_down</code>
            </li>
            <li>
              <code>down</code>
            </li>
            <li>
              <code>init</code>
            </li>
            <li>
              <code>up</code>
            </li>
          </ul>
        </p>
      </column>
    </group>
  </table>

  <table name="Static_MAC_Binding">
    <p>
      Each record represents a Static_MAC_Binding entry for a logical router.
    </p>

    <group title="Configuration">
      <p>
        <code>ovn-northd</code> reads configuration from these columns
        and propagates the value to SBDB.
      </p>

      <column name="logical_port">
        The logical router port for the binding.
      </column>

      <column name="ip">
        The bound IP address.
      </column>

      <column name="mac">
        The Ethernet address to which the IP is bound.
      </column>

      <column name="override_dynamic_mac">
        Override dynamically learnt MACs.
      </column>
    </group>
  </table>

  <table name="Chassis_Template_Var">
    <p>
      One record per chassis, each containing a map, <code>variables</code>,
      between template variable names and their value for that specific
      chassis.  A template variable has a name and potentially different
      values on different hypervisors in the OVN cluster.  For example,
      two rows, <code>R1 = (.chassis=C1, variables={(N: V1)}</code> and
      <code>R2 = (.chassis=C2, variables={(N: V2)}</code> will make
      <code>ovn-controller</code> running on chassis <code>C1</code> and
      <code>C2</code> interpret the token <code>N</code> either as
      <code>V1</code> (on <code>C1</code>) or as <code>V2</code> (on
      <code>C2</code>).  Users can refer to template variables from
      within other logical components, e.g., within ACL, QoS or
      Logical_Router_Policy matches or from Load_Balancer VIP and
      backend definitions.
    </p>
    <p>
      If a template variable is referenced on a chassis for which that
      variable is not defined then <code>ovn-controller</code> running
      on that chassis will just interpret it as a raw string literal.
    </p>
    <column name="chassis">
      The chassis this set of variable values applies to.
    </column>
    <column name="variables">
      The set of variable values for a given chassis.
    </column>
    <group title="Common Columns">
      <column name="external_ids">
        See <em>External IDs</em> at the beginning of this document.
      </column>
    </group>
  </table>
</database>
