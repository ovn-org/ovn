AT_BANNER([ovn_controller_vtep])

# OVN_CONTROLLER_VTEP_START(SIM_NAME)
#
# $1 - optional simulator name. If none is given, runs ovn-controller-vtep, and
#      vtep emulator in $ovs_dir.
# Starts the test with a setup with vtep device.  Each test case must first
# call this macro and ovn_start.
#
# Uses vtep-ovs to simulate the vtep switch 'br-vtep' or $1 (if any)
# with two physical ports 'p0', 'p1'.
#
m4_define([OVN_CONTROLLER_VTEP_START], [
   AT_KEYWORDS([ovn])
   # this will cause skip when 'make check' using Windows setup.
   sim="$1"
   vtep_chassis=${sim:-br-vtep}

   test -n "$sim" && as "$sim"
   mkdir -p "$ovs_dir" || return 1

   dnl Create databases (vswitch, vtep).
   check ovsdb-tool create "$ovs_dir"/vswitchd.db $ovs_srcdir/vswitchd/vswitch.ovsschema
   check ovsdb-tool create "$ovs_dir"/vtep.db $ovs_srcdir/vtep/vtep.ovsschema

   dnl Start ovsdb-server.
   start_daemon ovsdb-server --remote=punix:"$ovs_dir"/db.sock \
                             "$ovs_dir"/vswitchd.db "$ovs_dir"/vtep.db

   dnl Start ovs-vswitchd.
   start_daemon ovs-vswitchd --enable-dummy=system -vvconn -vofproto_dpif

   check ovs-vsctl \
              -- add-br $vtep_chassis \
              -- set bridge $vtep_chassis datapath-type=dummy \
                                    other-config:datapath-id=fedcba9876543210 \
                                    other-config:hwaddr=aa:55:aa:55:00:00 \
                                    protocols=[[OpenFlow10,OpenFlow11,OpenFlow12,OpenFlow13,OpenFlow14,OpenFlow15]] \
                                    fail-mode=secure \
              -- add-port $vtep_chassis p0 -- set Interface p0 type=dummy ofport_request=1 \
              -- add-port $vtep_chassis p1 -- set Interface p1 type=dummy ofport_request=2

   dnl Start ovs-vtep.
   check vtep-ctl add-ps $vtep_chassis -- set Physical_Switch $vtep_chassis tunnel_ips=1.2.3.4
   AT_CHECK([ovs-vtep --log-file="$ovs_dir"/ovs-vtep.log \
                      --pidfile="$ovs_dir"/ovs-vtep.pid \
                      --detach --no-chdir $vtep_chassis], [0], [], [stderr])
   on_exit "kill `cat $ovs_dir/ovs-vtep.pid`"
   check sed < stderr '
/vlog|INFO|opened log file/d'

   dnl Wait until ovs-vtep starts up.
   OVS_WAIT_UNTIL([test -n "`vtep-ctl show | grep Physical_Port`"])

   dnl Start ovn-controller-vtep.
   start_daemon ovn-controller-vtep --vtep-db=unix:"$ovs_dir"/db.sock \
                                    --ovnsb-db=unix:$ovs_base/ovn-sb/ovn-sb.sock
])

# OVN_CONTROLLER_VTEP_STOP(WHITELIST, SIM_NAME)
#
# $1 - (optional) passed to check_logs()
# $2 - (optional) simulator name
#
# So many exits... Yeah, we started a lot daemons~
#
m4_define([OVN_CONTROLLER_VTEP_STOP],[
   echo
   echo "Clean up controller-vtep-related processes in $2"
   test -n "$2" && as "$2"
   #AT_CHECK([check_logs "$1"])
   OVS_APP_EXIT_AND_WAIT([ovs-vtep])
   OVS_APP_EXIT_AND_WAIT([ovn-controller-vtep])
   OVS_APP_EXIT_AND_WAIT([ovsdb-server])
   OVS_APP_EXIT_AND_WAIT([ovs-vswitchd])])

# Adds logical port for a vtep gateway chassis in ovn-nb database.
#
# $1: logical switch name in ovn-nb database
# $2: logical port name
# $3: physical vtep gateway name
# $4: logical switch name on vtep gateway chassis
m4_define([OVN_NB_ADD_VTEP_PORT], [
AT_CHECK([ovn-nbctl lsp-add $1 $2])
AT_CHECK([ovn-nbctl lsp-set-type $2 vtep])
AT_CHECK([ovn-nbctl lsp-set-options $2 vtep-physical-switch=$3 vtep-logical-switch=$4])
])

##############################################

# tests chassis related updates.
AT_SETUP([ovn-controller-vtep - chassis])
ovn_start
OVN_CONTROLLER_VTEP_START

# verifies the initial ovn-sb db configuration.
OVS_WAIT_UNTIL([test -n "`ovn-sbctl show | grep Chassis`"])
AT_CHECK([ovn-sbctl show], [0], [dnl
Chassis br-vtep
    Encap vxlan
        ip: "1.2.3.4"
        options: {csum="false"}
])

# checks is-vtep option is in place, remove, check again
AT_CHECK([ovn-sbctl get chassis br-vtep other_config:is-vtep], [0], [dnl
"true"
])

check ovn-sbctl remove chassis br-vtep other_config is-vtep
OVS_WAIT_UNTIL([ovn-sbctl get chassis br-vtep other_config:is-vtep])

# deletes the chassis via ovn-sbctl and check that it is readded back
# with the log.
AT_CHECK([ovn-sbctl chassis-del br-vtep])
OVS_WAIT_UNTIL([test -n "`grep WARN ovn-controller-vtep.log`"])
AT_CHECK([sed -n 's/^.*\(|WARN|.*\)$/\1/p' ovn-controller-vtep.log], [0], [dnl
|WARN|Chassis for VTEP physical switch (br-vtep) disappears, maybe deleted by ovn-sbctl, adding it back
])

# changes the tunnel_ip on physical switch, watches the update of chassis's
# encap.
AT_CHECK([vtep-ctl set Physical_Switch br-vtep tunnel_ips=1.2.3.5])
OVS_WAIT_UNTIL([test -n "`ovn-sbctl show | grep 1\.2\.3\.5`"])
AT_CHECK([ovn-sbctl --columns=ip list Encap | cut -d ':' -f2 | tr -d ' '], [0], [dnl
"1.2.3.5"
])

# adds vlan_bindings to physical ports.
AT_CHECK([vtep-ctl add-ls lswitch0 -- bind-ls br-vtep p0 100 lswitch0 -- bind-ls br-vtep p0 200 lswitch0 -- bind-ls br-vtep p1 300 lswitch0])
OVS_WAIT_UNTIL([test -n "`ovn-sbctl list Chassis | grep -- lswitch0`"])
AT_CHECK([ovn-sbctl --columns=vtep_logical_switches list Chassis | cut -d ':' -f2 | tr -d ' ' ], [0], [dnl
[[lswitch0]]
])

# adds another logical switch and new vlan_bindings.
AT_CHECK([vtep-ctl add-ls lswitch1 -- bind-ls br-vtep p0 300 lswitch1])
OVS_WAIT_UNTIL([test -n "`ovn-sbctl list Chassis | grep -- lswitch1`"])
AT_CHECK([ovn-sbctl --columns=vtep_logical_switches list Chassis | cut -d ':' -f2 | tr -d ' '], [0], [dnl
[[lswitch0,lswitch1]]
])

# unbinds one port from lswitch0, nothing should change.
AT_CHECK([vtep-ctl unbind-ls br-vtep p0 200])
OVS_WAIT_UNTIL([test -z "`vtep-ctl --columns=vlan_bindings list physical_port p0 | grep -- '200='`"])
AT_CHECK([ovn-sbctl --columns=vtep_logical_switches list Chassis | cut -d ':' -f2 | tr -d ' ' ], [0], [dnl
[[lswitch0,lswitch1]]
])

# unbinds all ports from lswitch0.
AT_CHECK([vtep-ctl unbind-ls br-vtep p0 100 -- unbind-ls br-vtep p1 300])
OVS_WAIT_UNTIL([test -z "`ovn-sbctl list Chassis | grep -- br-vtep_lswitch0`"])
AT_CHECK([ovn-sbctl --columns=vtep_logical_switches list Chassis | cut -d ':' -f2 | tr -d ' ' ], [0], [dnl
[[lswitch1]]
])

# unbinds all ports from lswitch1.
AT_CHECK([vtep-ctl unbind-ls br-vtep p0 300])
OVS_WAIT_UNTIL([test -z "`ovn-sbctl list Chassis | grep -- br-vtep_lswitch1`"])
AT_CHECK([ovn-sbctl --columns=vtep_logical_switches list Chassis | cut -d ':' -f2 | tr -d ' '], [0], [dnl
[[]]
])

OVN_CONTROLLER_VTEP_STOP([/Chassis for VTEP physical switch (br-vtep) disappears/d])
AT_CLEANUP


# Tests binding updates.
AT_SETUP([ovn-controller-vtep - binding 1])
ovn_start
OVN_CONTROLLER_VTEP_START
ovn-nbctl ls-add br-test

AS_BOX([add logical switch 'lswitch0' and vlan_bindings])
AT_CHECK([vtep-ctl add-ls lswitch0 -- bind-ls br-vtep p0 100 lswitch0 -- bind-ls br-vtep p1 300 lswitch0])
# adds logical switch port in ovn-nb database, and sets the type and options.
OVN_NB_ADD_VTEP_PORT([br-test], [br-vtep_lswitch0], [br-vtep], [lswitch0])
wait_row_count Port_Binding 1 logical_port=br-vtep_lswitch0 chassis!='[[]]'
# should see one binding, associated to chassis of 'br-vtep'.
chassis_uuid=$(ovn-sbctl --columns=_uuid list Chassis br-vtep | cut -d ':' -f2 | tr -d ' ')
AT_CHECK_UNQUOTED([ovn-sbctl --columns=chassis list Port_Binding br-vtep_lswitch0 | cut -d ':' -f2 | tr -d ' '], [0], [dnl
${chassis_uuid}
])

AS_BOX([add another logical switch 'lswitch1' and vlan_bindings])
AT_CHECK([vtep-ctl add-ls lswitch1 -- bind-ls br-vtep p0 200 lswitch1])
# adds logical switch port in ovn-nb database for lswitch1.
OVN_NB_ADD_VTEP_PORT([br-test], [br-vtep_lswitch1], [br-vtep], [lswitch1])
wait_row_count Port_Binding 1 logical_port=br-vtep_lswitch1 chassis!='[[]]'
# This is allowed, but not recommended, to have two vlan_bindings (to different vtep logical switches)
# from one vtep gateway physical port in one ovn-nb logical swithch.
AT_CHECK_UNQUOTED([ovn-sbctl --columns=chassis list Port_Binding | cut -d ':' -f2 | tr -d ' ' | sort], [0], [dnl

${chassis_uuid}
${chassis_uuid}
])

AS_BOX([add another logical switch port in ovn-nb database for lswitch0])
OVN_NB_ADD_VTEP_PORT([br-test], [br-vtep_lswitch0_dup], [br-vtep], [lswitch0])

# confirms the warning log.
OVS_WAIT_UNTIL([
   test -n "$(grep 'has already been associated with logical port' ovn-controller-vtep.log)"
])

OVS_WAIT_UNTIL([
   ls0_ch=$(fetch_column Port_Binding chassis logical_port=br-vtep_lswitch0)
   ls0_dup_ch=$(fetch_column Port_Binding chassis logical_port=br-vtep_lswitch0_dup)
   echo "ls0_ch = $ls0_ch"
   echo "ls0_dup_ch = $ls0_dup_ch"
   test "$ls0_ch" != "$ls0_dup_ch"
])

# it is not allowed to have more than one ovn-nb logical port for the same
# vtep logical switch on a vtep gateway chassis, so should still see only
# two port_binding entries bound.
AT_CHECK_UNQUOTED([ovn-sbctl --columns=chassis list Port_Binding | cut -d ':' -f2 | tr -d ' ' | sort | sort -d], [0], [dnl


[[]]
${chassis_uuid}
${chassis_uuid}
])

AS_BOX([delete physical ports from vtep])
AT_CHECK([ovs-vsctl del-port p0 -- del-port p1])
OVS_WAIT_UNTIL([test -z "`ovn-sbctl list Chassis | grep -- br-vtep_lswitch`"])
OVS_WAIT_UNTIL([test -z "`vtep-ctl list physical_port p0`"])
OVS_WAIT_UNTIL([test -z "`vtep-ctl list physical_port p1`"])
# should see empty chassis column in both binding entries.
AT_CHECK_UNQUOTED([ovn-sbctl --columns=chassis list Port_Binding | cut -d ':' -f2 | tr -d ' ' | sort], [0], [dnl


[[]]
[[]]
[[]]
])

OVN_CONTROLLER_VTEP_STOP([/has already been associated with logical port/d])
AT_CLEANUP


# Tests corner case: Binding the vtep logical switch from two different
# datapath.
AT_SETUP([ovn-controller-vtep - binding 2])
ovn_start
OVN_CONTROLLER_VTEP_START
ovn-nbctl ls-add br-test

# adds logical switch 'lswitch0' and vlan_bindings.
AT_CHECK([vtep-ctl add-ls lswitch0 -- bind-ls br-vtep p0 100 lswitch0])
# adds logical switch port in ovn-nb database, and sets the type and options.
OVN_NB_ADD_VTEP_PORT([br-test], [br-vtep_lswitch0], [br-vtep], [lswitch0])
check ovn-sbctl wait-until Port_Binding br-vtep_lswitch0 chassis!='[[]]'

# adds another lswitch 'br-void' in ovn-nb database.
AT_CHECK([ovn-nbctl ls-add br-void])
# adds another vtep pswitch 'br-vtep-void' in vtep database.
AT_CHECK([vtep-ctl add-ps br-vtep-void -- add-port br-vtep-void p0-void -- bind-ls br-vtep-void p0-void 100 lswitch0])
# adds a conflicting logical port (both br-vtep_lswitch0 and br-vtep-void_lswitch0
# are bound to the same logical switch, but they are on different datapath).
OVN_NB_ADD_VTEP_PORT([br-void], [br-vtep-void_lswitch0], [br-vtep-void], [lswitch0])
check ovn-sbctl wait-until Port_Binding br-vtep_lswitch0
OVS_WAIT_UNTIL([test -n "`grep WARN ovn-controller-vtep.log`"])
# confirms the warning log.
AT_CHECK([sed -n 's/^.*\(|WARN|.*\)$/\1/p' ovn-controller-vtep.log | sed 's/([[-_0-9a-z]][[-_0-9a-z]]*)/()/g;s/(with tunnel key [[0-9]][[0-9]]*)/()/g' | uniq], [0], [dnl
|WARN|logical switch (), on vtep gateway chassis () has already been associated with logical datapath (), ignore logical port () which belongs to logical datapath ()
])

# then deletes 'br-void' and 'br-vtep-void', should see 'br-vtep_lswitch0'
# bound correctly.
AT_CHECK([ovn-nbctl ls-del br-void])
# adds another vtep pswitch 'br-vtep-void' in vtep database.
AT_CHECK([vtep-ctl del-ps br-vtep-void])
OVS_WAIT_UNTIL([test -z "`ovn-sbctl list Port_Binding | grep br-vtep-void_lswitch0`"])
chassis_uuid=$(ovn-sbctl --columns=_uuid list Chassis br-vtep | cut -d ':' -f2 | tr -d ' ')
AT_CHECK_UNQUOTED([ovn-sbctl --columns=chassis list Port_Binding br-vtep_lswitch0 | cut -d ':' -f2 | tr -d ' '], [0], [dnl
${chassis_uuid}
])

OVN_CONTROLLER_VTEP_STOP([/has already been associated with logical datapath/d])
AT_CLEANUP


# Tests vtep module vtep logical switch tunnel key update.
AT_SETUP([ovn-controller-vtep - vtep-lswitch])
ovn_start
OVN_CONTROLLER_VTEP_START
ovn-nbctl ls-add br-test

# creates the logical switch in vtep and adds the corresponding logical
# port to 'br-test'.
AT_CHECK([vtep-ctl add-ls lswitch0 -- bind-ls br-vtep p0 100 lswitch0])
OVN_NB_ADD_VTEP_PORT([br-test], [br-vtep_lswitch0], [br-vtep], [lswitch0])
OVS_WAIT_UNTIL([test -n "`ovn-sbctl list Port_Binding  | grep -- br-vtep_lswitch0`"])

# retrieves the expected tunnel key.
datapath_uuid=$(ovn-sbctl --columns=datapath list Port_Binding br-vtep_lswitch0 | cut -d ':' -f2 | tr -d ' ')
tunnel_key=$(ovn-sbctl --columns=tunnel_key list Datapath_Binding ${datapath_uuid} | cut -d ':' -f2 | tr -d ' ')
OVS_WAIT_UNTIL([test -z "`vtep-ctl --columns=tunnel_key list Logical_Switch | grep 0`"])
# checks the vtep logical switch tunnel key configuration.
AT_CHECK_UNQUOTED([vtep-ctl --columns=tunnel_key list Logical_Switch | cut -d ':' -f2 | tr -d ' '], [0], [dnl
${tunnel_key}
])

# creates a second physical switch in vtep database, and binds its p0 vlan-100
# to the same logical switch 'lswitch0'.
AT_CHECK([vtep-ctl add-ps br-vtep-void -- add-port br-vtep-void p0 -- bind-ls br-vtep-void p0 100 lswitch0])
OVS_WAIT_UNTIL([test -n "`ovn-sbctl --columns=name list Chassis  | grep -- br-vtep-void`"])
OVN_NB_ADD_VTEP_PORT([br-test], [br-vtep-void_lswitch0], [br-vtep-void], [lswitch0])
OVS_WAIT_UNTIL([test -n "`ovn-sbctl list Port_Binding  | grep -- br-vtep-void_lswitch0`"])

# checks the vtep logical switch tunnel key configuration.
AT_CHECK_UNQUOTED([vtep-ctl --columns=tunnel_key list Logical_Switch | cut -d ':' -f2 | tr -d ' '], [0], [dnl
${tunnel_key}
])

# now, deletes br-vtep-void.
AT_CHECK([vtep-ctl del-ps br-vtep-void])
OVS_WAIT_UNTIL([test -z "`ovn-sbctl --columns=name list Chassis  | grep -- br-vtep-void`"])
# checks the vtep logical switch tunnel key configuration.
AT_CHECK_UNQUOTED([vtep-ctl --columns=tunnel_key list Logical_Switch | cut -d ':' -f2 | tr -d ' '], [0], [dnl
${tunnel_key}
])

# changes the ovn-nb logical port type so that it is no longer
# vtep port.
AT_CHECK([ovn-nbctl lsp-set-type br-vtep_lswitch0 ""])
OVS_WAIT_UNTIL([test -z "`vtep-ctl --columns=tunnel_key list Logical_Switch | grep 1`"])
# now should see the tunnel key reset.
AT_CHECK([vtep-ctl --columns=tunnel_key list Logical_Switch | cut -d ':' -f2 | tr -d ' '], [0], [dnl
0
])

OVN_CONTROLLER_VTEP_STOP
AT_CLEANUP


# Tests vtep module 'Ucast_Macs_Remote's.
AT_SETUP([ovn-controller-vtep - vtep-macs 1])
ovn_start
OVN_CONTROLLER_VTEP_START
ovn-nbctl ls-add br-test

# creates a simple logical network with the vtep device and a fake hv chassis
# 'ch0'.
AT_CHECK([ovn-nbctl lsp-add br-test vif0])
AT_CHECK([ovn-nbctl lsp-set-addresses vif0 f0:ab:cd:ef:01:02])
AT_CHECK([ovn-nbctl --wait=sb sync])
AT_CHECK([ovn-sbctl chassis-add ch0 vxlan 1.2.3.5])
AT_CHECK([ovn-sbctl lsp-bind vif0 ch0])

# creates the logical switch in vtep and adds the corresponding logical
# port to 'br-test'.
AT_CHECK([vtep-ctl add-ls lswitch0 -- bind-ls br-vtep p0 100 lswitch0])
OVN_NB_ADD_VTEP_PORT([br-test], [br-vtep_lswitch0], [br-vtep], [lswitch0])
OVS_WAIT_UNTIL([test -n "`ovn-sbctl list Port_Binding  | grep br-vtep_lswitch0`"])

# adds another lswitch 'br-void' in ovn-nb database.
AT_CHECK([ovn-nbctl ls-add br-void])
# adds fake hv chassis 'ch1'.
AT_CHECK([ovn-nbctl lsp-add br-void vif1])
AT_CHECK([ovn-nbctl lsp-set-addresses vif1 f0:ab:cd:ef:01:02])
AT_CHECK([ovn-nbctl --wait=sb sync])
AT_CHECK([ovn-sbctl chassis-add ch1 vxlan 1.2.3.6])
AT_CHECK([ovn-sbctl lsp-bind vif1 ch1])

# checks Ucast_Macs_Remote creation.
OVS_WAIT_UNTIL([test -n "`vtep-ctl list Ucast_Macs_Remote | grep _uuid`"])
AT_CHECK([vtep-ctl --columns=MAC list Ucast_Macs_Remote | cut -d ':' -f2- | tr -d ' '], [0], [dnl
"f0:ab:cd:ef:01:02"
])

# checks physical locator creation.
OVS_WAIT_UNTIL([test -n "`vtep-ctl list Physical_Locator | grep _uuid`"])
AT_CHECK([vtep-ctl --columns=dst_ip list Physical_Locator | cut -d ':' -f2 | tr -d ' ' | grep -v 1.2.3.4 | sed '/^$/d'], [0], [dnl
"1.2.3.5"
])

# checks tunnel creation by ovs-vtep.
OVS_WAIT_UNTIL([test -n "`ovs-vsctl list Interface bfd1.2.3.5`"])
AT_CHECK([ovs-vsctl --columns=options list Interface bfd1.2.3.5 | cut -d ':' -f2 | tr -d ' '], [0], [dnl
{remote_ip="1.2.3.5"}
])

# adds another mac to logical switch port.
AT_CHECK([ovn-nbctl --wait=sb lsp-set-addresses vif0 f0:ab:cd:ef:01:02 f0:ab:cd:ef:01:03])
OVS_WAIT_UNTIL([test -n "`vtep-ctl list Ucast_Macs_Remote | grep 03`"])
AT_CHECK([vtep-ctl --columns=MAC list Ucast_Macs_Remote | cut -d ':' -f2- | tr -d ' ' | sort], [0], [dnl

"f0:ab:cd:ef:01:02"
"f0:ab:cd:ef:01:03"
])

# adds MAC-IP pair to logical switch port.
AT_CHECK([ovn-nbctl lsp-set-addresses vif0 "f0:ab:cd:ef:01:04 192.168.0.1"])
OVS_WAIT_UNTIL([test -n "`vtep-ctl list Ucast_Macs_Remote | grep 'f0:ab:cd:ef:01:04'`"])
AT_CHECK([vtep-ctl --columns=MAC list Ucast_Macs_Remote | cut -d ':' -f2- | tr -d ' ' | sort], [0], [dnl
"f0:ab:cd:ef:01:04"
])

# adds another MAC-IP pair to logical switch port.
AT_CHECK([ovn-nbctl lsp-set-addresses vif0 "f0:ab:cd:ef:01:04 192.168.0.1" "f0:ab:cd:ef:01:05 192.168.0.2"])
OVS_WAIT_UNTIL([test -n "`vtep-ctl list Ucast_Macs_Remote | grep 'f0:ab:cd:ef:01:05'`"])
AT_CHECK([vtep-ctl --columns=MAC list Ucast_Macs_Remote | cut -d ':' -f2- | tr -d ' ' | sort], [0], [dnl

"f0:ab:cd:ef:01:04"
"f0:ab:cd:ef:01:05"
])

# removes one mac to logical switch port.
AT_CHECK([ovn-nbctl --wait=sb lsp-set-addresses vif0 f0:ab:cd:ef:01:03])
OVS_WAIT_UNTIL([test -z "`vtep-ctl --columns=MAC list Ucast_Macs_Remote | grep 02`"])
AT_CHECK([vtep-ctl --columns=MAC list Ucast_Macs_Remote | cut -d ':' -f2- | tr -d ' ' | sort], [0], [dnl
"f0:ab:cd:ef:01:03"
])

# checks multiple vifs
# add new vif to br-test lswitch and check all UMRs exist
AT_CHECK([ovn-nbctl lsp-add br-test vif2])
AT_CHECK([ovn-nbctl lsp-set-addresses vif2 f0:ab:cd:ef:02:02])
AT_CHECK([ovn-nbctl --wait=sb sync])
AT_CHECK([ovn-sbctl chassis-add ch2 vxlan 1.2.3.7])
AT_CHECK([ovn-sbctl lsp-bind vif2 ch2])
AT_CHECK([vtep-ctl --columns=MAC list Ucast_Macs_Remote | cut -d ':' -f2- | tr -d ' ' | sort], [0], [dnl

"f0:ab:cd:ef:01:03"
"f0:ab:cd:ef:02:02"
])
AT_CHECK([ovn-nbctl lsp-del vif2])

# migrates mac to logical switch port vif1 on 'br-void'.
AT_CHECK([ovn-nbctl lsp-set-addresses vif0])
AT_CHECK([ovn-nbctl --wait=sb lsp-set-addresses vif1 f0:ab:cd:ef:01:03])
OVS_WAIT_UNTIL([test -z "`vtep-ctl --columns=MAC list Ucast_Macs_Remote | grep 03`"])
AT_CHECK([vtep-ctl --columns=MAC list Ucast_Macs_Remote | cut -d ':' -f2- | tr -d ' ' | sort], [0], [dnl
])

OVN_CONTROLLER_VTEP_STOP
AT_CLEANUP


# Tests vtep module 'Ucast_Macs_Remote's (corner cases).
AT_SETUP([ovn-controller-vtep - vtep-macs 2])
ovn_start
OVN_CONTROLLER_VTEP_START
ovn-nbctl ls-add br-test

# creates a simple logical network with the vtep device and a fake hv chassis
# 'ch0'.
AT_CHECK([ovn-nbctl lsp-add br-test vif0])
AT_CHECK([ovn-nbctl lsp-set-addresses vif0 f0:ab:cd:ef:01:02])
AT_CHECK([ovn-nbctl --wait=sb sync])
AT_CHECK([ovn-sbctl chassis-add ch0 vxlan 1.2.3.5])
AT_CHECK([ovn-sbctl lsp-bind vif0 ch0])

# creates another vif in the same logical switch with duplicate mac.
AT_CHECK([ovn-nbctl lsp-add br-test vif1])
AT_CHECK([ovn-nbctl lsp-set-addresses vif1 f0:ab:cd:ef:01:02])
AT_CHECK([ovn-nbctl --wait=sb sync])
AT_CHECK([ovn-sbctl lsp-bind vif1 ch0])

# creates the logical switch in vtep and adds the corresponding logical
# port to 'br-test'.
AT_CHECK([vtep-ctl add-ls lswitch0 -- bind-ls br-vtep p0 100 lswitch0])
OVN_NB_ADD_VTEP_PORT([br-test], [br-vtep_lswitch0], [br-vtep], [lswitch0])
OVS_WAIT_UNTIL([test -n "`ovn-sbctl list Port_Binding  | grep br-vtep_lswitch0`"])

# checks Ucast_Macs_Remote creation.  Should still only be one entry, since duplicate
# mac in the same logical switch is not allowed.
OVS_WAIT_UNTIL([test -n "`vtep-ctl list Ucast_Macs_Remote | grep _uuid`"])
AT_CHECK([vtep-ctl --columns=MAC list Ucast_Macs_Remote | cut -d ':' -f2- | tr -d ' '], [0], [dnl
"f0:ab:cd:ef:01:02"
])
# confirms the warning log.
OVS_WAIT_UNTIL([test -n "`grep WARN ovn-controller-vtep.log`"])
AT_CHECK([sed -n 's/^.*\(|WARN|.*\)$/\1/p' ovn-controller-vtep.log | sed 's/([[-_:0-9a-z]][[-_:0-9a-z]]*)/()/g' | uniq], [0], [dnl
|WARN|MAC address () has already been known to be on logical port () in the same logical datapath, so just ignore this logical port ()
])

# deletes vif1.
AT_CHECK([ovn-nbctl --wait=sb lsp-del vif1])

# adds another lswitch 'br-void' in ovn-nb database.
AT_CHECK([ovn-nbctl ls-add br-void])
# adds fake hv chassis 'ch1' and vif1 with same mac address as vif0.
AT_CHECK([ovn-nbctl lsp-add br-void vif1])
AT_CHECK([ovn-nbctl lsp-set-addresses vif1 f0:ab:cd:ef:01:02])
AT_CHECK([ovn-nbctl --wait=sb sync])
AT_CHECK([ovn-sbctl chassis-add ch1 vxlan 1.2.3.6])
AT_CHECK([ovn-sbctl lsp-bind vif1 ch1])
OVS_WAIT_UNTIL([test -n "`ovn-sbctl list Port_Binding | grep vif1`"])

# creates another logical switch in vtep and adds the corresponding logical
# port to 'br-void'.
AT_CHECK([vtep-ctl add-ls lswitch1 -- bind-ls br-vtep p0 200 lswitch1])
OVN_NB_ADD_VTEP_PORT([br-void], [br-void_lswitch1], [br-vtep], [lswitch1])
OVS_WAIT_UNTIL([test -n "`ovn-sbctl list Port_Binding  | grep br-void_lswitch1`"])

# checks Ucast_Macs_Remote creation.  Should see two entries since it is allowed
# to have duplicate macs in different logical switches.
OVS_WAIT_UNTIL([test `vtep-ctl --columns=MAC list Ucast_Macs_Remote | grep 02 | wc -l` -gt 1])
AT_CHECK([vtep-ctl --columns=MAC list Ucast_Macs_Remote | cut -d ':' -f2- | tr -d ' ' | sort], [0], [dnl

"f0:ab:cd:ef:01:02"
"f0:ab:cd:ef:01:02"
])

OVN_CONTROLLER_VTEP_STOP([/has already been known to be on logical port/d])
AT_CLEANUP

# Tests vtep module 'Mcast_Macs_Remote's.
AT_SETUP([ovn-controller-vtep - vtep-Mcast_Macs_Remote])
ovn_start
OVN_CONTROLLER_VTEP_START
ovn-nbctl ls-add br-test

# creates a simple logical network with the vtep device and a fake hv chassis
# 'ch0'.
check ovn-nbctl lsp-add br-test vif0
check ovn-nbctl lsp-set-addresses vif0 f0:ab:cd:ef:01:00
check ovn-nbctl --wait=sb sync
check ovn-sbctl chassis-add ch0 vxlan 1.2.3.5
check ovn-sbctl lsp-bind vif0 ch0

# creates the logical switch in vtep and adds the corresponding logical
# port to 'br-test'.
check vtep-ctl add-ls lswitch0 -- bind-ls br-vtep p0 100 lswitch0
OVN_NB_ADD_VTEP_PORT([br-test], [br-vtep_lswitch0], [br-vtep], [lswitch0])
OVS_WAIT_UNTIL([test -n "`ovn-sbctl list Port_Binding  | grep br-vtep_lswitch0`"])

# checks Mcast_Macs_Remote creation.
OVS_WAIT_UNTIL([test `vtep-ctl list Mcast_Macs_Remote | grep _uuid | wc -l` -eq 1])
AT_CHECK([vtep-ctl --columns=MAC list Mcast_Macs_Remote | cut -d ':' -f2- | tr -d ' '], [0], [dnl
unknown-dst
])

# check physical locator and physical locator set updates
OVS_WAIT_UNTIL([test -n "`vtep-ctl list Physical_Locator | grep _uuid`"])
AT_CHECK([for i in `vtep-ctl --columns=locators list Physical_Locator_Set $(vtep-ctl --columns=locator_set list Mcast_Macs_Remote | cut -d ':' -f2) | cut -d ':' -f2 | tr -d '[[ ]]' | sed 's/,/ /g'`; do
   vtep-ctl --columns=dst_ip list Physical_Locator $i | cut -d ':' -f2 | tr -d ' '
done], [0], [dnl
"1.2.3.5"
])

# add new lport and bind it to another fake chassis 'ch1'.
check ovn-nbctl lsp-add br-test vif1
check ovn-nbctl lsp-set-addresses vif0 f0:ab:cd:ef:01:01
check ovn-nbctl --wait=sb sync
check ovn-sbctl chassis-add ch1 vxlan 1.2.3.6
check ovn-sbctl lsp-bind vif1 ch1

# checks there is still only one Mcast_Macs_Remote record.
OVS_WAIT_UNTIL([test `vtep-ctl list Mcast_Macs_Remote | grep _uuid | wc -l` -eq 1])
AT_CHECK([vtep-ctl --columns=MAC list Mcast_Macs_Remote | cut -d ':' -f2- | tr -d ' '], [0], [dnl
unknown-dst
])

# check physical locator and physical locator set updates
AT_CHECK([for i in `vtep-ctl --columns=locators list Physical_Locator_Set $(vtep-ctl --columns=locator_set list Mcast_Macs_Remote | cut -d ':' -f2) | cut -d ':' -f2 | tr -d '[[ ]]' | sed 's/,/ /g'`; do
   vtep-ctl --columns=dst_ip list Physical_Locator $i | cut -d ':' -f2 | tr -d ' '
done | sort], [0], [dnl
"1.2.3.5"
"1.2.3.6"
])

OVN_CONTROLLER_VTEP_STOP
AT_CLEANUP


# Tests OF to vtep device on ovn-controller node.
OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn-controller-vtep - hv flows])
ovn_start
OVN_CONTROLLER_VTEP_START(vtep1)
net_add n1

# Start hv chassis and create lswitch with normal vif attached to hv chassis
sim_add hv1
as hv1
ovs-vsctl -- add-br br-phys
ovn_attach n1 br-phys 192.168.0.1
ovn-nbctl ls-add lsw0
ovn-nbctl lsp-add lsw0 lsp0
ovn-nbctl lsp-set-addresses lsp0 f0:00:00:00:00:01
ovs-vsctl add-port br-int vif0 -- set Interface vif0 external-ids:iface-id=lsp0


# 1st testcase: create vtep logical switch port and then bind vlan on vtep
OVN_NB_ADD_VTEP_PORT([lsw0], [lsp-vtep], [vtep1], [lswitch0])

# ensure there is a port_binding without chassis set
wait_row_count Port_Binding 1 logical_port=lsp-vtep chassis='[[]]'

# add vlan binding, ensure port_binding has chassis and OF on hv is installed
OVS_WAIT_WHILE([ovs-ofctl dump-flows br-int table=0 | grep 'priority=110'])
check as vtep1 vtep-ctl add-ls lswitch0 -- bind-ls vtep1 p0 100 lswitch0
wait_row_count Port_Binding 1 logical_port=lsp-vtep chassis!='[[]]'
OVS_WAIT_UNTIL([ovs-ofctl dump-flows br-int table=0 | grep 'priority=110'])
AT_CHECK([ovs-ofctl dump-flows br-int table=0 | grep 'priority=110' | \
          awk '{print $(NF-1), $NF}' | sed -e 's/in_port=[[0-9]]\+/in_port=<>/g' | \
          sed -e 's/0x[[0-9a-f]]\+/0x<>/g'], [0], [dnl
priority=110,tun_id=0x<>,in_port=<> actions=move:NXM_NX_TUN_ID[[0..23]]->OXM_OF_METADATA[[0..23]],load:0x<>->NXM_NX_REG14[[0..14]],load:0x<>->NXM_NX_REG10[[1]],resubmit(,8)
])

# cleanup
check ovn-nbctl lsp-del lsp-vtep
check as vtep1 vtep-ctl unbind-ls vtep1 p0 100

# vtep-ctl del-ls lswitch0 can fail due to remaining references to local-macs eventough we do vtep-ctl clear-local-macs.
# This happens if local-macs are added right before, causing our idl not to be up-to-date ; hence the clear-local-macs does not reach the db.
OVS_WAIT_UNTIL([as vtep1 vtep-ctl clear-local-macs lswitch0 \
                        -- clear-remote-macs lswitch0 \
                        -- del-ls lswitch0 ])

# 2nd testcase: create vlan binding on vtep and then create logical switch port for it.
# ensure there's no port_binding
wait_row_count Port_Binding 0 logical_port=lsp-vtep

check as vtep1 vtep-ctl add-ls lswitch0 -- bind-ls vtep1 p0 100 lswitch0
OVN_NB_ADD_VTEP_PORT([lsw0], [lsp-vtep], [vtep1], [lswitch0])
wait_row_count Port_Binding 1 logical_port=lsp-vtep chassis!='[[]]'

OVS_WAIT_UNTIL([ovs-ofctl dump-flows br-int table=0 | grep 'priority=110'])
AT_CHECK([ovs-ofctl dump-flows br-int table=0 | grep 'priority=110' | \
          awk '{print $(NF-1), $NF}' | sed -e 's/in_port=[[0-9]]\+/in_port=<>/g' | \
          sed -e 's/0x[[0-9a-f]]\+/0x<>/g'], [0], [dnl
priority=110,tun_id=0x<>,in_port=<> actions=move:NXM_NX_TUN_ID[[0..23]]->OXM_OF_METADATA[[0..23]],load:0x<>->NXM_NX_REG14[[0..14]],load:0x<>->NXM_NX_REG10[[1]],resubmit(,8)
])

OVN_CLEANUP([hv1])
AT_CLEANUP
])

AT_SETUP([ovn -- check ovn-northd and ovn-controller-vtep version pinning])
ovn_start
OVN_CONTROLLER_VTEP_START(vtep1)
net_add n1

# adds vlan_bindings to physical ports.
check as vtep1 vtep-ctl add-ls lswitch0 -- bind-ls vtep1 p0 100 lswitch0 -- bind-ls vtep1 p0 200 lswitch0 -- bind-ls vtep1 p1 300 lswitch0
OVS_WAIT_UNTIL([test -n "`ovn-sbctl list Chassis | grep -- lswitch0`"])
AT_CHECK([ovn-sbctl --columns=vtep_logical_switches list Chassis | cut -d ':' -f2 | tr -d ' ' ], [0], [dnl
[[lswitch0]]
])

northd_version=$(ovn-sbctl get SB_Global . options:northd_internal_version | sed s/\"//g)
echo "northd version = $northd_version"
AT_CHECK([grep -c $northd_version vtep1/ovn-controller-vtep.log], [0], [1
])

# Stop ovn-northd so that we can modify the northd_version.
as northd
OVS_APP_EXIT_AND_WAIT([ovn-northd])

check ovn-sbctl set SB_Global . options:northd_internal_version=foo
check ovn-sbctl set Chassis vtep1 vtep_logical_switches=foo

# ovn-controller-vtep should reset vtep_logical_switches to previous value
# since ovn-match-northd-version is not true.
AT_CHECK([ovn-sbctl --columns=vtep_logical_switches list Chassis | cut -d ':' -f2 | tr -d ' ' ], [0], [dnl
[[lswitch0]]
])

check as vtep1 vtep-ctl set global . other_config:ovn-match-northd-version=true

OVS_WAIT_UNTIL(
    [test 1 = $(grep -c "controller-vtep version - $northd_version mismatch with northd version - foo" vtep1/ovn-controller-vtep.log)
])

check ovn-sbctl set Chassis vtep1 vtep_logical_switches=foo

# ovn-controller-vtep should not set vtep_logical_switches back since there is a version mismatch
AT_CHECK([ovn-sbctl --columns=vtep_logical_switches list Chassis | cut -d ':' -f2 | tr -d ' ' ], [0], [dnl
[[foo]]
])

check ovn-sbctl set SB_Global . options:northd_internal_version=$northd_version

# ovn-controller-vtep should set vtep_logical_switches back since versions match
AT_CHECK([ovn-sbctl --columns=vtep_logical_switches list Chassis | cut -d ':' -f2 | tr -d ' ' ], [0], [dnl
[[lswitch0]]
])

AT_CLEANUP
