AT_BANNER([OVN northd])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check from NBDB to SBDB])
ovn_start

ovn-nbctl create Logical_Router name=R1
ovn-sbctl chassis-add gw1 geneve 127.0.0.1
ovn-sbctl chassis-add gw2 geneve 1.2.4.8

# Connect alice to R1 as distributed router gateway port on hv2
ovn-nbctl lrp-add R1 alice 00:00:02:01:02:03 172.16.1.1/24

ovn-nbctl --wait=sb \
    --id=@gc0 create Gateway_Chassis name=alice_gw1 \
                                     chassis_name=gw1 \
                                     priority=20 -- \
    --id=@gc1 create Gateway_Chassis name=alice_gw2 \
                                     chassis_name=gw2 \
                                     priority=10 -- \
    set Logical_Router_Port alice 'gateway_chassis=[@gc0,@gc1]'

nb_gwc1_uuid=`ovn-nbctl --bare --columns _uuid find Gateway_Chassis name="alice_gw1"`

# With the new ha_chassis_group table added, there should be no rows in
# gateway_chassis table in SB DB.
check_row_count Gateway_Chassis 0

# There should be one ha_chassis_group with the name "alice"
check_row_count HA_Chassis_Group 1 name=alice
ha_chgrp_uuid=$(fetch_column HA_Chassis_Group _uuid name=alice)
check_row_count Port_Binding 1 logical_port=cr-alice ha_chassis_group=$ha_chgrp_uuid

ha_ch=$(fetch_column HA_Chassis_Group ha_chassis name=alice)
check_column "$ha_ch" HA_Chassis _uuid

# Delete chassis - gw2 in SB DB.
# ovn-northd should not recreate ha_chassis rows
# repeatedly when gw2 is deleted.
ovn-sbctl chassis-del gw2

ha_ch_list=$(fetch_column HA_Chassis _uuid)
check_column "$ha_ch_list" HA_Chassis _uuid

# Add back the gw2 chassis
ovn-sbctl chassis-add gw2 geneve 1.2.4.8

# delete the 2nd Gateway_Chassis on NBDB for alice port
check_column '' Port_Binding gateway_chassis logical_port=cr-alice

ha_ch=$(fetch_column HA_Chassis_Group ha_chassis)
check_column "$ha_ch" HA_Chassis _uuid

# delete the 2nd Gateway_Chassis on NBDB for alice port
ovn-nbctl --wait=sb set Logical_Router_Port alice gateway_chassis=${nb_gwc1_uuid}

# There should be only 1 row in ha_chassis SB DB table.
check_row_count HA_Chassis 1
check_row_count Gateway_Chassis 0

# delete all the gateway_chassis on NBDB for alice port
ovn-nbctl --wait=sb clear Logical_Router_Port alice gateway_chassis

# expect that the ha_chassis doesn't exist anymore
check_row_count HA_Chassis 0
check_row_count Gateway_Chassis 0
check_row_count Ha_Chassis_Group 0

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check up state of VIF LSP])
ovn_start

ovn-nbctl ls-add S1
ovn-nbctl --wait=sb lsp-add S1 S1-vm1
wait_row_count nb:Logical_Switch_Port 1 name=S1-vm1 'up!=true'

ovn-sbctl chassis-add hv1 geneve 127.0.0.1
ovn-sbctl lsp-bind S1-vm1 hv1
wait_row_count nb:Logical_Switch_Port 1 name=S1-vm1 'up=true'

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check up state of router LSP linked to a distributed LR])
ovn_start

ovn-nbctl lr-add R1
ovn-nbctl lrp-add R1 R1-S1 02:ac:10:01:00:01 172.16.1.1/24

ovn-nbctl ls-add S1
ovn-nbctl lsp-add S1 S1-R1
ovn-nbctl lsp-set-type S1-R1 router
ovn-nbctl lsp-set-addresses S1-R1 02:ac:10:01:00:01
ovn-nbctl --wait=sb lsp-set-options S1-R1 router-port=R1-S1
AT_CHECK([test x`ovn-nbctl lsp-get-up S1-R1` = xup])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check up state of router LSP linked to a gateway LR])
ovn_start

ovn-sbctl chassis-add gw1 geneve 127.0.0.1

ovn-nbctl create Logical_Router name=R1 options:chassis=gw1
ovn-nbctl lrp-add R1 R1-S1 02:ac:10:01:00:01 172.16.1.1/24

ovn-nbctl ls-add S1
ovn-nbctl lsp-add S1 S1-R1
ovn-nbctl lsp-set-type S1-R1 router
ovn-nbctl lsp-set-addresses S1-R1 02:ac:10:01:00:01
ovn-nbctl --wait=sb lsp-set-options S1-R1 router-port=R1-S1

ovn-sbctl lsp-bind S1-R1 gw1
AT_CHECK([test x`ovn-nbctl lsp-get-up S1-R1` = xup])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check up state of router LSP linked to an LRP with set Gateway Chassis])
ovn_start

ovn-sbctl chassis-add gw1 geneve 127.0.0.1

ovn-nbctl lr-add R1
ovn-nbctl lrp-add R1 R1-S1 02:ac:10:01:00:01 172.16.1.1/24
ovn-nbctl lrp-set-gateway-chassis R1-S1 gw1

ovn-nbctl ls-add S1
ovn-nbctl lsp-add S1 S1-R1
ovn-nbctl lsp-set-type S1-R1 router
ovn-nbctl lsp-set-addresses S1-R1 router
ovn-nbctl --wait=sb lsp-set-options S1-R1 router-port=R1-S1
AT_CHECK([test x`ovn-nbctl lsp-get-up S1-R1` = xup])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check IPv6 RA config propagation to SBDB])
ovn_start

ovn-nbctl lr-add ro
ovn-nbctl lrp-add ro ro-sw 00:00:00:00:00:01 aef0:0:0:0:0:0:0:1/64
ovn-nbctl ls-add sw
ovn-nbctl lsp-add sw sw-ro
ovn-nbctl lsp-set-type sw-ro router
ovn-nbctl lsp-set-options sw-ro router-port=ro-sw
ovn-nbctl lsp-set-addresses sw-ro 00:00:00:00:00:01
ovn-nbctl set Logical_Router_Port ro-sw ipv6_ra_configs:send_periodic=true
ovn-nbctl set Logical_Router_Port ro-sw ipv6_ra_configs:address_mode=slaac
ovn-nbctl --wait=sb set Logical_Router_Port ro-sw ipv6_ra_configs:mtu=1280

uuid=$(ovn-sbctl --columns=_uuid --bare find Port_Binding logical_port=ro-sw)

AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_send_periodic],
[0], ["true"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_address_mode],
[0], [slaac
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_max_interval],
[0], ["600"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_min_interval],
[0], ["200"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_mtu],
[0], ["1280"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_src_eth],
[0], ["00:00:00:00:00:01"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_src_addr],
[0], ["fe80::200:ff:fe00:1"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_prefixes],
[0], ["aef0::/64"
])

ovn-nbctl set Logical_Router_Port ro-sw ipv6_ra_configs:max_interval=300
ovn-nbctl --wait=sb set Logical_Router_Port ro-sw ipv6_ra_configs:min_interval=600

AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_max_interval],
[0], ["300"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_min_interval],
[0], ["225"
])

ovn-nbctl set Logical_Router_Port ro-sw ipv6_ra_configs:max_interval=300
ovn-nbctl --wait=sb set Logical_Router_Port ro-sw ipv6_ra_configs:min_interval=250

AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_max_interval],
[0], ["300"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_min_interval],
[0], ["225"
])

ovn-nbctl set Logical_Router_Port ro-sw ipv6_ra_configs:max_interval=0
ovn-nbctl --wait=sb set Logical_Router_Port ro-sw ipv6_ra_configs:min_interval=0

AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_max_interval],
[0], ["4"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_min_interval],
[0], ["3"
])

ovn-nbctl set Logical_Router_Port ro-sw ipv6_ra_configs:max_interval=3600
ovn-nbctl --wait=sb set Logical_Router_Port ro-sw ipv6_ra_configs:min_interval=2400

AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_max_interval],
[0], ["1800"
])
AT_CHECK([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_min_interval],
[0], ["1350"
])

ovn-nbctl --wait=sb set Logical_Router_port ro-sw ipv6_ra_configs:send_periodic=false

AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_send_periodic],
[1], [], [ovn-sbctl: no key "ipv6_ra_send_periodic" in Port_Binding record "${uuid}" column options
])
AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_max_interval],
[1], [], [ovn-sbctl: no key "ipv6_ra_max_interval" in Port_Binding record "${uuid}" column options
])
AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_min_interval],
[1], [], [ovn-sbctl: no key "ipv6_ra_min_interval" in Port_Binding record "${uuid}" column options
])
AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_mtu],
[1], [], [ovn-sbctl: no key "ipv6_ra_mtu" in Port_Binding record "${uuid}" column options
])
AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_address_mode],
[1], [], [ovn-sbctl: no key "ipv6_ra_address_mode" in Port_Binding record "${uuid}" column options
])
AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_src_eth],
[1], [], [ovn-sbctl: no key "ipv6_ra_src_eth" in Port_Binding record "${uuid}" column options
])
AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_src_addr],
[1], [], [ovn-sbctl: no key "ipv6_ra_src_addr" in Port_Binding record "${uuid}" column options
])
AT_CHECK_UNQUOTED([ovn-sbctl get Port_Binding ${uuid} options:ipv6_ra_prefixes],
[1], [], [ovn-sbctl: no key "ipv6_ra_prefixes" in Port_Binding record "${uuid}" column options
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- test unixctl])
ovn_init_db ovn-sb; ovn-sbctl init
ovn_init_db ovn-nb; ovn-nbctl init

# test unixctl option
mkdir "$ovs_base"/northd
as northd start_daemon NORTHD_TYPE --unixctl="$ovs_base"/northd/NORTHD_TYPE[].ctl --ovnnb-db=unix:"$ovs_base"/ovn-nb/ovn-nb.sock --ovnsb-db=unix:"$ovs_base"/ovn-sb/ovn-sb.sock
ovn-nbctl ls-add sw
ovn-nbctl --wait=sb lsp-add sw p1
# northd created with unixctl option successfully created port_binding entry
check_row_count Port_Binding 1 logical_port=p1
AT_CHECK([ovn-nbctl --wait=sb lsp-del p1])

# ovs-appctl exit with unixctl option
OVS_APP_EXIT_AND_WAIT_BY_TARGET(["$ovs_base"/northd/]NORTHD_TYPE[.ctl], ["$ovs_base"/northd/]NORTHD_TYPE[.pid])

# Check no port_binding entry for new port as ovn-northd is not running
#
# 142 is 128+14, the exit status that the shell reports when a
# process exits due to SIGARLM (signal 14).
ovn-nbctl lsp-add sw p2
AT_CHECK([ovn-nbctl --timeout=10 --wait=sb sync], [142], [], [ignore])
check_row_count Port_Binding 0 logical_port=p2

# test default unixctl path
as northd start_daemon NORTHD_TYPE --ovnnb-db=unix:"$ovs_base"/ovn-nb/ovn-nb.sock --ovnsb-db=unix:"$ovs_base"/ovn-sb/ovn-sb.sock
ovn-nbctl --wait=sb lsp-add sw p3
# northd created with default unixctl path successfully created port_binding entry
check_row_count Port_Binding 1 logical_port=p3

as ovn-sb
OVS_APP_EXIT_AND_WAIT([ovsdb-server])
as ovn-nb
OVS_APP_EXIT_AND_WAIT([ovsdb-server])
as northd
OVS_APP_EXIT_AND_WAIT([NORTHD_TYPE])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check HA_Chassis_Group propagation from NBDB to SBDB])
ovn_start

check ovn-nbctl --wait=sb ha-chassis-group-add hagrp1

# ovn-northd should not create HA chassis group and HA chassis rows
# unless the HA chassis group in OVN NB DB is associated to
# a logical router port or logical port of type external.
check_row_count HA_Chassis_Group 0 name=hagrp1

check ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch1 30
check ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch2 20
check ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch3 10

# There should be no HA_Chassis rows in SB DB.
check_row_count HA_Chassis 0

# Add chassis ch1.
check ovn-sbctl chassis-add ch1 geneve 127.0.0.2

wait_row_count Chassis 1 name=ch1

# There should be no HA_Chassis rows
check_row_count HA_Chassis 0

# Create a logical router port and attach ha chassis group.
check ovn-nbctl lr-add lr0
check ovn-nbctl --wait=sb lrp-add lr0 lr0-public 00:00:20:20:12:13 172.168.0.100/24

hagrp1_uuid=`ovn-nbctl --bare --columns _uuid find ha_chassis_group name=hagrp1`
echo "hagrp1_uuid=$hagrp1_uuid"
check ovn-nbctl --wait=sb set logical_router_port lr0-public ha_chassis_group=$hagrp1_uuid

wait_row_count HA_Chassis_Group 1 name=hagrp1

check_row_count HA_Chassis 3

# ovn-northd has a weird history regarding HA_Chassis and missing
# Chassis records, see commit f879850b5f2c ("ovn-northd: Fix the
# HA_Chassis sync issue in OVN SB DB").
#
# Make sure that ovn-northd doesn't recreate the ha_chassis
# records if the chassis record is missing in SB DB.
ha_ch_list=$(fetch_column HA_Chassis _uuid)
check_column "$ha_ch_list" HA_Chassis _uuid

# 2 HA chassis should be created with 'chassis' column empty because
# we have not added hv1 and hv2 chassis to the SB DB.
check_row_count HA_Chassis 2 'chassis=[[]]'

# We should have 1 ha chassis with 'chassis' column set for hv1
check_row_count HA_Chassis 1 'chassis!=[[]]'

# Create another logical router port and associate to the same ha_chasis_group
check ovn-nbctl lr-add lr1
check ovn-nbctl lrp-add lr1 lr1-public 00:00:20:20:12:14 182.168.0.100/24

check ovn-nbctl set logical_router_port lr1-public ha_chassis_group=$hagrp1_uuid

# We should still have 1 HA chassis group and 3 HA chassis in SB DB.
wait_row_count HA_Chassis_Group 1 name=hagrp1
check_row_count HA_Chassis 3

# Change the priority of ch1 - ha chassis in NB DB. It should get
# reflected in SB DB.
ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch1 100

wait_row_count HA_Chassis 1 priority=100

# Delete ch1 HA chassis in NB DB.
ovn-nbctl --wait=sb ha-chassis-group-remove-chassis hagrp1 ch1

wait_row_count HA_Chassis 2

# Add back the ha chassis
ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch1 40
wait_row_count HA_Chassis 3

# Delete lr0-public. We should still have 1 HA chassis group and
# 3 HA chassis in SB DB.
ovn-nbctl --wait=sb lrp-del lr0-public

wait_row_count HA_Chassis_Group 1 name=hagrp1
wait_row_count HA_Chassis 3

# Delete lr1-public. There should be no HA chassis group in SB DB.
ovn-nbctl --wait=sb lrp-del lr1-public

wait_row_count HA_Chassis_Group 0 name=hagrp1
wait_row_count HA_Chassis 0

# Add lr0-public again
ovn-nbctl lrp-add lr0 lr0-public 00:00:20:20:12:13 172.168.0.100/24
ovn-nbctl set logical_router_port lr0-public ha_chassis_group=$hagrp1_uuid

wait_row_count HA_Chassis_Group 1 name=hagrp1
wait_row_count HA_Chassis 3

# Create a Gateway chassis. ovn-northd should ignore this.
check ovn-nbctl --wait=sb lrp-set-gateway-chassis lr0-public ch1 20

# There should be only 1 HA chassis group in SB DB with the
# name hagrp1.
wait_row_count HA_Chassis_Group 1
wait_row_count HA_Chassis_Group 1 name=hagrp1
wait_row_count HA_Chassis 3

# Now delete HA chassis group. ovn-northd should create HA chassis group
# with the Gateway chassis name
ovn-nbctl clear logical_router_port lr0-public ha_chassis_group
ovn-nbctl ha-chassis-group-del hagrp1

wait_row_count HA_Chassis_Group 0 name=hagrp1
wait_row_count HA_Chassis_Group 1 name=lr0-public
wait_row_count HA_Chassis 1

ovn-nbctl lrp-set-gateway-chassis lr0-public ch2 10

wait_row_count HA_Chassis_Group 1 name=lr0-public

ovn-sbctl --bare --columns _uuid find ha_chassis
wait_row_count HA_Chassis 2

# Test if 'ref_chassis' column is properly set or not in
# SB DB ha_chassis_group.
check ovn-nbctl ls-add sw0
check ovn-nbctl lsp-add sw0 sw0-p1

check ovn-sbctl chassis-add ch2 geneve 127.0.0.3
check ovn-sbctl chassis-add ch3 geneve 127.0.0.4
check ovn-sbctl chassis-add comp1 geneve 127.0.0.5
check ovn-sbctl chassis-add comp2 geneve 127.0.0.6

check ovn-nbctl lrp-add lr0 lr0-sw0 00:00:20:20:12:14 10.0.0.1/24
check ovn-nbctl lsp-add sw0 sw0-lr0
check ovn-nbctl lsp-set-type sw0-lr0 router
check ovn-nbctl lsp-set-addresses sw0-lr0 router
check ovn-nbctl --wait=sb lsp-set-options sw0-lr0 router-port=lr0-sw0

ovn-sbctl lsp-bind sw0-p1 comp1
wait_row_count nb:Logical_Switch_Port 1 name=sw0-p1 up=true

comp1_ch_uuid=$(fetch_column Chassis _uuid name=comp1)
comp2_ch_uuid=$(fetch_column Chassis _uuid name=comp2)
ch2_ch_uuid=$comp1_ch_uuid

# Check ref_chassis.
echo "comp1_ch_uuid = $comp1_ch_uuid"
wait_column "$comp1_ch_uuid" HA_Chassis_Group ref_chassis

# unbind sw0-p1
ovn-sbctl lsp-unbind sw0-p1
wait_row_count nb:Logical_Switch_Port 1 name=sw0-p1 up=false
wait_column "" HA_Chassis_Group ref_chassis

# Bind sw0-p1 in comp2
ovn-sbctl lsp-bind sw0-p1 comp2
wait_column "$comp2_ch_uuid" HA_Chassis_Group ref_chassis

ovn-nbctl ls-add sw1
ovn-nbctl lsp-add sw1 sw1-p1
ovn-nbctl lr-add lr1
ovn-nbctl lrp-add lr1 lr1-sw1 00:00:20:20:12:15 20.0.0.1/24
ovn-nbctl lsp-add sw1 sw1-lr1
ovn-nbctl lsp-set-type sw1-lr1 router
ovn-nbctl lsp-set-addresses sw1-lr1 router
check ovn-nbctl --wait=sb lsp-set-options sw1-lr1 router-port=lr1-sw1

# Bind sw1-p1 in comp1.
check ovn-sbctl lsp-bind sw1-p1 comp1
# Wait until sw1-p1 is up
wait_row_count nb:Logical_Switch_Port 1 name=sw1-p1 up=true

# sw1-p1 is not connected to lr0. So comp1 should not be in 'ref_chassis'
wait_column "$comp2_ch_uuid" HA_Chassis_Group ref_chassis

# Now attach sw0 to lr1
check ovn-nbctl lrp-add lr1 lr1-sw0 00:00:20:20:12:16 10.0.0.10/24
check ovn-nbctl lsp-add sw0 sw0-lr1
check ovn-nbctl lsp-set-type sw0-lr1 router
check ovn-nbctl lsp-set-addresses sw0-lr1 router
check ovn-nbctl --wait=sb lsp-set-options sw0-lr1 router-port=lr1-sw0

# Both comp1 and comp2 should be in 'ref_chassis' as sw1 is indirectly
# connected to lr0
exp_ref_ch_list="$comp1_ch_uuid $comp2_ch_uuid"

wait_column "$exp_ref_ch_list" HA_Chassis_Group ref_chassis 

# Unind sw1-p1. comp2 should not be in the ref_chassis.
ovn-sbctl lsp-unbind sw1-p1
wait_row_count nb:Logical_Switch_Port 1 name=sw1-p1 up=false
wait_column "$comp2_ch_uuid" HA_Chassis_Group ref_chassis

# Create sw2 and attach it to lr2
check ovn-nbctl ls-add sw2
check ovn-nbctl lsp-add sw2 sw2-p1
check ovn-nbctl lr-add lr2
check ovn-nbctl lrp-add lr2 lr2-sw2 00:00:20:20:12:17 30.0.0.1/24
check ovn-nbctl lsp-add sw2 sw2-lr2
check ovn-nbctl lsp-set-type sw2-lr2 router
check ovn-nbctl lsp-set-addresses sw2-lr2 router
check ovn-nbctl --wait=sb lsp-set-options sw2-lr2 router-port=lr2-sw2

# Bind sw2-p1 to comp1
check ovn-sbctl lsp-bind sw2-p1 comp1
# Wait until sw2-p1 is up
wait_row_count nb:Logical_Switch_Port 1 name=sw2-p1 up=true

# sw2-p1 is not connected to lr0. So comp1 should not be in 'ref_chassis'
wait_column "$comp2_ch_uuid" HA_Chassis_Group ref_chassis

# Now attach sw1 to lr2. With this sw2-p1 is indirectly connected to lr0.
check ovn-nbctl lrp-add lr2 lr2-sw1 00:00:20:20:12:18 20.0.0.10/24
check ovn-nbctl lsp-add sw1 sw1-lr2
check ovn-nbctl lsp-set-type sw1-lr2 router
check ovn-nbctl lsp-set-addresses sw1-lr2 router
check ovn-nbctl --wait=sb lsp-set-options sw1-lr2 router-port=lr2-sw1

# sw2-p1 is indirectly connected to lr0. So comp1 (and comp2) should be in
# 'ref_chassis'
wait_column "$exp_ref_ch_list" HA_Chassis_Group ref_chassis

# Create sw0-p2 and bind it to comp1
check ovn-nbctl --wait=sb lsp-add sw0 sw0-p2
ovn-sbctl lsp-bind sw0-p2 comp1
wait_row_count nb:Logical_Switch_Port 1 name=sw0-p2 up=true
wait_column "$exp_ref_ch_list" HA_Chassis_Group ref_chassis

# unbind sw0-p2
ovn-sbctl lsp-unbind sw0-p2
wait_row_count nb:Logical_Switch_Port 1 name=sw0-p2 up=false
wait_column "$exp_ref_ch_list" HA_Chassis_Group ref_chassis

# Delete lr1-sw0. comp1 should be deleted from ref_chassis as there is no link
# from sw1 and sw2 to lr0.
check ovn-nbctl lrp-del lr1-sw0

wait_column "$comp2_ch_uuid" HA_Chassis_Group ref_chassis

# Set redirect-chassis option to lr0-public. It should be ignored
# (because redirect-chassis is obsolete).
check ovn-nbctl set logical_router_port lr0-public options:redirect-chassis=ch1

wait_row_count HA_Chassis_Group 1
wait_row_count HA_Chassis_Group 1 name=lr0-public

wait_row_count HA_Chassis 2

# Delete the gateway chassis.
check ovn-nbctl clear logical_router_port lr0-public gateway_chassis

wait_row_count HA_Chassis_Group 0
check_row_count HA_Chassis 0

# Delete old sw0.
check ovn-nbctl --wait=sb ls-del sw0

# Create external logical ports and associate ha_chassis_group
check ovn-nbctl ls-add sw0
check ovn-nbctl lsp-add sw0 sw0-pext1
check ovn-nbctl lsp-add sw0 sw0-pext2
check ovn-nbctl lsp-add sw0 sw0-p1

check ovn-nbctl lsp-set-addresses sw0-pext1 "00:00:00:00:00:03 10.0.0.3"
check ovn-nbctl lsp-set-addresses sw0-pext2 "00:00:00:00:00:03 10.0.0.4"
check ovn-nbctl lsp-set-addresses sw0-p1 "00:00:00:00:00:03 10.0.0.5"

check ovn-nbctl --wait=sb ha-chassis-group-add hagrp1

check ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch1 30
check ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch2 20
check ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch3 10

# ovn-northd should not create HA chassis group and HA chassis rows
# unless the HA chassis group in OVN NB DB is associated to
# a logical router port or logical port of type external.
wait_row_count HA_Chassis_Group 0
check_row_count HA_Chassis 0

hagrp1_uuid=`ovn-nbctl --bare --columns _uuid find ha_chassis_group \
name=hagrp1`

# The type of the lsp - sw0-pext1 is still not set to external.
# So ha_chassis_group should be ignored.
ovn-nbctl set logical_switch_port sw0-pext1 ha_chassis_group=$hagrp1_uuid

wait_row_count HA_Chassis_Group 0 name=hagrp1
check_row_count HA_Chassis 0

# Set the type of sw0-pext1 to external
ovn-nbctl lsp-set-type sw0-pext1 external

wait_row_count HA_Chassis_Group 1 name=hagrp1
check_row_count HA_Chassis 3

sb_hagrp1_uuid=`ovn-sbctl --bare --columns _uuid find ha_chassis_group \
name=hagrp1`

check_row_count Port_Binding 1 logical_port=sw0-pext1 ha_chassis_group=$sb_hagrp1_uuid

# Set the type of sw0-pext2 to external and associate ha_chassis_group
ovn-nbctl lsp-set-type sw0-pext2 external
ovn-nbctl set logical_switch_port sw0-pext2 ha_chassis_group=$hagrp1_uuid

wait_row_count HA_Chassis_Group 1 name=hagrp1
check_row_count HA_Chassis 3
check_row_count Port_Binding 1 logical_port=sw0-pext1 ha_chassis_group=$sb_hagrp1_uuid
wait_row_count Port_Binding 1 logical_port=sw0-pext2 ha_chassis_group=$sb_hagrp1_uuid

# sw0-p1 is a normal port. So ha_chassis_group should not be set
# in port_binding.
ovn-nbctl --wait=sb set logical_switch_port sw0-p1 \
ha_chassis_group=$hagrp1_uuid

wait_row_count Port_Binding 0 logical_port=sw0-p1 'chassis!=[[]]'

# Clear ha_chassis_group for sw0-pext1
check ovn-nbctl --wait=sb clear logical_switch_port sw0-pext1 ha_chassis_group

wait_row_count Port_Binding 0 logical_port=sw0-pext1 'chassis!=[[]]'

wait_row_count HA_Chassis_Group 1 name=hagrp1
wait_row_count HA_Chassis 3

AS_BOX([Clear ha_chassis_group for sw0-pext2 and reset port type to normal in the same txn])

check ovn-nbctl  --wait=sb clear logical_switch_port sw0-pext2 \
ha_chassis_group -- set logical_switch_port sw0-pext2 'type=""'
wait_row_count HA_Chassis_Group 0
wait_row_count Port_Binding 0 logical_port=sw0-pext2 'chassis!=[[]]'
check_row_count HA_Chassis 0

as ovn-sb
OVS_APP_EXIT_AND_WAIT([ovsdb-server])
as ovn-nb
OVS_APP_EXIT_AND_WAIT([ovsdb-server])
as northd
OVS_APP_EXIT_AND_WAIT([NORTHD_TYPE])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- ovn-northd pause and resume])
# By starting the backup northd paused, we ensure that the primary
# northd is active; otherwise, there's a race.  (We also test that
# the ovn-northd --dry-run option works.)
ovn_start --backup-northd=paused

get_northd_status() {
    as northd ovn-appctl -t NORTHD_TYPE is-paused
    as northd ovn-appctl -t NORTHD_TYPE status
    as northd-backup ovn-appctl -t NORTHD_TYPE is-paused
    as northd-backup ovn-appctl -t NORTHD_TYPE status
}

AS_BOX([Check that the backup is paused])
OVS_WAIT_FOR_OUTPUT([get_northd_status], [0], [false
Status: active
true
Status: paused
])

AS_BOX([Resume the backup])
check as northd-backup ovs-appctl -t NORTHD_TYPE resume
OVS_WAIT_FOR_OUTPUT([get_northd_status], [0], [false
Status: active
false
Status: standby
])

AS_BOX([Check that ovn-northd is active])
# Check that ovn-northd is active, by verifying that it creates and
# destroys southbound datapaths as one would expect.
check_row_count Datapath_Binding 0
check ovn-nbctl --wait=sb ls-add sw0
check_row_count Datapath_Binding 1
check ovn-nbctl --wait=sb ls-del sw0
check_row_count Datapath_Binding 0

AS_BOX([Pause the main northd])
check as northd ovs-appctl -t NORTHD_TYPE pause
check as northd-backup ovs-appctl -t NORTHD_TYPE pause
AT_CHECK([get_northd_status], [0], [true
Status: paused
true
Status: paused
])

AS_BOX([Verify that ovn-northd is paused])
# Now ovn-northd won't respond by adding a datapath, because it's paused.
check ovn-nbctl ls-add sw0
check sleep 5
check_row_count Datapath_Binding 0

AS_BOX([Resume the main northd])
check as northd ovs-appctl -t NORTHD_TYPE resume
check as northd-backup ovs-appctl -t NORTHD_TYPE resume
OVS_WAIT_FOR_OUTPUT([get_northd_status], [0], [false
Status: active
false
Status: standby
])

check ovn-nbctl --wait=sb sync
check_row_count Datapath_Binding 1

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- ovn-northd restart])
ovn_start --backup-northd=none

# Check that ovn-northd is active, by verifying that it creates and
# destroys southbound datapaths as one would expect.
check_row_count Datapath_Binding 0
check ovn-nbctl --wait=sb ls-add sw0
check_row_count Datapath_Binding 1

# Kill northd.
as northd
OVS_APP_EXIT_AND_WAIT([NORTHD_TYPE])

# With ovn-northd gone, changes to nbdb won't be reflected into sbdb.
# Make sure.
check ovn-nbctl ls-add sw1
sleep 5
check_row_count Datapath_Binding 1

# Now resume ovn-northd.  Changes should catch up.
ovn_start_northd primary
wait_row_count Datapath_Binding 2

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD_WITHOUT_DP_GROUPS([
AT_SETUP([ovn -- northbound database reconnection])

ovn_start --backup-northd=none

# Check that ovn-northd is active, by verifying that it creates and
# destroys southbound datapaths as one would expect.
check_row_count Datapath_Binding 0
check ovn-nbctl --wait=sb ls-add sw0
check_row_count Datapath_Binding 1
lf=$(count_rows Logical_Flow)

# Make nbdb ovsdb-server drop connection from ovn-northd.
conn=$(as ovn-nb ovs-appctl -t ovsdb-server ovsdb-server/list-remotes|grep ^punix)
check as ovn-nb ovs-appctl -t ovsdb-server ovsdb-server/remove-remote "$conn"
conn2=punix:`pwd`/special.sock
check as ovn-nb ovs-appctl -t ovsdb-server ovsdb-server/add-remote "$conn2"

# ovn-northd won't respond to changes (because the nbdb connection dropped).
check ovn-nbctl --db="${conn2#p}" ls-add sw1
sleep 5
check_row_count Datapath_Binding 1
check_row_count Logical_Flow $lf

# Now re-enable the nbdb connection and observe ovn-northd catch up.
#
# It's important to check both Datapath_Binding and Logical_Flow because
# ovn-northd-ddlog implements them in different ways that might go wrong
# differently on reconnection.
check as ovn-nb ovs-appctl -t ovsdb-server ovsdb-server/add-remote "$conn"
wait_row_count Datapath_Binding 2
wait_row_count Logical_Flow $(expr 2 \* $lf)

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD_WITHOUT_DP_GROUPS([
AT_SETUP([ovn -- southbound database reconnection])

ovn_start --backup-northd=none

# Check that ovn-northd is active, by verifying that it creates and
# destroys southbound datapaths as one would expect.
check_row_count Datapath_Binding 0
check ovn-nbctl --wait=sb ls-add sw0
check_row_count Datapath_Binding 1
lf=$(count_rows Logical_Flow)

# Make sbdb ovsdb-server drop connection from ovn-northd.
conn=$(as ovn-sb ovs-appctl -t ovsdb-server ovsdb-server/list-remotes|grep ^punix)
check as ovn-sb ovs-appctl -t ovsdb-server ovsdb-server/remove-remote "$conn"
conn2=punix:`pwd`/special.sock
check as ovn-sb ovs-appctl -t ovsdb-server ovsdb-server/add-remote "$conn2"

# ovn-northd can't respond to changes (because the sbdb connection dropped).
check ovn-nbctl ls-add sw1
sleep 5
OVN_SB_DB=${conn2#p} check_row_count Datapath_Binding 1
OVN_SB_DB=${conn2#p} check_row_count Logical_Flow $lf

# Now re-enable the sbdb connection and observe ovn-northd catch up.
#
# It's important to check both Datapath_Binding and Logical_Flow because
# ovn-northd-ddlog implements them in different ways that might go wrong
# differently on reconnection.
check as ovn-sb ovs-appctl -t ovsdb-server ovsdb-server/add-remote "$conn"
wait_row_count Datapath_Binding 2
wait_row_count Logical_Flow $(expr 2 \* $lf)

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check Redirect Chassis propagation from NB to SB])
ovn_start

ovn-sbctl chassis-add gw1 geneve 127.0.0.1

ovn-nbctl lr-add R1
ovn-nbctl lrp-add R1 R1-S1 02:ac:10:01:00:01 172.16.1.1/24

ovn-nbctl ls-add S1
ovn-nbctl lsp-add S1 S1-R1
ovn-nbctl lsp-set-type S1-R1 router
ovn-nbctl lsp-set-addresses S1-R1 router
ovn-nbctl lsp-set-options S1-R1 router-port=R1-S1

check ovn-nbctl --wait=sb lrp-set-gateway-chassis R1-S1 gw1

ovn-nbctl lrp-set-redirect-type R1-S1 bridged
wait_row_count Port_Binding 1 logical_port=cr-R1-S1 options:redirect-type=bridged

ovn-nbctl lrp-set-redirect-type R1-S1 overlay
wait_row_count Port_Binding 1 logical_port=cr-R1-S1 options:redirect-type=overlay
AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check stateless dnat_and_snat rule])
ovn_start

ovn-sbctl chassis-add gw1 geneve 127.0.0.1

ovn-nbctl lr-add R1
ovn-nbctl lrp-add R1 R1-S1 02:ac:10:01:00:01 172.16.1.1/24

ovn-nbctl ls-add S1
ovn-nbctl lsp-add S1 S1-R1
ovn-nbctl lsp-set-type S1-R1 router
ovn-nbctl lsp-set-addresses S1-R1 router
ovn-nbctl lsp-set-options S1-R1 router-port=R1-S1

check ovn-nbctl --wait=sb lrp-set-gateway-chassis R1-S1 gw1

check_flow_matches() {
    local regex=$1 count=$2
    local found=$(grep -c "$1" r1-flows)
    echo "checking for $count flows matching $regex... found $found"
    AT_FAIL_IF([test $found != $count])
}

check_flow_match_sets() {
    ovn-sbctl dump-flows R1 > r1-flows
    AT_CAPTURE_FILE([r1-flows])

    for regex in lr_in_unsnat ct_snat ct_dnat ip4.dst= ip4.src= ip6.dst= ip6.src=; do
        check_flow_matches $regex $1
        shift
    done
}

echo
echo "IPv4: stateful"
ovn-nbctl --wait=sb lr-nat-add R1 dnat_and_snat  172.16.1.1 50.0.0.11
check_flow_match_sets 2 2 2 0 0 0 0
ovn-nbctl lr-nat-del R1 dnat_and_snat  172.16.1.1

echo
echo "IPv4: stateless"
ovn-nbctl --wait=sb --stateless lr-nat-add R1 dnat_and_snat  172.16.1.1 50.0.0.11
check_flow_match_sets 2 0 0 2 2 0 0
ovn-nbctl lr-nat-del R1 dnat_and_snat  172.16.1.1

echo
echo "IPv6: stateful"
ovn-nbctl --wait=sb lr-nat-add R1 dnat_and_snat fd01::1 fd11::2
check_flow_match_sets 2 2 2 0 0 0 0
ovn-nbctl lr-nat-del R1 dnat_and_snat  fd01::1

echo
echo "IPv6: stateless"
ovn-nbctl --wait=sb --stateless lr-nat-add R1 dnat_and_snat fd01::1 fd11::2
check_flow_match_sets 2 0 0 0 0 2 2

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check portrange dnat, snat and dnat_and_snat rules])
ovn_start

ovn-sbctl chassis-add gw1 geneve 127.0.0.1

ovn-nbctl lr-add R1
ovn-nbctl lrp-add R1 R1-S1 02:ac:10:01:00:01 172.16.1.1/24

ovn-nbctl ls-add S1
ovn-nbctl lsp-add S1 S1-R1
ovn-nbctl lsp-set-type S1-R1 router
ovn-nbctl lsp-set-addresses S1-R1 router
ovn-nbctl lsp-set-options S1-R1 router-port=R1-S1

check ovn-nbctl --wait=sb lrp-set-gateway-chassis R1-S1 gw1

uuid=`ovn-sbctl --columns=_uuid --bare find Port_Binding logical_port=cr-R1-S1`
echo "CR-LRP UUID is: " $uuid

# IPV4
ovn-nbctl --portrange lr-nat-add R1 dnat_and_snat  172.16.1.1 50.0.0.11 1-3000

AT_CAPTURE_FILE([sbflows])
OVS_WAIT_UNTIL([ovn-sbctl dump-flows R1 > sbflows && test 2 = `grep -c lr_in_unsnat sbflows`])
AT_CHECK([grep -c 'ct_snat.*3000' sbflows && grep -c 'ct_dnat.*3000' sbflows],
  [0], [1
1
])

ovn-nbctl lr-nat-del R1 dnat_and_snat  172.16.1.1
ovn-nbctl --wait=sb --portrange lr-nat-add R1 snat  172.16.1.1 50.0.0.11 1-3000

AT_CAPTURE_FILE([sbflows2])
OVS_WAIT_UNTIL([ovn-sbctl dump-flows R1 > sbflows2 && test 2 = `grep -c lr_in_unsnat sbflows`])
AT_CHECK([grep -c 'ct_snat.*3000' sbflows2 && grep -c 'ct_dnat.*3000' sbflows2],
  [1], [1
0
])

ovn-nbctl lr-nat-del R1 snat  172.16.1.1
ovn-nbctl --wait=sb --portrange --stateless lr-nat-add R1 dnat_and_snat  172.16.1.2 50.0.0.12 1-3000

AT_CAPTURE_FILE([sbflows3])
OVS_WAIT_UNTIL([ovn-sbctl dump-flows R1 > sbflows3 && test 3 = `grep -c lr_in_unsnat sbflows3`])
AT_CHECK([grep 'ct_[s]dnat.*172\.16\.1\.2.*3000' sbflows3], [1])

ovn-nbctl lr-nat-del R1 dnat_and_snat  172.16.1.1

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check allowed/disallowed external dnat, snat and dnat_and_snat rules])
ovn_start

# Logical network:
# 2 LRs - CR and DR
# CR ==> Centralized router
# DR ==> Distributed router
#
# DR is connected to S1 and CR is connected to S2

check ovn-sbctl chassis-add gw1 geneve 127.0.0.1

check ovn-nbctl lr-add DR
check ovn-nbctl lrp-add DR DR-S1 02:ac:10:01:00:01 172.16.1.1/24

cr_uuid=$(ovn-nbctl create Logical_Router name=CR)
check ovn-nbctl lrp-add CR CR-S2 02:ac:10:01:00:01 172.16.1.1/24

check ovn-nbctl ls-add S1
check ovn-nbctl lsp-add S1 S1-DR
check ovn-nbctl lsp-set-type S1-DR router
check ovn-nbctl lsp-set-addresses S1-DR router
check ovn-nbctl --wait=sb lsp-set-options S1-DR router-port=DR-S1

check ovn-nbctl ls-add S2
check ovn-nbctl lsp-add S2 S2-CR
check ovn-nbctl lsp-set-type S2-CR router
check ovn-nbctl lsp-set-addresses S2-CR router
check ovn-nbctl --wait=sb lsp-set-options S2-CR router-port=CR-S2

check ovn-nbctl lrp-set-gateway-chassis DR-S1 gw1

uuid=$(fetch_column Port_Binding _uuid logical_port=cr-DR-S1)
echo "CR-LRP UUID is: " $uuid

check ovn-nbctl set Logical_Router $cr_uuid options:chassis=gw1
check ovn-nbctl --wait=sb sync

ovn-nbctl create Address_Set name=allowed_range addresses=\"1.1.1.1\"
ovn-nbctl create Address_Set name=disallowed_range addresses=\"2.2.2.2\"

# SNAT with ALLOWED_IPs
check ovn-nbctl lr-nat-add DR snat  172.16.1.1 50.0.0.11
check ovn-nbctl lr-nat-update-ext-ip DR snat 50.0.0.11 allowed_range

check ovn-nbctl lr-nat-add CR snat  172.16.1.1 50.0.0.11
check ovn-nbctl lr-nat-update-ext-ip CR snat 50.0.0.11 allowed_range

check ovn-nbctl --wait=sb sync

ovn-sbctl dump-flows DR > drflows
AT_CAPTURE_FILE([drflows])
ovn-sbctl dump-flows CR > crflows
AT_CAPTURE_FILE([crflows])

AT_CHECK([
  grep -c lr_out_snat drflows
  grep -c lr_out_snat crflows
  grep lr_out_snat drflows | grep "ip4.src == 50.0.0.11" | grep -c "ip4.dst == $allowed_range"
  grep lr_out_snat crflows | grep "ip4.src == 50.0.0.11" | grep -c "ip4.dst == $allowed_range"], [0], [dnl
3
3
1
1
])

# SNAT with DISALLOWED_IPs
check ovn-nbctl lr-nat-del DR snat  50.0.0.11
check ovn-nbctl lr-nat-del CR snat  50.0.0.11

check ovn-nbctl lr-nat-add DR snat  172.16.1.1 50.0.0.11
check ovn-nbctl lr-nat-add CR snat  172.16.1.1 50.0.0.11

check ovn-nbctl --is-exempted lr-nat-update-ext-ip DR snat 50.0.0.11 disallowed_range
check ovn-nbctl --is-exempted lr-nat-update-ext-ip CR snat 50.0.0.11 disallowed_range

check ovn-nbctl --wait=sb sync

ovn-sbctl dump-flows DR > drflows2
AT_CAPTURE_FILE([drflows2])
ovn-sbctl dump-flows CR > crflows2
AT_CAPTURE_FILE([crflows2])

AT_CHECK([
  grep -c lr_out_snat drflows2
  grep -c lr_out_snat crflows2
  grep lr_out_snat drflows2 | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $disallowed_range" | grep -c "priority=162"
  grep lr_out_snat drflows2 | grep "ip4.src == 50.0.0.11" | grep -c "priority=161"
  grep lr_out_snat crflows2 | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $disallowed_range" | grep -c "priority=34"
  grep lr_out_snat crflows2 | grep "ip4.src == 50.0.0.11" | grep -c "priority=33"], [0], [dnl
4
4
1
1
1
1
])

# Stateful FIP with ALLOWED_IPs
check ovn-nbctl lr-nat-del DR snat  50.0.0.11
check ovn-nbctl lr-nat-del CR snat  50.0.0.11

check ovn-nbctl lr-nat-add DR dnat_and_snat  172.16.1.2 50.0.0.11
check ovn-nbctl lr-nat-add CR dnat_and_snat  172.16.1.2 50.0.0.11

check ovn-nbctl lr-nat-update-ext-ip DR dnat_and_snat 172.16.1.2 allowed_range
check ovn-nbctl lr-nat-update-ext-ip CR dnat_and_snat 172.16.1.2 allowed_range

ovn-nbctl show DR
ovn-sbctl dump-flows DR
ovn-nbctl show CR
ovn-sbctl dump-flows CR

OVS_WAIT_UNTIL([test 3 = `ovn-sbctl dump-flows DR | grep lr_out_snat | \
wc -l`])
OVS_WAIT_UNTIL([test 3 = `ovn-sbctl dump-flows CR | grep lr_out_snat | \
wc -l`])

AT_CHECK([ovn-sbctl dump-flows DR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $allowed_range" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows DR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $allowed_range" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $allowed_range" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $allowed_range" | wc -l], [0], [1
])

# Stateful FIP with DISALLOWED_IPs
ovn-nbctl lr-nat-del DR dnat_and_snat  172.16.1.2
ovn-nbctl lr-nat-del CR dnat_and_snat  172.16.1.2

ovn-nbctl lr-nat-add DR dnat_and_snat  172.16.1.2 50.0.0.11
ovn-nbctl lr-nat-add CR dnat_and_snat  172.16.1.2 50.0.0.11

ovn-nbctl --is-exempted lr-nat-update-ext-ip DR dnat_and_snat 172.16.1.2 disallowed_range
ovn-nbctl --is-exempted lr-nat-update-ext-ip CR dnat_and_snat 172.16.1.2 disallowed_range

ovn-nbctl show DR
ovn-sbctl dump-flows DR
ovn-nbctl show CR
ovn-sbctl dump-flows CR

OVS_WAIT_UNTIL([test 4 = `ovn-sbctl dump-flows DR | grep lr_out_snat | \
wc -l`])
OVS_WAIT_UNTIL([test 4 = `ovn-sbctl dump-flows CR | grep lr_out_snat | \
wc -l`])

AT_CHECK([ovn-sbctl dump-flows DR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $disallowed_range" | grep "priority=162" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows DR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $disallowed_range" | grep "priority=101" | wc -l], [0], [1
])

AT_CHECK([ovn-sbctl dump-flows CR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $disallowed_range" | grep "priority=34" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $disallowed_range" | grep "priority=101" | wc -l], [0], [1
])

# Stateless FIP with DISALLOWED_IPs
ovn-nbctl lr-nat-del DR dnat_and_snat  172.16.1.2
ovn-nbctl lr-nat-del CR dnat_and_snat  172.16.1.2

ovn-nbctl --stateless lr-nat-add DR dnat_and_snat  172.16.1.2 50.0.0.11
ovn-nbctl --stateless lr-nat-add CR dnat_and_snat  172.16.1.2 50.0.0.11

ovn-nbctl lr-nat-update-ext-ip DR dnat_and_snat 172.16.1.2 allowed_range
ovn-nbctl lr-nat-update-ext-ip CR dnat_and_snat 172.16.1.2 allowed_range

ovn-nbctl show DR
ovn-sbctl dump-flows DR

ovn-nbctl show CR
ovn-sbctl dump-flows CR

OVS_WAIT_UNTIL([test 3 = `ovn-sbctl dump-flows DR | grep lr_out_snat | \
wc -l`])
OVS_WAIT_UNTIL([test 3 = `ovn-sbctl dump-flows CR | grep lr_out_snat | \
wc -l`])

AT_CHECK([ovn-sbctl dump-flows DR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $allowed_range" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows DR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $allowed_range" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $allowed_range" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $allowed_range" | wc -l], [0], [1
])

# Stateful FIP with DISALLOWED_IPs
ovn-nbctl lr-nat-del DR dnat_and_snat  172.16.1.2
ovn-nbctl lr-nat-del CR dnat_and_snat  172.16.1.2

ovn-nbctl --stateless lr-nat-add DR dnat_and_snat  172.16.1.2 50.0.0.11
ovn-nbctl --stateless lr-nat-add CR dnat_and_snat  172.16.1.2 50.0.0.11

ovn-nbctl --is-exempted lr-nat-update-ext-ip DR dnat_and_snat 172.16.1.2 disallowed_range
ovn-nbctl --is-exempted lr-nat-update-ext-ip CR dnat_and_snat 172.16.1.2 disallowed_range

ovn-nbctl show DR
ovn-sbctl dump-flows DR
ovn-nbctl show CR
ovn-sbctl dump-flows CR

OVS_WAIT_UNTIL([test 4 = `ovn-sbctl dump-flows DR | grep lr_out_snat | \
wc -l`])
OVS_WAIT_UNTIL([test 4 = `ovn-sbctl dump-flows CR | grep lr_out_snat | \
wc -l`])

AT_CHECK([ovn-sbctl dump-flows DR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $disallowed_range" | grep "priority=162" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows DR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $disallowed_range" | grep "priority=101" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_out_snat | grep "ip4.src == 50.0.0.11" | grep "ip4.dst == $disallowed_range" | grep "priority=34" | wc -l], [0], [1
])
AT_CHECK([ovn-sbctl dump-flows CR | grep lr_in_dnat | grep "ip4.dst == 172.16.1.2" | grep "ip4.src == $disallowed_range" | grep "priority=101" | wc -l], [0], [1
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check Load balancer health check and Service Monitor sync])
ovn_start NORTHD_TYPE
check ovn-nbctl lb-add lb1 10.0.0.10:80 10.0.0.3:80,20.0.0.3:80

check ovn-nbctl --wait=sb set load_balancer . ip_port_mappings:10.0.0.3=sw0-p1
check ovn-nbctl --wait=sb set load_balancer . ip_port_mappings:20.0.0.3=sw1-p1

wait_row_count Service_Monitor 0

AT_CHECK([ovn-nbctl --wait=sb -- --id=@hc create \
Load_Balancer_Health_Check vip="10.0.0.10\:80" -- add Load_Balancer . \
health_check @hc | uuidfilt], [0], [<0>
])

wait_row_count Service_Monitor 0

AS_BOX([create logical switches and ports])
ovn-nbctl ls-add sw0
ovn-nbctl --wait=sb lsp-add sw0 sw0-p1 -- lsp-set-addresses sw0-p1 \
"00:00:00:00:00:03 10.0.0.3"

wait_row_count Service_Monitor 0

ovn-nbctl ls-add sw1
ovn-nbctl --wait=sb lsp-add sw1 sw1-p1 -- lsp-set-addresses sw1-p1 \
"02:00:00:00:00:03 20.0.0.3"

wait_row_count Service_Monitor 0

ovn-nbctl --wait=sb set load_balancer . ip_port_mappings:10.0.0.3=sw0-p1:10.0.0.2
wait_row_count Service_Monitor 1

ovn-nbctl --wait=sb set load_balancer . ip_port_mappings:20.0.0.3=sw1-p1:20.0.0.2
wait_row_count Service_Monitor 2

check ovn-nbctl --wait=sb ls-lb-add sw0 lb1

AT_CAPTURE_FILE([sbflows])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows | grep 'priority=120.*backends' | sed 's/table=..//'], 0, [dnl
  (ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(reg1 = 10.0.0.10; reg2[[0..15]] = 80; ct_lb(backends=10.0.0.3:80,20.0.0.3:80);)
])

AS_BOX([Delete the Load_Balancer_Health_Check])
ovn-nbctl --wait=sb clear load_balancer . health_check
wait_row_count Service_Monitor 0

AT_CAPTURE_FILE([sbflows2])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows2 | grep 'priority=120.*backends' | sed 's/table=..//'], [0],
[  (ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(reg1 = 10.0.0.10; reg2[[0..15]] = 80; ct_lb(backends=10.0.0.3:80,20.0.0.3:80);)
])

AS_BOX([Create the Load_Balancer_Health_Check again.])
ovn-nbctl --wait=sb -- --id=@hc create \
Load_Balancer_Health_Check vip="10.0.0.10\:80" -- add Load_Balancer . \
health_check @hc
wait_row_count Service_Monitor 2
check ovn-nbctl --wait=sb sync

ovn-sbctl dump-flows sw0 | grep backends | grep priority=120 > lflows.txt
AT_CHECK([cat lflows.txt | sed 's/table=..//'], [0], [dnl
  (ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(reg1 = 10.0.0.10; reg2[[0..15]] = 80; ct_lb(backends=10.0.0.3:80,20.0.0.3:80);)
])

AS_BOX([Get the uuid of both the service_monitor])
sm_sw0_p1=$(fetch_column Service_Monitor _uuid logical_port=sw0-p1)
sm_sw1_p1=$(fetch_column Service_Monitor _uuid logical_port=sw1-p1)

AT_CAPTURE_FILE([sbflows3])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows 3 | grep 'priority=120.*backends' | sed 's/table=..//'], [0],
[  (ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(reg1 = 10.0.0.10; reg2[[0..15]] = 80; ct_lb(backends=10.0.0.3:80,20.0.0.3:80);)
])

AS_BOX([Set the service monitor for sw1-p1 to offline])
check ovn-sbctl set service_monitor sw1-p1 status=offline
wait_row_count Service_Monitor 1 logical_port=sw1-p1 status=offline
check ovn-nbctl --wait=sb sync

AT_CAPTURE_FILE([sbflows4])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows4 | grep 'priority=120.*backends' | sed 's/table=..//'], [0],
[  (ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(reg1 = 10.0.0.10; reg2[[0..15]] = 80; ct_lb(backends=10.0.0.3:80);)
])

AS_BOX([Set the service monitor for sw0-p1 to offline])
ovn-sbctl set service_monitor $sm_sw0_p1 status=offline

wait_row_count Service_Monitor 1 logical_port=sw0-p1 status=offline
check ovn-nbctl --wait=sb sync

AT_CAPTURE_FILE([sbflows5])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows5 | grep 'priority=120.*backends'], 1)

AT_CAPTURE_FILE([sbflows6])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows6 | grep "ip4.dst == 10.0.0.10 && tcp.dst == 80" | grep priority=120 | sed 's/table=..//'], [0], [dnl
  (ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(drop;)
])

AS_BOX([Set the service monitor for sw0-p1 and sw1-p1 to online])
ovn-sbctl set service_monitor $sm_sw0_p1 status=online
ovn-sbctl set service_monitor $sm_sw1_p1 status=online

wait_row_count Service_Monitor 1 logical_port=sw1-p1 status=online
check ovn-nbctl --wait=sb sync

AT_CAPTURE_FILE([sbflows7])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows7 | grep backends | grep priority=120 | sed 's/table=..//'], 0,
[  (ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(reg1 = 10.0.0.10; reg2[[0..15]] = 80; ct_lb(backends=10.0.0.3:80,20.0.0.3:80);)
])

AS_BOX([Set the service monitor for sw1-p1 to error])
ovn-sbctl set service_monitor $sm_sw1_p1 status=error
wait_row_count Service_Monitor 1 logical_port=sw1-p1 status=error
check ovn-nbctl --wait=sb sync

ovn-sbctl dump-flows sw0 | grep "ip4.dst == 10.0.0.10 && tcp.dst == 80" \
| grep priority=120 > lflows.txt
AT_CHECK([cat lflows.txt | sed 's/table=..//'], [0], [dnl
  (ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(reg1 = 10.0.0.10; reg2[[0..15]] = 80; ct_lb(backends=10.0.0.3:80);)
])

AS_BOX([Add one more vip to lb1])
check ovn-nbctl set load_balancer . vip:10.0.0.40\\:1000=10.0.0.3:1000,20.0.0.3:80

AS_BOX([create health_check for new vip - 10.0.0.40])
AT_CHECK(
  [ovn-nbctl --wait=sb \
          -- --id=@hc create Load_Balancer_Health_Check vip=10.0.0.40\\:1000 \
          -- add Load_Balancer . health_check @hc | uuidfilt], [0], [<0>
])

# There should be totally 3 rows in service_monitor for -
#    * 10.0.0.3:80
#    * 10.0.0.3:1000
#    * 20.0.0.3:80

wait_row_count Service_Monitor 3
wait_row_count Service_Monitor 2 logical_port=sw0-p1
wait_row_count Service_Monitor 1 port=1000

AT_CAPTURE_FILE([sbflows9])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows9 | grep backends | grep priority=120 | sed 's/table=..//' | sort],
  0,
[  (ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(reg1 = 10.0.0.10; reg2[[0..15]] = 80; ct_lb(backends=10.0.0.3:80);)
  (ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.40 && tcp.dst == 1000), action=(reg1 = 10.0.0.40; reg2[[0..15]] = 1000; ct_lb(backends=10.0.0.3:1000);)
])

AS_BOX([Set the service monitor for sw1-p1 to online])
check ovn-sbctl set service_monitor sw1-p1 status=online

wait_row_count Service_Monitor 1 logical_port=sw1-p1 status=online
check ovn-nbctl --wait=sb sync

AT_CAPTURE_FILE([sbflows10])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows10 | grep backends | grep priority=120 | sed 's/table=..//' | sort],
  0,
[  (ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(reg1 = 10.0.0.10; reg2[[0..15]] = 80; ct_lb(backends=10.0.0.3:80,20.0.0.3:80);)
  (ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.40 && tcp.dst == 1000), action=(reg1 = 10.0.0.40; reg2[[0..15]] = 1000; ct_lb(backends=10.0.0.3:1000,20.0.0.3:80);)
])

AS_BOX([Associate lb1 to sw1])
check ovn-nbctl --wait=sb ls-lb-add sw1 lb1
AT_CAPTURE_FILE([sbflows11])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw1 | tee sbflows11 | grep backends | grep priority=120 | sed 's/table=..//' | sort],
  0, [dnl
  (ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(reg1 = 10.0.0.10; reg2[[0..15]] = 80; ct_lb(backends=10.0.0.3:80,20.0.0.3:80);)
  (ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.40 && tcp.dst == 1000), action=(reg1 = 10.0.0.40; reg2[[0..15]] = 1000; ct_lb(backends=10.0.0.3:1000,20.0.0.3:80);)
])

AS_BOX([Now create lb2 same as lb1 but udp protocol.])
check ovn-nbctl lb-add lb2 10.0.0.10:80 10.0.0.3:80,20.0.0.3:80 udp
check ovn-nbctl --wait=sb set load_balancer lb2 ip_port_mappings:10.0.0.3=sw0-p1:10.0.0.2
check ovn-nbctl --wait=sb set load_balancer lb2 ip_port_mappings:20.0.0.3=sw1-p1:20.0.0.2

AT_CHECK([ovn-nbctl -- --id=@hc create Load_Balancer_Health_Check vip="10.0.0.10\:80" -- add Load_Balancer lb2 health_check @hc | uuidfilt],
         [0], [<0>
])

check ovn-nbctl ls-lb-add sw0 lb2
check ovn-nbctl ls-lb-add sw1 lb2
check ovn-nbctl --wait=sb sync

wait_row_count Service_Monitor 5

AS_BOX([Change the svc_monitor_mac.])
# This should get reflected in service_monitor table rows.
check ovn-nbctl set NB_Global . options:svc_monitor_mac="fe:a0:65:a2:01:03"

wait_row_count Service_Monitor 5 src_mac='"fe:a0:65:a2:01:03"'

AS_BOX([Change the source ip for 10.0.0.3 backend ip in lb2])
check ovn-nbctl --wait=sb set load_balancer lb2 ip_port_mappings:10.0.0.3=sw0-p1:10.0.0.100

wait_row_count Service_Monitor 1 logical_port=sw0-p1 src_ip=10.0.0.100

ovn-nbctl --wait=sb lb-del lb1
wait_row_count Service_Monitor 2

ovn-nbctl --wait=sb lb-del lb2
wait_row_count Service_Monitor 0

check ovn-nbctl --reject lb-add lb3 10.0.0.10:80 10.0.0.3:80,20.0.0.3:80
check ovn-nbctl --wait=sb set load_balancer lb3 ip_port_mappings:10.0.0.3=sw0-p1:10.0.0.2
check ovn-nbctl --wait=sb set load_balancer lb3 ip_port_mappings:20.0.0.3=sw1-p1:20.0.0.2
wait_row_count Service_Monitor 0

check ovn-nbctl --wait=sb ls-lb-add sw0 lb3
AT_CHECK([ovn-nbctl --wait=sb -- --id=@hc create \
Load_Balancer_Health_Check vip="10.0.0.10\:80" -- add Load_Balancer lb3 \
health_check @hc | uuidfilt], [0], [<0>
])
wait_row_count Service_Monitor 2

# Set the service monitor for sw0-p1 and sw1-p1 to online
sm_sw0_p1=$(fetch_column Service_Monitor _uuid logical_port=sw0-p1)
sm_sw1_p1=$(fetch_column Service_Monitor _uuid logical_port=sw1-p1)

ovn-sbctl set service_monitor $sm_sw0_p1 status=offline
ovn-sbctl set service_monitor $sm_sw1_p1 status=offline

AT_CAPTURE_FILE([sbflows12])
OVS_WAIT_FOR_OUTPUT(
  [ovn-sbctl dump-flows sw0 | tee sbflows12 | grep "ip4.dst == 10.0.0.10 && tcp.dst == 80" | grep priority=120 | sed 's/table=..//'], [0], [dnl
  (ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(reg0 = 0; reject { outport <-> inport; next(pipeline=egress,table=5);};)
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- Load balancer VIP in NAT entries])
AT_SKIP_IF([test $HAVE_PYTHON = no])
ovn_start

ovn-nbctl lr-add lr0
ovn-nbctl lrp-add lr0 lr0-public 00:00:01:01:02:04 192.168.2.1/24
ovn-nbctl lrp-add lr0 lr0-join 00:00:01:01:02:04 10.10.0.1/24

ovn-nbctl set logical_router lr0 options:chassis=ch1

ovn-nbctl lb-add lb1 "192.168.2.1:8080" "10.0.0.4:8080"
ovn-nbctl lb-add lb2 "192.168.2.4:8080" "10.0.0.5:8080" udp
ovn-nbctl lb-add lb3 "192.168.2.5:8080" "10.0.0.6:8080"
ovn-nbctl lb-add lb4 "192.168.2.6:8080" "10.0.0.7:8080"

ovn-nbctl lr-lb-add lr0 lb1
ovn-nbctl lr-lb-add lr0 lb2
ovn-nbctl lr-lb-add lr0 lb3
ovn-nbctl lr-lb-add lr0 lb4

ovn-nbctl lr-nat-add lr0 snat 192.168.2.1 10.0.0.0/24
ovn-nbctl lr-nat-add lr0 dnat_and_snat 192.168.2.4 10.0.0.4
check ovn-nbctl --wait=sb lr-nat-add lr0 dnat 192.168.2.5 10.0.0.5

ovn-sbctl dump-flows lr0 > sbflows
AT_CAPTURE_FILE([sbflows])

OVS_WAIT_UNTIL([test 1 = $(grep lr_in_unsnat sbflows | \
grep "ip4 && ip4.dst == 192.168.2.1 && tcp && tcp.dst == 8080" -c) ])

AT_CHECK([test 1 = $(grep lr_in_unsnat sbflows | \
grep "ip4 && ip4.dst == 192.168.2.4 && udp && udp.dst == 8080" -c) ])

AT_CHECK([test 1 = $(grep lr_in_unsnat sbflows | \
grep "ip4 && ip4.dst == 192.168.2.5 && tcp && tcp.dst == 8080" -c) ])

AT_CHECK([test 0 = $(grep lr_in_unsnat sbflows | \
grep "ip4 && ip4.dst == 192.168.2.6 && tcp && tcp.dst == 8080" -c) ])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- DNAT force snat IP])
ovn_start

ovn-nbctl lr-add lr0
ovn-nbctl lrp-add lr0 lr0-public 00:00:01:01:02:04 192.168.2.1/24
ovn-nbctl lrp-add lr0 lr0-join 00:00:01:01:02:04 10.10.0.1/24

ovn-nbctl set logical_router lr0 options:chassis=ch1
ovn-nbctl lr-nat-add lr0 dnat 192.168.2.2 10.0.0.5
ovn-nbctl set logical_router lr0 options:dnat_force_snat_ip=192.168.2.3
ovn-nbctl --wait=sb sync

AT_CHECK([ovn-sbctl lflow-list lr0 | grep lr_in_unsnat | sort], [0], [dnl
  table=5 (lr_in_unsnat       ), priority=0    , match=(1), action=(next;)
  table=5 (lr_in_unsnat       ), priority=110  , match=(ip4 && ip4.dst == 192.168.2.3), action=(ct_snat;)
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check reconcile stale Datapath_Binding])
ovn_start

check ovn-nbctl lr-add lr
check ovn-nbctl lrp-add lr p 00:00:00:00:00:01 1.1.1.1/24
check ovn-nbctl --wait=sb sync

# Create a MAC_Binding referring the router datapath.
AT_CHECK([ovn-sbctl --id=@dp get datapath . -- create mac_binding logical_port=p ip=1.1.1.2 datapath=@dp | uuidfilt], [0], [<0>
])

check ovn-nbctl --wait=sb \
             -- lrp-del p \
             -- lr-del lr \
             -- lr-add lr \
             -- lrp-add lr p 00:00:00:00:00:01 1.1.1.1/24

check_row_count Datapath_Binding 1

nb_uuid=$(ovn-sbctl get Datapath_Binding . external_ids:logical-router)
lr_uuid=\"$(ovn-nbctl get Logical_Router . _uuid)\"
echo nb_uuid="$nb_uuid" lr_uuid="$lr_uuid"
AT_CHECK([test "${nb_uuid}" = "${lr_uuid}"])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check reconcile stale tunnel keys])
ovn_start

ovn-nbctl ls-add ls1
ovn-nbctl ls-add ls2
ovn-nbctl lsp-add ls1 lsp1
ovn-nbctl lsp-add ls2 lsp2
AT_CHECK([ovn-nbctl --wait=sb sync], [0])

# Ports are bound on different datapaths so it's expected that they both
# get tunnel_key == 1.
check_column 1 Port_Binding tunnel_key logical_port=lsp1
check_column 1 Port_Binding tunnel_key logical_port=lsp2

ovn-nbctl lsp-del lsp2 -- lsp-add ls1 lsp2
AT_CHECK([ovn-nbctl --wait=sb sync], [0])

check_column 1 Port_Binding tunnel_key logical_port=lsp1
check_column 2 Port_Binding tunnel_key logical_port=lsp2

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check reconcile stale Ha_Chassis_Group])
ovn_start

ovn-nbctl ls-add ls1
ovn-nbctl ls-add ls2
ovn-nbctl lsp-add ls1 lsp1
ovn-nbctl lsp-add ls2 lsp2

ovn-nbctl lsp-set-type lsp2 external

ovn-nbctl ha-chassis-group-add chg1
ovn-nbctl ha-chassis-group-add-chassis chg1 chassis-1 30

chg1_uuid=$(ovn-nbctl --bare --columns _uuid list Ha_Chassis_Group .)
ovn-nbctl set logical_switch_port lsp2 ha_chassis_group=${chg1_uuid}
AT_CHECK([ovn-nbctl --wait=sb sync], [0])

# Move lsp2 from ls2 to ls1. This should also remove the SB HA_Chassis_Group
# record.
ovn-nbctl lsp-del lsp2 -- lsp-add ls1 lsp2
AT_CHECK([ovn-nbctl --wait=sb sync], [0])

check_row_count HA_Chassis_Group 0

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check NB/SB Port_Group translation (lsp add/del)])
ovn_start

ovn-nbctl ls-add ls1
ovn-nbctl ls-add ls2
ovn-nbctl lsp-add ls1 lsp1
ovn-nbctl lsp-add ls2 lsp2
ovn-nbctl --wait=sb sync
ls1_key=$(ovn-sbctl --columns tunnel_key --bare list Datapath_Binding ls1)
ls2_key=$(ovn-sbctl --columns tunnel_key --bare list Datapath_Binding ls2)

# Add an empty port group. This should generate no entry in the SB.
ovn-nbctl --wait=sb pg-add pg_test
AT_CHECK([test 0 = $(ovn-sbctl --columns _uuid list Port_Group | grep uuid -c)])

# Add lsp1 to the port group. This should generate an entry in the SB only
# for ls1.
ovn-nbctl --wait=sb pg-set-ports pg_test lsp1
AT_CHECK([test 1 = $(ovn-sbctl --columns _uuid list Port_Group | grep uuid -c)])
AT_CHECK([ovn-sbctl --columns ports --bare find Port_Group name=${ls1_key}_pg_test], [0], [dnl
lsp1
])

# Add lsp2 to the port group. This should generate a new entry in the SB, for
# ls2.
ovn-nbctl --wait=sb pg-set-ports pg_test lsp1 lsp2
AT_CHECK([test 2 = $(ovn-sbctl --columns _uuid list Port_Group | grep uuid -c)])
AT_CHECK([ovn-sbctl --columns ports --bare find Port_Group name=${ls1_key}_pg_test], [0], [dnl
lsp1
])
AT_CHECK([ovn-sbctl --columns ports --bare find Port_Group name=${ls2_key}_pg_test], [0], [dnl
lsp2
])

# Remove lsp1 from the port group. The SB Port_Group for ls1 should be
# removed.
ovn-nbctl --wait=sb pg-set-ports pg_test lsp2
AT_CHECK([test 1 = $(ovn-sbctl --columns _uuid list Port_Group | grep uuid -c)])
AT_CHECK([ovn-sbctl --columns ports --bare find Port_Group name=${ls2_key}_pg_test], [0], [dnl
lsp2
])

# Remove lsp2 from the port group. All SB Port_Groups should be purged.
ovn-nbctl --wait=sb clear Port_Group pg_test ports
AT_CHECK([test 0 = $(ovn-sbctl --columns _uuid list Port_Group | grep uuid -c)])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check NB/SB Port_Group translation (ls del)])
ovn_start

ovn-nbctl ls-add ls1
ovn-nbctl ls-add ls2
ovn-nbctl lsp-add ls1 lsp1
ovn-nbctl lsp-add ls2 lsp2
ovn-nbctl --wait=sb sync
ls1_key=$(ovn-sbctl --columns tunnel_key --bare list Datapath_Binding ls1)
ls2_key=$(ovn-sbctl --columns tunnel_key --bare list Datapath_Binding ls2)

# Add lsp1 & lsp2 to a port group. This should generate two entries in the
# SB (one per logical switch).
ovn-nbctl --wait=sb pg-add pg_test lsp1 lsp2
wait_row_count Port_Group 2
check_row_count Port_Group 1 name=${ls1_key}_pg_test
check_row_count Port_Group 1 name=${ls2_key}_pg_test

# Delete logical switch ls1. This should remove the associated SB Port_Group.
ovn-nbctl --wait=sb ls-del ls1
wait_row_count Port_Group 1
check_row_count Port_Group 1 name=${ls2_key}_pg_test

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check router ARP/NS responder])
ovn_start

ovn-sbctl chassis-add ch geneve 127.0.0.1

ovn-nbctl lr-add lr
ovn-nbctl lrp-add lr lrp-public 00:00:00:00:01:00 43.43.43.1/24
ovn-nbctl lrp-add lr lrp 00:00:00:00:00:01 42.42.42.1/24

ovn-nbctl ls-add ls
ovn-nbctl lsp-add ls ls-rp
ovn-nbctl lsp-set-type ls-rp router
ovn-nbctl lsp-set-addresses ls-rp router
ovn-nbctl lsp-set-options ls-rp router-port=lrp
ovn-nbctl lsp-add ls ls-vm

ovn-nbctl set logical_router lr options:chassis=ch
ovn-nbctl lr-nat-add lr dnat_and_snat 43.43.43.2 42.42.42.2
ovn-nbctl lr-nat-add lr dnat 43.43.43.3 42.42.42.3
ovn-nbctl lr-nat-add lr dnat_and_snat 43.43.43.4 42.42.42.4 ls-vm 00:00:00:00:00:02
ovn-nbctl lr-nat-add lr snat 43.43.43.150 43.43.43.50
ovn-nbctl lr-nat-add lr snat 43.43.43.150 43.43.43.51

ovn-nbctl lb-add lb1 "192.168.2.1:8080" "10.0.0.4:8080"
ovn-nbctl lb-add lb2 "192.168.2.4:8080" "10.0.0.5:8080" udp
ovn-nbctl lb-add lb3 "192.168.2.5:8080" "10.0.0.6:8080"
ovn-nbctl lb-add lb4 "192.168.2.6:8080" "10.0.0.7:8080"
ovn-nbctl lb-add lb5 "fe80::200:ff:fe00:101:8080" "fe02::200:ff:fe00:101:8080"
ovn-nbctl lb-add lb5 "fe80::200:ff:fe00:102:8080" "fe02::200:ff:fe00:102:8080"

ovn-nbctl lr-lb-add lr lb1
ovn-nbctl lr-lb-add lr lb2
ovn-nbctl lr-lb-add lr lb3
ovn-nbctl lr-lb-add lr lb4
ovn-nbctl lr-lb-add lr lb5

ovn-nbctl --wait=sb sync

# Ingress router port ETH address is stored in lr_in_admission.
AT_CHECK([ovn-sbctl lflow-list | grep -E "lr_in_admission.*xreg0\[[0..47\]]" | sort], [0], [dnl
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.dst == 00:00:00:00:00:01 && inport == "lrp"), dnl
action=(xreg0[[0..47]] = 00:00:00:00:00:01; next;)
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.dst == 00:00:00:00:01:00 && inport == "lrp-public"), dnl
action=(xreg0[[0..47]] = 00:00:00:00:01:00; next;)
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.mcast && inport == "lrp"), dnl
action=(xreg0[[0..47]] = 00:00:00:00:00:01; next;)
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.mcast && inport == "lrp-public"), dnl
action=(xreg0[[0..47]] = 00:00:00:00:01:00; next;)
])

# Ingress router port ETH address is used for ARP reply/NA in lr_in_ip_input.
AT_CHECK([ovn-sbctl lflow-list | grep -E "lr_in_ip_input.*priority=90" | grep "arp\|nd" | sort], [0], [dnl
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.150), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.2), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.3), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.4), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp" && arp.op == 1 && arp.tpa == 42.42.42.1 && arp.spa == 42.42.42.0/24), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp" && arp.op == 1 && arp.tpa == { 192.168.2.1, 192.168.2.4, 192.168.2.5, 192.168.2.6 }), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp" && ip6.dst == {fe80::200:ff:fe00:1, ff02::1:ff00:1} && nd_ns && nd.target == fe80::200:ff:fe00:1), dnl
action=(nd_na_router { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:1; nd.target = fe80::200:ff:fe00:1; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp" && nd_ns && nd.target == fe80::200:ff:fe00:101:8080), dnl
action=(nd_na { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:101:8080; nd.target = fe80::200:ff:fe00:101:8080; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp" && nd_ns && nd.target == fe80::200:ff:fe00:102:8080), dnl
action=(nd_na { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:102:8080; nd.target = fe80::200:ff:fe00:102:8080; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.1 && arp.spa == 43.43.43.0/24), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == { 192.168.2.1, 192.168.2.4, 192.168.2.5, 192.168.2.6 }), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp-public" && ip6.dst == {fe80::200:ff:fe00:100, ff02::1:ff00:100} && nd_ns && nd.target == fe80::200:ff:fe00:100), dnl
action=(nd_na_router { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:100; nd.target = fe80::200:ff:fe00:100; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp-public" && nd_ns && nd.target == fe80::200:ff:fe00:101:8080), dnl
action=(nd_na { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:101:8080; nd.target = fe80::200:ff:fe00:101:8080; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp-public" && nd_ns && nd.target == fe80::200:ff:fe00:102:8080), dnl
action=(nd_na { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:102:8080; nd.target = fe80::200:ff:fe00:102:8080; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
])

# xreg0[0..47] isn't used anywhere else.
AT_CHECK([ovn-sbctl lflow-list | grep "xreg0\[[0..47\]]" | grep -vE 'lr_in_admission|lr_in_ip_input'], [1], [])

# Test chassis redirect port.
ovn-nbctl remove logical_router lr options chassis
ovn-nbctl lrp-set-gateway-chassis lrp-public ch
ovn-nbctl --wait=sb sync

# Ingress router port ETH address is stored in lr_in_admission.
AT_CHECK([ovn-sbctl lflow-list | grep -E "lr_in_admission.*xreg0\[[0..47\]]" | sort], [0], [dnl
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.dst == 00:00:00:00:00:01 && inport == "lrp"), dnl
action=(xreg0[[0..47]] = 00:00:00:00:00:01; next;)
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.dst == 00:00:00:00:00:02 && inport == "lrp-public" && is_chassis_resident("ls-vm")), dnl
action=(xreg0[[0..47]] = 00:00:00:00:01:00; next;)
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.dst == 00:00:00:00:01:00 && inport == "lrp-public" && is_chassis_resident("cr-lrp-public")), dnl
action=(xreg0[[0..47]] = 00:00:00:00:01:00; next;)
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.mcast && inport == "lrp"), dnl
action=(xreg0[[0..47]] = 00:00:00:00:00:01; next;)
  table=0 (lr_in_admission    ), priority=50   , dnl
match=(eth.mcast && inport == "lrp-public"), dnl
action=(xreg0[[0..47]] = 00:00:00:00:01:00; next;)
])

# Ingress router port is used for ARP reply/NA in lr_in_ip_input.
# xxreg0[0..47] is used unless external_mac is set.
# Priority 90 flows (per router).
AT_CHECK([ovn-sbctl lflow-list | grep -E "lr_in_ip_input.*priority=90" | grep "arp\|nd" | sort], [0], [dnl
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.150), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.2), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.3), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(arp.op == 1 && arp.tpa == 43.43.43.4), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp" && arp.op == 1 && arp.tpa == 42.42.42.1 && arp.spa == 42.42.42.0/24), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp" && arp.op == 1 && arp.tpa == { 192.168.2.1, 192.168.2.4, 192.168.2.5, 192.168.2.6 }), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp" && ip6.dst == {fe80::200:ff:fe00:1, ff02::1:ff00:1} && nd_ns && nd.target == fe80::200:ff:fe00:1), dnl
action=(nd_na_router { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:1; nd.target = fe80::200:ff:fe00:1; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp" && nd_ns && nd.target == fe80::200:ff:fe00:101:8080), dnl
action=(nd_na { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:101:8080; nd.target = fe80::200:ff:fe00:101:8080; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp" && nd_ns && nd.target == fe80::200:ff:fe00:102:8080), dnl
action=(nd_na { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:102:8080; nd.target = fe80::200:ff:fe00:102:8080; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.1 && arp.spa == 43.43.43.0/24), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == { 192.168.2.1, 192.168.2.4, 192.168.2.5, 192.168.2.6 } && is_chassis_resident("cr-lrp-public")), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp-public" && ip6.dst == {fe80::200:ff:fe00:100, ff02::1:ff00:100} && nd_ns && nd.target == fe80::200:ff:fe00:100 && is_chassis_resident("cr-lrp-public")), dnl
action=(nd_na_router { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:100; nd.target = fe80::200:ff:fe00:100; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp-public" && nd_ns && nd.target == fe80::200:ff:fe00:101:8080 && is_chassis_resident("cr-lrp-public")), dnl
action=(nd_na { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:101:8080; nd.target = fe80::200:ff:fe00:101:8080; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
  table=3 (lr_in_ip_input     ), priority=90   , dnl
match=(inport == "lrp-public" && nd_ns && nd.target == fe80::200:ff:fe00:102:8080 && is_chassis_resident("cr-lrp-public")), dnl
action=(nd_na { eth.src = xreg0[[0..47]]; ip6.src = fe80::200:ff:fe00:102:8080; nd.target = fe80::200:ff:fe00:102:8080; nd.tll = xreg0[[0..47]]; outport = inport; flags.loopback = 1; output; };)
])

# Priority 91 drop flows (per distributed gw port), if port is not resident.
AT_CHECK([ovn-sbctl lflow-list | grep -E "lr_in_ip_input.*priority=91" | grep "arp\|nd" | sort], [0], [dnl
  table=3 (lr_in_ip_input     ), priority=91   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.150), action=(drop;)
  table=3 (lr_in_ip_input     ), priority=91   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.2), dnl
action=(drop;)
  table=3 (lr_in_ip_input     ), priority=91   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.3), dnl
action=(drop;)
  table=3 (lr_in_ip_input     ), priority=91   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.4), dnl
action=(drop;)
])

# Priority 92 ARP/NS responders (per distributed gw port), if port is resident.
AT_CHECK([ovn-sbctl lflow-list | grep -E "lr_in_ip_input.*priority=92" | grep "arp\|nd" | sort], [0], [dnl
  table=3 (lr_in_ip_input     ), priority=92   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.150 && is_chassis_resident("cr-lrp-public")), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=92   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.2 && is_chassis_resident("cr-lrp-public")), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=92   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.3 && is_chassis_resident("cr-lrp-public")), dnl
action=(eth.dst = eth.src; eth.src = xreg0[[0..47]]; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = xreg0[[0..47]]; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
  table=3 (lr_in_ip_input     ), priority=92   , dnl
match=(inport == "lrp-public" && arp.op == 1 && arp.tpa == 43.43.43.4 && is_chassis_resident("ls-vm")), dnl
action=(eth.dst = eth.src; eth.src = 00:00:00:00:00:02; arp.op = 2; /* ARP reply */ arp.tha = arp.sha; arp.sha = 00:00:00:00:00:02; arp.tpa <-> arp.spa; outport = inport; flags.loopback = 1; output;)
])

# xreg0[0..47] isn't used anywhere else.
AT_CHECK([ovn-sbctl lflow-list | grep "xreg0\[[0..47\]]" | grep -vE 'lr_in_admission|lr_in_ip_input'], [1], [])

AT_CLEANUP
])

# This test case tests that when a logical switch has load balancers associated
# (with VIPs configured), the below logical flow is added by ovn-northd.
# table=0 (ls_out_pre_lb      ), priority=100  , match=(ip), action=(reg0[[0]] = 1; next;)
# This test case is added for the BZ -
# https://bugzilla.redhat.com/show_bug.cgi?id=1849162
#
# ovn-northd was not adding the above lflow if the last load balancer associated
# to the logical switch doesn't have the VIP configured even if other load
# balancers before the last one in the last have VIPs configured.
# So make sure that the above lflow is added even if one load balancer has VIP
# associated.

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- Load balancer - missing ls_out_pre_lb flows])
ovn_start

ovn-nbctl ls-add sw0
ovn-nbctl lsp-add sw0 sw0-p1

ovn-nbctl lb-add lb1 "10.0.0.10" "10.0.0.3"
ovn-nbctl lb-add lb2 "10.0.0.11" "10.0.0.4"

ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
])

ovn-nbctl ls-lb-add sw0 lb1
ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
  table=0 (ls_out_pre_lb      ), priority=100  , match=(ip), action=(reg0[[2]] = 1; next;)
])

ovn-nbctl ls-lb-add sw0 lb2
ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
  table=0 (ls_out_pre_lb      ), priority=100  , match=(ip), action=(reg0[[2]] = 1; next;)
])

lb1_uuid=$(ovn-nbctl --bare --columns _uuid find load_balancer name=lb1)
lb2_uuid=$(ovn-nbctl --bare --columns _uuid find load_balancer name=lb2)

ovn-nbctl clear load_balancer $lb1_uuid vips
ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
  table=0 (ls_out_pre_lb      ), priority=100  , match=(ip), action=(reg0[[2]] = 1; next;)
])

ovn-nbctl clear load_balancer $lb2_uuid vips
ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
])

ovn-nbctl set load_balancer $lb1_uuid vips:"10.0.0.10"="10.0.0.3"
ovn-nbctl set load_balancer $lb2_uuid vips:"10.0.0.11"="10.0.0.4"

ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
  table=0 (ls_out_pre_lb      ), priority=100  , match=(ip), action=(reg0[[2]] = 1; next;)
])

# Now reverse the order of clearing the vip.
ovn-nbctl clear load_balancer $lb2_uuid vips
ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
  table=0 (ls_out_pre_lb      ), priority=100  , match=(ip), action=(reg0[[2]] = 1; next;)
])

ovn-nbctl clear load_balancer $lb1_uuid vips
ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep "ls_out_pre_lb.*priority=100" | grep reg0 | sort], [0], [dnl
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- ignore_lsp_down])
ovn_start

ovn-nbctl ls-add sw0
ovn-nbctl lsp-add sw0 sw0-p1 -- lsp-set-addresses sw0-p1 "aa:aa:aa:aa:aa:aa 10.0.0.1"

ovn-nbctl --wait=sb sync
AT_CHECK([ovn-sbctl lflow-list | grep arp | grep 10\.0\.0\.1], [1], [ignore])

ovn-nbctl --wait=sb set NB_Global . options:ignore_lsp_down=true
AT_CHECK([ovn-sbctl lflow-list | grep arp | grep 10\.0\.0\.1], [0], [ignore])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn-northd -- reject ACL])
ovn_start

check ovn-nbctl ls-add sw0
check ovn-nbctl lsp-add sw0 sw0-p1

check ovn-nbctl ls-add sw1
check ovn-nbctl lsp-add sw1 sw1-p1

check ovn-nbctl pg-add pg0 sw0-p1 sw1-p1
check ovn-nbctl acl-add pg0 from-lport 1002 "inport == @pg0 && ip4 && tcp && tcp.dst == 80" reject
check ovn-nbctl acl-add pg0 to-lport 1003 "outport == @pg0 && ip6 && udp" reject

check ovn-nbctl --wait=sb sync

AS_BOX([1])

ovn-sbctl dump-flows sw0 > sw0flows
AT_CAPTURE_FILE([sw0flows])
ovn-sbctl dump-flows sw1 > sw1flows
AT_CAPTURE_FILE([sw1flows])

AT_CHECK(
  [grep -E 'ls_(in|out)_acl' sw0flows sw1flows | grep pg0 | sort], [0], [dnl
sw0flows:  table=4 (ls_out_acl         ), priority=2003 , match=(outport == @pg0 && ip6 && udp), action=(reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=ingress,table=22); };)
sw0flows:  table=9 (ls_in_acl          ), priority=2002 , match=(inport == @pg0 && ip4 && tcp && tcp.dst == 80), action=(reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=egress,table=5); };)
sw1flows:  table=4 (ls_out_acl         ), priority=2003 , match=(outport == @pg0 && ip6 && udp), action=(reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=ingress,table=22); };)
sw1flows:  table=9 (ls_in_acl          ), priority=2002 , match=(inport == @pg0 && ip4 && tcp && tcp.dst == 80), action=(reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=egress,table=5); };)
])

AS_BOX([2])

ovn-nbctl --wait=sb acl-add pg0 to-lport 1002 "outport == @pg0 && ip4 && udp" reject

ovn-sbctl dump-flows sw0 > sw0flows2
AT_CAPTURE_FILE([sw0flows2])
ovn-sbctl dump-flows sw1 > sw1flows2
AT_CAPTURE_FILE([sw1flows2])

AT_CHECK([grep "ls_out_acl" sw0flows2 sw1flows2 | grep pg0 | sort], [0], [dnl
sw0flows2:  table=4 (ls_out_acl         ), priority=2002 , match=(outport == @pg0 && ip4 && udp), action=(reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=ingress,table=22); };)
sw0flows2:  table=4 (ls_out_acl         ), priority=2003 , match=(outport == @pg0 && ip6 && udp), action=(reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=ingress,table=22); };)
sw1flows2:  table=4 (ls_out_acl         ), priority=2002 , match=(outport == @pg0 && ip4 && udp), action=(reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=ingress,table=22); };)
sw1flows2:  table=4 (ls_out_acl         ), priority=2003 , match=(outport == @pg0 && ip6 && udp), action=(reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=ingress,table=22); };)
])

AS_BOX([3])

ovn-nbctl --wait=sb acl-add pg0 to-lport 1001 "outport == @pg0 && ip" allow-related

ovn-sbctl dump-flows sw0 > sw0flows3
AT_CAPTURE_FILE([sw0flows3])
ovn-sbctl dump-flows sw1 > sw1flows3
AT_CAPTURE_FILE([sw1flows3])

AT_CHECK([grep "ls_out_acl" sw0flows3 sw1flows3 | grep pg0 | sort], [0], [dnl
sw0flows3:  table=4 (ls_out_acl         ), priority=2001 , match=(reg0[[7]] == 1 && (outport == @pg0 && ip)), action=(reg0[[1]] = 1; next;)
sw0flows3:  table=4 (ls_out_acl         ), priority=2001 , match=(reg0[[8]] == 1 && (outport == @pg0 && ip)), action=(next;)
sw0flows3:  table=4 (ls_out_acl         ), priority=2002 , match=((reg0[[10]] == 1) && outport == @pg0 && ip4 && udp), action=(ct_commit { ct_label.blocked = 1; };  reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=ingress,table=22); };)
sw0flows3:  table=4 (ls_out_acl         ), priority=2002 , match=((reg0[[9]] == 1) && outport == @pg0 && ip4 && udp), action=(reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=ingress,table=22); };)
sw0flows3:  table=4 (ls_out_acl         ), priority=2003 , match=((reg0[[10]] == 1) && outport == @pg0 && ip6 && udp), action=(ct_commit { ct_label.blocked = 1; };  reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=ingress,table=22); };)
sw0flows3:  table=4 (ls_out_acl         ), priority=2003 , match=((reg0[[9]] == 1) && outport == @pg0 && ip6 && udp), action=(reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=ingress,table=22); };)
sw1flows3:  table=4 (ls_out_acl         ), priority=2001 , match=(reg0[[7]] == 1 && (outport == @pg0 && ip)), action=(reg0[[1]] = 1; next;)
sw1flows3:  table=4 (ls_out_acl         ), priority=2001 , match=(reg0[[8]] == 1 && (outport == @pg0 && ip)), action=(next;)
sw1flows3:  table=4 (ls_out_acl         ), priority=2002 , match=((reg0[[10]] == 1) && outport == @pg0 && ip4 && udp), action=(ct_commit { ct_label.blocked = 1; };  reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=ingress,table=22); };)
sw1flows3:  table=4 (ls_out_acl         ), priority=2002 , match=((reg0[[9]] == 1) && outport == @pg0 && ip4 && udp), action=(reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=ingress,table=22); };)
sw1flows3:  table=4 (ls_out_acl         ), priority=2003 , match=((reg0[[10]] == 1) && outport == @pg0 && ip6 && udp), action=(ct_commit { ct_label.blocked = 1; };  reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=ingress,table=22); };)
sw1flows3:  table=4 (ls_out_acl         ), priority=2003 , match=((reg0[[9]] == 1) && outport == @pg0 && ip6 && udp), action=(reg0 = 0; reject { /* eth.dst <-> eth.src; ip.dst <-> ip.src; is implicit. */ outport <-> inport; next(pipeline=ingress,table=22); };)
])
AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- ACL fair Meters])
AT_KEYWORDS([acl log meter fair])
ovn_start

check ovn-nbctl ls-add sw0
check ovn-nbctl ls-add sw1
check ovn-nbctl lsp-add sw0 sw0-p1 -- lsp-set-addresses sw0-p1 "50:54:00:00:00:01 10.0.0.11"
check ovn-nbctl lsp-add sw0 sw0-p2 -- lsp-set-addresses sw0-p2 "50:54:00:00:00:02 10.0.0.12"
check ovn-nbctl lsp-add sw1 sw1-p3 -- lsp-set-addresses sw1-p3 "50:54:00:00:00:03 10.0.0.13"
check ovn-nbctl pg-add pg0 sw0-p1 sw0-p2 sw1-p3

check ovn-nbctl meter-add meter_me drop 1 pktps
nb_meter_uuid=$(fetch_column nb:Meter _uuid name=meter_me)

check ovn-nbctl acl-add sw0 to-lport 1002 'outport == "sw0-p1" && ip4.src == 10.0.0.12' allow
check ovn-nbctl acl-add sw0 to-lport 1002 'outport == "sw0-p1" && ip4.src == 10.0.0.13' allow
check ovn-nbctl acl-add pg0 to-lport 1002 'outport == "pg0" && ip4.src == 10.0.0.11' drop

acl1=$(ovn-nbctl --bare --column _uuid,match find acl | grep -B1 '10.0.0.12' | head -1)
acl2=$(ovn-nbctl --bare --column _uuid,match find acl | grep -B1 '10.0.0.13' | head -1)
acl3=$(ovn-nbctl --bare --column _uuid,match find acl | grep -B1 '10.0.0.11' | head -1)
check ovn-nbctl set acl $acl1 log=true severity=alert meter=meter_me name=acl_one
check ovn-nbctl set acl $acl2 log=true severity=info  meter=meter_me name=acl_two
check ovn-nbctl set acl $acl3 log=true severity=info  meter=meter_me name=acl_three
check ovn-nbctl --wait=sb sync

check_row_count nb:meter 1
check_column meter_me nb:meter name

check_acl_lflow() {
    acl_log_name=$1
    meter_name=$2
    ls=$3
    echo "checking that logical flow for acl log $acl_log_name has $meter_name"
    ovn-sbctl dump-flows $ls > sbflows
    AT_CAPTURE_FILE([sbflows])
    AT_CHECK([grep ls_out_acl sbflows | \
              grep "\"${acl_log_name}\"" | \
              grep -c "meter=\"${meter_name}\""], [0], [1
])
}

check_meter_by_name() {
    [test "$1" = "NOT"] && { expected_count=0; shift; } || expected_count=1
    for meter_name in $* ; do
        # echo checking for $expected_count $meter_name in sb meter table
        check_row_count meter $expected_count name=$meter_name
    done
}

AS_BOX([Make sure 'fair' value properly affects the Meters in SB])
check_meter_by_name meter_me
check_meter_by_name NOT meter_me__${acl1} meter_me__${acl2} meter_me__${acl3}

check ovn-nbctl --wait=sb set Meter $nb_meter_uuid fair=true
check_meter_by_name meter_me meter_me__${acl1} meter_me__${acl2} meter_me__${acl3}

check ovn-nbctl --wait=sb set Meter $nb_meter_uuid fair=false
check_meter_by_name meter_me
check_meter_by_name NOT meter_me__${acl1} meter_me__${acl2} meter_me__${acl3}

check ovn-nbctl --wait=sb set Meter $nb_meter_uuid fair=true
check_meter_by_name meter_me meter_me__${acl1} meter_me__${acl2} meter_me__${acl3}

AS_BOX([Change template meter and make sure that is reflected on acl meters])
template_band=$(fetch_column nb:meter bands name=meter_me)
check ovn-nbctl --wait=sb set meter_band $template_band rate=123
AS_BOX([Make sure that every Meter_Band has the right rate.])
# ovn-northd creates 4 identical Meter_Band rows, all identical;
# ovn-northd-ddlog creates just 1.  It doesn't matter, they work just
# as well.)
n_meter_bands=$(count_rows meter_band)
AT_FAIL_IF([test "$n_meter_bands" != 1 && test "$n_meter_bands" != 4])
check_row_count meter_band $n_meter_bands rate=123

AS_BOX([Check meter in logical flows for acl logs])
check_acl_lflow acl_one meter_me__${acl1} sw0
check_acl_lflow acl_two meter_me__${acl2} sw0
check_acl_lflow acl_three meter_me__${acl3} sw0
check_acl_lflow acl_three meter_me__${acl3} sw1

AS_BOX([Stop using meter for acl1])
check ovn-nbctl --wait=sb clear acl $acl1 meter
check_meter_by_name meter_me meter_me__${acl2}
check_meter_by_name NOT meter_me__${acl1}
check_acl_lflow acl_two meter_me__${acl2} sw0
check_acl_lflow acl_three meter_me__${acl3} sw0
check_acl_lflow acl_three meter_me__${acl3} sw1

AS_BOX([Remove template Meter should remove all others as well])
check ovn-nbctl --wait=sb meter-del meter_me
check_row_count meter 0
AS_BOX([Check that logical flow remains but uses non-unique meter])
check_acl_lflow acl_two meter_me sw0
check_acl_lflow acl_three meter_me sw0
check_acl_lflow acl_three meter_me sw1

AS_BOX([Re-add template meter and make sure acl2's meter is back in sb])
check ovn-nbctl --wait=sb --fair meter-add meter_me drop 1 pktps
check_meter_by_name meter_me meter_me__${acl2}
check_meter_by_name NOT meter_me__${acl1}
check_acl_lflow acl_two meter_me__${acl2} sw0
check_acl_lflow acl_three meter_me__${acl3} sw0
check_acl_lflow acl_three meter_me__${acl3} sw1

AS_BOX([Remove acl2])
sw0=$(fetch_column nb:logical_switch _uuid name=sw0)
check ovn-nbctl --wait=sb remove logical_switch $sw0 acls $acl2
check_meter_by_name meter_me meter_me__${acl3}
check_meter_by_name NOT meter_me__${acl1} meter_me__${acl2}

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- ACL skip hints for stateless config])
AT_KEYWORDS([acl])
ovn_start

check ovn-nbctl --wait=sb \
    -- ls-add ls \
    -- lsp-add ls lsp \
    -- acl-add ls from-lport 1 "ip" allow \
    -- acl-add ls to-lport 1 "ip" allow

AS_BOX([Check no match on ct_state with stateless ACLs])
AT_CHECK([ovn-sbctl lflow-list ls | grep -e ls_in_acl_hint -e ls_out_acl_hint -e ls_in_acl -e ls_out_acl | grep 'ct\.' | sort], [0], [dnl
])

AS_BOX([Check match ct_state with stateful ACLs])
check ovn-nbctl --wait=sb \
    -- acl-add ls from-lport 2 "udp" allow-related \
    -- acl-add ls to-lport 2 "udp" allow-related
AT_CHECK([ovn-sbctl lflow-list ls | grep -e ls_in_acl_hint -e ls_out_acl_hint -e ls_in_acl -e ls_out_acl | grep 'ct\.' | sort], [0], [dnl
  table=3 (ls_out_acl_hint    ), priority=1    , match=(ct.est && ct_label.blocked == 0), action=(reg0[[10]] = 1; next;)
  table=3 (ls_out_acl_hint    ), priority=2    , match=(ct.est && ct_label.blocked == 1), action=(reg0[[9]] = 1; next;)
  table=3 (ls_out_acl_hint    ), priority=3    , match=(!ct.est), action=(reg0[[9]] = 1; next;)
  table=3 (ls_out_acl_hint    ), priority=4    , match=(!ct.new && ct.est && !ct.rpl && ct_label.blocked == 0), action=(reg0[[8]] = 1; reg0[[10]] = 1; next;)
  table=3 (ls_out_acl_hint    ), priority=5    , match=(!ct.trk), action=(reg0[[8]] = 1; reg0[[9]] = 1; next;)
  table=3 (ls_out_acl_hint    ), priority=6    , match=(!ct.new && ct.est && !ct.rpl && ct_label.blocked == 1), action=(reg0[[7]] = 1; reg0[[9]] = 1; next;)
  table=3 (ls_out_acl_hint    ), priority=7    , match=(ct.new && !ct.est), action=(reg0[[7]] = 1; reg0[[9]] = 1; next;)
  table=4 (ls_out_acl         ), priority=1    , match=(ip && (!ct.est || (ct.est && ct_label.blocked == 1))), action=(reg0[[1]] = 1; next;)
  table=4 (ls_out_acl         ), priority=65532, match=(!ct.est && ct.rel && !ct.new && !ct.inv && ct_label.blocked == 0), action=(next;)
  table=4 (ls_out_acl         ), priority=65532, match=(ct.est && !ct.rel && !ct.new && !ct.inv && ct.rpl && ct_label.blocked == 0), action=(next;)
  table=4 (ls_out_acl         ), priority=65532, match=(ct.inv || (ct.est && ct.rpl && ct_label.blocked == 1)), action=(drop;)
  table=8 (ls_in_acl_hint     ), priority=1    , match=(ct.est && ct_label.blocked == 0), action=(reg0[[10]] = 1; next;)
  table=8 (ls_in_acl_hint     ), priority=2    , match=(ct.est && ct_label.blocked == 1), action=(reg0[[9]] = 1; next;)
  table=8 (ls_in_acl_hint     ), priority=3    , match=(!ct.est), action=(reg0[[9]] = 1; next;)
  table=8 (ls_in_acl_hint     ), priority=4    , match=(!ct.new && ct.est && !ct.rpl && ct_label.blocked == 0), action=(reg0[[8]] = 1; reg0[[10]] = 1; next;)
  table=8 (ls_in_acl_hint     ), priority=5    , match=(!ct.trk), action=(reg0[[8]] = 1; reg0[[9]] = 1; next;)
  table=8 (ls_in_acl_hint     ), priority=6    , match=(!ct.new && ct.est && !ct.rpl && ct_label.blocked == 1), action=(reg0[[7]] = 1; reg0[[9]] = 1; next;)
  table=8 (ls_in_acl_hint     ), priority=7    , match=(ct.new && !ct.est), action=(reg0[[7]] = 1; reg0[[9]] = 1; next;)
  table=9 (ls_in_acl          ), priority=1    , match=(ip && (!ct.est || (ct.est && ct_label.blocked == 1))), action=(reg0[[1]] = 1; next;)
  table=9 (ls_in_acl          ), priority=65532, match=(!ct.est && ct.rel && !ct.new && !ct.inv && ct_label.blocked == 0), action=(next;)
  table=9 (ls_in_acl          ), priority=65532, match=(ct.est && !ct.rel && !ct.new && !ct.inv && ct.rpl && ct_label.blocked == 0), action=(next;)
  table=9 (ls_in_acl          ), priority=65532, match=(ct.inv || (ct.est && ct.rpl && ct_label.blocked == 1)), action=(drop;)
])

AS_BOX([Check match ct_state with load balancer])
check ovn-nbctl --wait=sb \
    -- acl-del ls from-lport 2 "udp" \
    -- acl-del ls to-lport 2 "udp" \
    -- lb-add lb "10.0.0.1" "10.0.0.2" \
    -- ls-lb-add ls lb

AT_CHECK([ovn-sbctl lflow-list ls | grep -e ls_in_acl_hint -e ls_out_acl_hint -e ls_in_acl -e ls_out_acl | sort], [0], [dnl
  table=3 (ls_out_acl_hint    ), priority=0    , match=(1), action=(next;)
  table=3 (ls_out_acl_hint    ), priority=1    , match=(ct.est && ct_label.blocked == 0), action=(reg0[[10]] = 1; next;)
  table=3 (ls_out_acl_hint    ), priority=2    , match=(ct.est && ct_label.blocked == 1), action=(reg0[[9]] = 1; next;)
  table=3 (ls_out_acl_hint    ), priority=3    , match=(!ct.est), action=(reg0[[9]] = 1; next;)
  table=3 (ls_out_acl_hint    ), priority=4    , match=(!ct.new && ct.est && !ct.rpl && ct_label.blocked == 0), action=(reg0[[8]] = 1; reg0[[10]] = 1; next;)
  table=3 (ls_out_acl_hint    ), priority=5    , match=(!ct.trk), action=(reg0[[8]] = 1; reg0[[9]] = 1; next;)
  table=3 (ls_out_acl_hint    ), priority=6    , match=(!ct.new && ct.est && !ct.rpl && ct_label.blocked == 1), action=(reg0[[7]] = 1; reg0[[9]] = 1; next;)
  table=3 (ls_out_acl_hint    ), priority=7    , match=(ct.new && !ct.est), action=(reg0[[7]] = 1; reg0[[9]] = 1; next;)
  table=4 (ls_out_acl         ), priority=0    , match=(1), action=(next;)
  table=4 (ls_out_acl         ), priority=1    , match=(ip && (!ct.est || (ct.est && ct_label.blocked == 1))), action=(reg0[[1]] = 1; next;)
  table=4 (ls_out_acl         ), priority=1001 , match=(reg0[[7]] == 1 && (ip)), action=(reg0[[1]] = 1; next;)
  table=4 (ls_out_acl         ), priority=1001 , match=(reg0[[8]] == 1 && (ip)), action=(next;)
  table=4 (ls_out_acl         ), priority=34000, match=(eth.src == $svc_monitor_mac), action=(next;)
  table=4 (ls_out_acl         ), priority=65532, match=(!ct.est && ct.rel && !ct.new && !ct.inv && ct_label.blocked == 0), action=(next;)
  table=4 (ls_out_acl         ), priority=65532, match=(ct.est && !ct.rel && !ct.new && !ct.inv && ct.rpl && ct_label.blocked == 0), action=(next;)
  table=4 (ls_out_acl         ), priority=65532, match=(ct.inv || (ct.est && ct.rpl && ct_label.blocked == 1)), action=(drop;)
  table=4 (ls_out_acl         ), priority=65532, match=(nd || nd_ra || nd_rs || mldv1 || mldv2), action=(next;)
  table=8 (ls_in_acl_hint     ), priority=0    , match=(1), action=(next;)
  table=8 (ls_in_acl_hint     ), priority=1    , match=(ct.est && ct_label.blocked == 0), action=(reg0[[10]] = 1; next;)
  table=8 (ls_in_acl_hint     ), priority=2    , match=(ct.est && ct_label.blocked == 1), action=(reg0[[9]] = 1; next;)
  table=8 (ls_in_acl_hint     ), priority=3    , match=(!ct.est), action=(reg0[[9]] = 1; next;)
  table=8 (ls_in_acl_hint     ), priority=4    , match=(!ct.new && ct.est && !ct.rpl && ct_label.blocked == 0), action=(reg0[[8]] = 1; reg0[[10]] = 1; next;)
  table=8 (ls_in_acl_hint     ), priority=5    , match=(!ct.trk), action=(reg0[[8]] = 1; reg0[[9]] = 1; next;)
  table=8 (ls_in_acl_hint     ), priority=6    , match=(!ct.new && ct.est && !ct.rpl && ct_label.blocked == 1), action=(reg0[[7]] = 1; reg0[[9]] = 1; next;)
  table=8 (ls_in_acl_hint     ), priority=7    , match=(ct.new && !ct.est), action=(reg0[[7]] = 1; reg0[[9]] = 1; next;)
  table=9 (ls_in_acl          ), priority=0    , match=(1), action=(next;)
  table=9 (ls_in_acl          ), priority=1    , match=(ip && (!ct.est || (ct.est && ct_label.blocked == 1))), action=(reg0[[1]] = 1; next;)
  table=9 (ls_in_acl          ), priority=1001 , match=(reg0[[7]] == 1 && (ip)), action=(reg0[[1]] = 1; next;)
  table=9 (ls_in_acl          ), priority=1001 , match=(reg0[[8]] == 1 && (ip)), action=(next;)
  table=9 (ls_in_acl          ), priority=34000, match=(eth.dst == $svc_monitor_mac), action=(next;)
  table=9 (ls_in_acl          ), priority=65532, match=(!ct.est && ct.rel && !ct.new && !ct.inv && ct_label.blocked == 0), action=(next;)
  table=9 (ls_in_acl          ), priority=65532, match=(ct.est && !ct.rel && !ct.new && !ct.inv && ct.rpl && ct_label.blocked == 0), action=(next;)
  table=9 (ls_in_acl          ), priority=65532, match=(ct.inv || (ct.est && ct.rpl && ct_label.blocked == 1)), action=(drop;)
  table=9 (ls_in_acl          ), priority=65532, match=(nd || nd_ra || nd_rs || mldv1 || mldv2), action=(next;)
])

ovn-nbctl --wait=sb clear logical_switch ls acls
ovn-nbctl --wait=sb clear logical_switch ls load_balancer

AT_CHECK([ovn-sbctl lflow-list ls | grep -e ls_in_acl_hint -e ls_out_acl_hint -e ls_in_acl -e ls_out_acl | sort], [0], [dnl
  table=3 (ls_out_acl_hint    ), priority=65535, match=(1), action=(next;)
  table=4 (ls_out_acl         ), priority=65535, match=(1), action=(next;)
  table=8 (ls_in_acl_hint     ), priority=65535, match=(1), action=(next;)
  table=9 (ls_in_acl          ), priority=65535, match=(1), action=(next;)
])


AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([datapath requested-tnl-key])
AT_KEYWORDS([requested tnl tunnel key keys])
ovn_start

get_tunnel_keys() {
    set $(ovn-sbctl get datapath_binding ls0 tunnel_key \
                 -- get datapath_binding ls1 tunnel_key \
                 -- get datapath_binding ls2 tunnel_key)
    echo "ls0=$ls0 ls1=$ls1 ls2=$ls2"
    ls0=$1 ls1=$2 ls2=$3
    AT_CHECK([test "$ls0" != "$ls1" && \
              test "$ls1" != "$ls2" && \
              test "$ls0" != "$ls2"])
}

echo
echo "__file__:__line__: Add three logical switches, check tunnel ids"
AT_CHECK(
  [ovn-nbctl --wait=sb ls-add ls0
   ovn-nbctl --wait=sb ls-add ls1
   ovn-nbctl --wait=sb ls-add ls2])
get_tunnel_keys
AT_CHECK([test $ls0 = 1 && test $ls1 = 2 && test $ls2 = 3])

echo
echo "__file__:__line__: Assign ls0 new tunnel key, others don't change."
AT_CHECK(
  [ovn-nbctl --wait=sb set logical-switch ls0 other-config:requested-tnl-key=4])
get_tunnel_keys
AT_CHECK([test $ls0 = 4 && test $ls1 = 2 && test $ls2 = 3])

echo
echo "__file__:__line__: Assign ls0 a conflict with ls1, which moves aside."
AT_CHECK(
  [ovn-nbctl --wait=sb set logical-switch ls0 other-config:requested-tnl-key=2])
get_tunnel_keys
AT_CHECK([test $ls0 = 2 && test $ls2 = 3])

echo
echo "__file__:__line__: Assign ls0 and ls1 conflicts and verify that they end up different and ls2 doesn't change."
AT_CHECK(
  [ovn-nbctl --wait=sb set logical-switch ls1 other-config:requested-tnl-key=2])
get_tunnel_keys
AT_CHECK([test $ls2 = 3])
AT_CLEANUP
])

AT_SETUP([ovn -- LR requested-tnl-key])
ovn_start

ovn-nbctl --wait=sb lr-add lr0
AT_CHECK([test 1 = $(ovn-sbctl get datapath_binding lr0 tunnel_key)])

ovn-nbctl --wait=sb lr-add lr1
AT_CHECK([test 2 = $(ovn-sbctl get datapath_binding lr1 tunnel_key)])

AT_CHECK(
  [ovn-nbctl --wait=sb set logical-router lr0 options:requested-tnl-key=100])
AT_CHECK([test 100 = $(ovn-sbctl get datapath_binding lr0 tunnel_key)])

AT_CHECK(
  [ovn-nbctl --wait=sb set logical-router lr1 options:requested-tnl-key=100])

AT_CLEANUP

OVN_FOR_EACH_NORTHD([
AT_SETUP([port requested-tnl-key])
AT_KEYWORDS([requested tnl tunnel key keys])
ovn_start

get_tunnel_keys() {
    set $(ovn-sbctl get port_binding lsp00 tunnel_key \
                 -- get port_binding lsp01 tunnel_key \
                 -- get port_binding lsp02 tunnel_key \
                 -- get port_binding lsp10 tunnel_key \
                 -- get port_binding lsp11 tunnel_key \
                 -- get port_binding lsp12 tunnel_key)
    lsp00=$1 lsp01=$2 lsp02=$3 lsp10=$4 lsp11=$5 lsp12=$6
    ls0=$1$2$3 ls1=$4$5$6
    echo "ls0=$1$2$3 ls1=$4$5$6"
    AT_CHECK([test "$lsp00" != "$lsp01" && \
              test "$lsp01" != "$lsp02" && \
              test "$lsp00" != "$lsp02"])
    AT_CHECK([test "$lsp10" != "$lsp11" && \
              test "$lsp11" != "$lsp12" && \
              test "$lsp10" != "$lsp12"])
}

echo
echo "__file__:__line__: Add two logical switches with three ports each, check tunnel ids"
AT_CHECK(
  [for i in 0 1; do
       ovn-nbctl --wait=sb ls-add ls$i || exit $?
       for j in 0 1 2; do
           ovn-nbctl --wait=sb lsp-add ls$i lsp$i$j || exit $?
       done
   done])
get_tunnel_keys
AT_CHECK([test $ls0 = 123 && test $ls1 = 123])

echo
echo "__file__:__line__: Assign lsp00 new tunnel key, others don't change."
AT_CHECK(
  [ovn-nbctl --wait=sb set logical-switch-port lsp00 options:requested-tnl-key=4])
get_tunnel_keys
AT_CHECK([test $ls0 = 423 && test $ls1 = 123])

echo
echo "__file__:__line__: Assign lsp00 a conflict with lsp01, which moves aside."
AT_CHECK(
  [ovn-nbctl --wait=sb set logical-switch-port lsp00 options:requested-tnl-key=2])
get_tunnel_keys
AT_CHECK([test $lsp00 = 2 && test $lsp02 = 3 && test $ls1 = 123])

echo
echo "__file__:__line__: Assign lsp00 and lsp01 conflicts and verify that they end up different and lsp02 doesn't change."
AT_CHECK(
  [ovn-nbctl --wait=sb set logical-switch-port lsp01 options:requested-tnl-key=2])
get_tunnel_keys
AT_CHECK([test $lsp02 = 3 && test $ls1 = 123])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- NB to SB load balancer sync])
ovn_start

check ovn-nbctl --wait=sb lb-add lb0 10.0.0.10:80 10.0.0.4:8080
check_row_count nb:load_balancer 1

echo
echo "__file__:__line__: Check that there are no SB load balancer rows."
check_row_count sb:load_balancer 0

check ovn-nbctl ls-add sw0
check ovn-nbctl --wait=sb ls-lb-add sw0 lb0
sw0_sb_uuid=$(fetch_column datapath_binding _uuid external_ids:name=sw0)

echo
echo "__file__:__line__: Check that there is one SB load balancer row for lb0."
check_row_count sb:load_balancer 1
check_column "10.0.0.10:80=10.0.0.4:8080 tcp" sb:load_balancer vips,protocol name=lb0

lb0_uuid=$(fetch_column sb:load_balancer _uuid name=lb0)

echo
echo "__file__:__line__: Check that SB lb0 has sw0 in datapaths column."

check_column "$sw0_sb_uuid" sb:load_balancer datapaths name=lb0
check_column "$lb0_uuid" sb:datapath_binding load_balancers external_ids:name=sw0

check ovn-nbctl --wait=sb set load_balancer . vips:"10.0.0.20\:90"="20.0.0.4:8080,30.0.0.4:8080"

echo
echo "__file__:__line__: Check that SB lb0 has vips and protocol columns are set properly."

check_column "10.0.0.10:80=10.0.0.4:8080 10.0.0.20:90=20.0.0.4:8080,30.0.0.4:8080 tcp" \
sb:load_balancer vips,protocol name=lb0

check ovn-nbctl lr-add lr0
check ovn-nbctl --wait=sb lr-lb-add lr0 lb0

echo
echo "__file__:__line__: Check that SB lb0 has only sw0 in datapaths column."
check_column "$sw0_sb_uuid" sb:load_balancer datapaths name=lb0

check ovn-nbctl ls-add sw1
check ovn-nbctl --wait=sb ls-lb-add sw1 lb0
sw1_sb_uuid=$(fetch_column datapath_binding _uuid external_ids:name=sw1)

echo
echo "__file__:__line__: Check that SB lb0 has sw0 and sw1 in datapaths column."
check_column "$sw0_sb_uuid $sw1_sb_uuid" sb:load_balancer datapaths name=lb0
check_column "$lb0_uuid" sb:datapath_binding load_balancers external_ids:name=sw1

check ovn-nbctl --wait=sb lb-add lb1 10.0.0.30:80 20.0.0.50:8080 udp
check_row_count sb:load_balancer 1

check ovn-nbctl --wait=sb lr-lb-add lr0 lb1
check_row_count sb:load_balancer 1

echo
echo "__file__:__line__: Associate lb1 to sw1 and check that lb1 is created in SB DB."

check ovn-nbctl --wait=sb ls-lb-add sw1 lb1
check_row_count sb:load_balancer 2

echo
echo "__file__:__line__: Check that SB lb1 has vips and protocol columns are set properly."
check_column "10.0.0.30:80=20.0.0.50:8080 udp" sb:load_balancer vips,protocol name=lb1

lb1_uuid=$(fetch_column sb:load_balancer _uuid name=lb1)

echo
echo "__file__:__line__: Check that SB lb1 has sw1 in datapaths column."

check_column "$sw1_sb_uuid" sb:load_balancer datapaths name=lb1

echo
echo "__file__:__line__: check that datapath sw1 has lb0 and lb1 set in the load_balancers column."
check_column "$lb0_uuid $lb1_uuid" sb:datapath_binding load_balancers external_ids:name=sw1


echo
echo "__file__:__line__: Set hairpin_snat_ip on lb1 and check that SB DB is updated."
check ovn-nbctl --wait=sb set Load_Balancer lb1 options:hairpin_snat_ip="42.42.42.42 4242::4242"
check_column "$lb1_uuid" sb:load_balancer _uuid name=lb1 options='{hairpin_orig_tuple="true", hairpin_snat_ip="42.42.42.42 4242::4242"}'

echo
echo "__file__:__line__: Delete load balancer lb1 an check that datapath sw1's load_balancers are updated accordingly."

ovn-nbctl --wait=sb lb-del lb1
check_column "$lb0_uuid" sb:datapath_binding load_balancers external_ids:name=sw1
AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- LS load balancer hairpin logical flows])
ovn_start

check ovn-nbctl \
    -- ls-add sw0 \
    -- lb-add lb0 10.0.0.10:80 10.0.0.4:8080 \
    -- ls-lb-add sw0 lb0

check ovn-nbctl --wait=sb sync

AT_CHECK([ovn-sbctl lflow-list sw0 | grep ls_in_pre_hairpin | sort], [0], [dnl
  table=13(ls_in_pre_hairpin  ), priority=0    , match=(1), action=(next;)
  table=13(ls_in_pre_hairpin  ), priority=100  , match=(ip && ct.trk), action=(reg0[[6]] = chk_lb_hairpin(); reg0[[12]] = chk_lb_hairpin_reply(); next;)
])

AT_CHECK([ovn-sbctl lflow-list sw0 | grep ls_in_nat_hairpin | sort], [0], [dnl
  table=14(ls_in_nat_hairpin  ), priority=0    , match=(1), action=(next;)
  table=14(ls_in_nat_hairpin  ), priority=100  , match=(ip && ct.est && ct.trk && reg0[[6]] == 1), action=(ct_snat;)
  table=14(ls_in_nat_hairpin  ), priority=100  , match=(ip && ct.new && ct.trk && reg0[[6]] == 1), action=(ct_snat_to_vip; next;)
  table=14(ls_in_nat_hairpin  ), priority=90   , match=(ip && reg0[[12]] == 1), action=(ct_snat;)
])

AT_CHECK([ovn-sbctl lflow-list sw0 | grep ls_in_hairpin | sort], [0], [dnl
  table=15(ls_in_hairpin      ), priority=0    , match=(1), action=(next;)
  table=15(ls_in_hairpin      ), priority=1    , match=((reg0[[6]] == 1 || reg0[[12]] == 1)), action=(eth.dst <-> eth.src; outport = inport; flags.loopback = 1; output;)
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- logical gatapath groups])
AT_KEYWORDS([use_logical_dp_groups])
ovn_start

dnl Disabling datapath groups.
ovn-nbctl --wait=sb set NB_Global . options:use_logical_dp_groups=false

ovn-nbctl ls-add sw1
ovn-nbctl ls-add sw2
ovn-nbctl lsp-add sw1 swp1
ovn-nbctl lsp-add sw2 swp2
ovn-nbctl --wait=sb sync

sw1_sb_uuid=$(fetch_column datapath_binding _uuid external_ids:name=sw1)
sw2_sb_uuid=$(fetch_column datapath_binding _uuid external_ids:name=sw2)

dnl Check that we have no datapath groups.
check_row_count Logical_DP_Group 0

dnl Number of logical flows that depends on logical switch or multicast group.
dnl These will not be combined.
n_flows_specific=$(ovn-sbctl --bare find Logical_Flow | grep -cE 'swp|_MC_')
echo "Number of specific flows: "${n_flows_specific}

dnl Both logical switches configured identically, so there should be same
dnl number of logical flows per logical switch/logical datapath.
n_flows=$(count_rows Logical_Flow)
echo "Total number of flows with datapath groups disabled: "${n_flows}
n_flows_half=$((${n_flows} / 2))
check_row_count Logical_Flow ${n_flows_half} logical_datapath=${sw1_sb_uuid}
check_row_count Logical_Flow ${n_flows_half} logical_datapath=${sw2_sb_uuid}

dnl Enabling datapath groups.
ovn-nbctl --wait=sb set NB_Global . options:use_logical_dp_groups=true

dnl Check that one datapath group created.
check_row_count Logical_DP_Group 1
dp_group_uuid=$(fetch_column logical_dp_group _uuid)

dnl Check that datapath group contains both datapaths.
check_column "${sw1_sb_uuid} ${sw2_sb_uuid}" Logical_DP_Group datapaths

dnl Calculating number of flows that should be combined for a datapath group.
n_flows=$(count_rows Logical_Flow)
echo "Total number of flows with datapath groups enabled: "${n_flows}
n_flows_common=$((${n_flows} - ${n_flows_specific}))

check_row_count Logical_Flow ${n_flows_common} logical_dp_group=${dp_group_uuid}
check_row_count Logical_Flow ${n_flows_common} logical_datapath=[[]]
check_row_count Logical_Flow ${n_flows_common} \
    logical_dp_group=${dp_group_uuid} logical_datapath=[[]]

dnl Adding 8 more logical switches and ports.
for i in $(seq 3 10); do
    ovn-nbctl ls-add sw${i}
    ovn-nbctl lsp-add sw${i} swp${i}
done
ovn-nbctl --wait=sb sync

dnl Number of logical flows should be increased only due to specific flows.
expected_n_flows=$((${n_flows_common} + 5 * ${n_flows_specific}))
echo "Total number of flows with 10 logical switches should be: " \
     ${expected_n_flows}
check_row_count Logical_Flow ${expected_n_flows}

dnl Should be still only one datapath group.
check_row_count Logical_DP_Group 1
dp_group_uuid=$(fetch_column logical_dp_group _uuid)

dnl Number of common flows should be the same.
check_row_count Logical_Flow ${n_flows_common} logical_dp_group=${dp_group_uuid}

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- Router policies - ECMP reroute])
AT_KEYWORDS([router policies ecmp reroute])
ovn_start

check ovn-nbctl ls-add sw0
check ovn-nbctl lsp-add sw0 sw0-port1
check ovn-nbctl lsp-set-addresses sw0-port1 "50:54:00:00:00:03 10.0.0.3"

check ovn-nbctl ls-add sw1
check ovn-nbctl lsp-add sw1 sw1-port1
check ovn-nbctl lsp-set-addresses sw1-port1 "40:54:00:00:00:03 20.0.0.3"

# Create a logical router and attach both logical switches
check ovn-nbctl lr-add lr0
check ovn-nbctl lrp-add lr0 lr0-sw0 00:00:00:00:ff:01 10.0.0.1/24 1000::a/64
check ovn-nbctl lsp-add sw0 sw0-lr0
check ovn-nbctl lsp-set-type sw0-lr0 router
check ovn-nbctl lsp-set-addresses sw0-lr0 00:00:00:00:ff:01
check ovn-nbctl lsp-set-options sw0-lr0 router-port=lr0-sw0

check ovn-nbctl lrp-add lr0 lr0-sw1 00:00:00:00:ff:02 20.0.0.1/24 2000::a/64
check ovn-nbctl lsp-add sw1 sw1-lr0
check ovn-nbctl lsp-set-type sw1-lr0 router
check ovn-nbctl lsp-set-addresses sw1-lr0 00:00:00:00:ff:02
check ovn-nbctl lsp-set-options sw1-lr0 router-port=lr-sw1

check ovn-nbctl ls-add public
check ovn-nbctl lrp-add lr0 lr0-public 00:00:20:20:12:13 172.168.0.100/24
check ovn-nbctl lsp-add public public-lr0
check ovn-nbctl lsp-set-type public-lr0 router
check ovn-nbctl lsp-set-addresses public-lr0 router
check ovn-nbctl lsp-set-options public-lr0 router-port=lr0-public

check ovn-nbctl --wait=sb lr-policy-add lr0  10 "ip4.src == 10.0.0.3" reroute 172.168.0.101,172.168.0.102

ovn-nbctl lr-policy-list lr0 > policy-list
AT_CAPTURE_FILE([policy-list])
AT_CHECK([cat policy-list], [0], [dnl
Routing Policies
        10                                ip4.src == 10.0.0.3         reroute             172.168.0.101, 172.168.0.102
])

ovn-sbctl dump-flows lr0 > lr0flows3
AT_CAPTURE_FILE([lr0flows3])

AT_CHECK([grep "lr_in_policy" lr0flows3 | sort], [0], [dnl
  table=12(lr_in_policy       ), priority=0    , match=(1), action=(reg8[[0..15]] = 0; next;)
  table=12(lr_in_policy       ), priority=10   , match=(ip4.src == 10.0.0.3), action=(reg8[[0..15]] = 1; reg8[[16..31]] = select(1, 2);)
  table=13(lr_in_policy_ecmp  ), priority=100  , match=(reg8[[0..15]] == 1 && reg8[[16..31]] == 1), action=(reg0 = 172.168.0.101; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; next;)
  table=13(lr_in_policy_ecmp  ), priority=100  , match=(reg8[[0..15]] == 1 && reg8[[16..31]] == 2), action=(reg0 = 172.168.0.102; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; next;)
  table=13(lr_in_policy_ecmp  ), priority=150  , match=(reg8[[0..15]] == 0), action=(next;)
])

check ovn-nbctl --wait=sb lr-policy-add lr0  10 "ip4.src == 10.0.0.4" reroute 172.168.0.101,172.168.0.102,172.168.0.103
ovn-sbctl dump-flows lr0 > lr0flows3
AT_CAPTURE_FILE([lr0flows3])

AT_CHECK([grep "lr_in_policy" lr0flows3 |  \
sed 's/reg8\[[0..15\]] = [[0-9]]*/reg8\[[0..15\]] = <cleared>/' | \
sed 's/reg8\[[0..15\]] == [[0-9]]*/reg8\[[0..15\]] == <cleared>/' | sort], [0], [dnl
  table=12(lr_in_policy       ), priority=0    , match=(1), action=(reg8[[0..15]] = <cleared>; next;)
  table=12(lr_in_policy       ), priority=10   , match=(ip4.src == 10.0.0.3), action=(reg8[[0..15]] = <cleared>; reg8[[16..31]] = select(1, 2);)
  table=12(lr_in_policy       ), priority=10   , match=(ip4.src == 10.0.0.4), action=(reg8[[0..15]] = <cleared>; reg8[[16..31]] = select(1, 2, 3);)
  table=13(lr_in_policy_ecmp  ), priority=100  , match=(reg8[[0..15]] == <cleared> && reg8[[16..31]] == 1), action=(reg0 = 172.168.0.101; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; next;)
  table=13(lr_in_policy_ecmp  ), priority=100  , match=(reg8[[0..15]] == <cleared> && reg8[[16..31]] == 1), action=(reg0 = 172.168.0.101; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; next;)
  table=13(lr_in_policy_ecmp  ), priority=100  , match=(reg8[[0..15]] == <cleared> && reg8[[16..31]] == 2), action=(reg0 = 172.168.0.102; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; next;)
  table=13(lr_in_policy_ecmp  ), priority=100  , match=(reg8[[0..15]] == <cleared> && reg8[[16..31]] == 2), action=(reg0 = 172.168.0.102; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; next;)
  table=13(lr_in_policy_ecmp  ), priority=100  , match=(reg8[[0..15]] == <cleared> && reg8[[16..31]] == 3), action=(reg0 = 172.168.0.103; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; next;)
  table=13(lr_in_policy_ecmp  ), priority=150  , match=(reg8[[0..15]] == <cleared>), action=(next;)
])

check ovn-nbctl --wait=sb lr-policy-add lr0  10 "ip4.src == 10.0.0.5" reroute 172.168.0.110
ovn-sbctl dump-flows lr0 > lr0flows3
AT_CAPTURE_FILE([lr0flows3])

AT_CHECK([grep "lr_in_policy" lr0flows3 |  \
sed 's/reg8\[[0..15\]] = [[0-9]]*/reg8\[[0..15\]] = <cleared>/' | \
sed 's/reg8\[[0..15\]] == [[0-9]]*/reg8\[[0..15\]] == <cleared>/' | sort], [0], [dnl
  table=12(lr_in_policy       ), priority=0    , match=(1), action=(reg8[[0..15]] = <cleared>; next;)
  table=12(lr_in_policy       ), priority=10   , match=(ip4.src == 10.0.0.3), action=(reg8[[0..15]] = <cleared>; reg8[[16..31]] = select(1, 2);)
  table=12(lr_in_policy       ), priority=10   , match=(ip4.src == 10.0.0.4), action=(reg8[[0..15]] = <cleared>; reg8[[16..31]] = select(1, 2, 3);)
  table=12(lr_in_policy       ), priority=10   , match=(ip4.src == 10.0.0.5), action=(reg0 = 172.168.0.110; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg8[[0..15]] = <cleared>; next;)
  table=13(lr_in_policy_ecmp  ), priority=100  , match=(reg8[[0..15]] == <cleared> && reg8[[16..31]] == 1), action=(reg0 = 172.168.0.101; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; next;)
  table=13(lr_in_policy_ecmp  ), priority=100  , match=(reg8[[0..15]] == <cleared> && reg8[[16..31]] == 1), action=(reg0 = 172.168.0.101; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; next;)
  table=13(lr_in_policy_ecmp  ), priority=100  , match=(reg8[[0..15]] == <cleared> && reg8[[16..31]] == 2), action=(reg0 = 172.168.0.102; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; next;)
  table=13(lr_in_policy_ecmp  ), priority=100  , match=(reg8[[0..15]] == <cleared> && reg8[[16..31]] == 2), action=(reg0 = 172.168.0.102; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; next;)
  table=13(lr_in_policy_ecmp  ), priority=100  , match=(reg8[[0..15]] == <cleared> && reg8[[16..31]] == 3), action=(reg0 = 172.168.0.103; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; next;)
  table=13(lr_in_policy_ecmp  ), priority=150  , match=(reg8[[0..15]] == <cleared>), action=(next;)
])

check ovn-nbctl --wait=sb lr-policy-del lr0  10 "ip4.src == 10.0.0.3"
ovn-sbctl dump-flows lr0 > lr0flows3
AT_CAPTURE_FILE([lr0flows3])

AT_CHECK([grep "lr_in_policy" lr0flows3 |  \
sed 's/reg8\[[0..15\]] = [[0-9]]*/reg8\[[0..15\]] = <cleared>/' | \
sed 's/reg8\[[0..15\]] == [[0-9]]*/reg8\[[0..15\]] == <cleared>/' | sort], [0], [dnl
  table=12(lr_in_policy       ), priority=0    , match=(1), action=(reg8[[0..15]] = <cleared>; next;)
  table=12(lr_in_policy       ), priority=10   , match=(ip4.src == 10.0.0.4), action=(reg8[[0..15]] = <cleared>; reg8[[16..31]] = select(1, 2, 3);)
  table=12(lr_in_policy       ), priority=10   , match=(ip4.src == 10.0.0.5), action=(reg0 = 172.168.0.110; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg8[[0..15]] = <cleared>; next;)
  table=13(lr_in_policy_ecmp  ), priority=100  , match=(reg8[[0..15]] == <cleared> && reg8[[16..31]] == 1), action=(reg0 = 172.168.0.101; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; next;)
  table=13(lr_in_policy_ecmp  ), priority=100  , match=(reg8[[0..15]] == <cleared> && reg8[[16..31]] == 2), action=(reg0 = 172.168.0.102; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; next;)
  table=13(lr_in_policy_ecmp  ), priority=100  , match=(reg8[[0..15]] == <cleared> && reg8[[16..31]] == 3), action=(reg0 = 172.168.0.103; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; next;)
  table=13(lr_in_policy_ecmp  ), priority=150  , match=(reg8[[0..15]] == <cleared>), action=(next;)
])

check ovn-nbctl --wait=sb lr-policy-del lr0  10 "ip4.src == 10.0.0.4"
ovn-sbctl dump-flows lr0 > lr0flows3
AT_CAPTURE_FILE([lr0flows3])

AT_CHECK([grep "lr_in_policy" lr0flows3 |  \
sed 's/reg8\[[0..15\]] = [[0-9]]*/reg8\[[0..15\]] = <cleared>/' | \
sed 's/reg8\[[0..15\]] == [[0-9]]*/reg8\[[0..15\]] == <cleared>/' | sort], [0], [dnl
  table=12(lr_in_policy       ), priority=0    , match=(1), action=(reg8[[0..15]] = <cleared>; next;)
  table=12(lr_in_policy       ), priority=10   , match=(ip4.src == 10.0.0.5), action=(reg0 = 172.168.0.110; reg1 = 172.168.0.100; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg8[[0..15]] = <cleared>; next;)
  table=13(lr_in_policy_ecmp  ), priority=150  , match=(reg8[[0..15]] == <cleared>), action=(next;)
])

check ovn-nbctl --wait=sb add logical_router_policy . nexthops "2000\:\:b"
ovn-sbctl dump-flows lr0 > lr0flows3
AT_CAPTURE_FILE([lr0flows3])

AT_CHECK([grep "lr_in_policy" lr0flows3 |  \
sed 's/reg8\[[0..15\]] = [[0-9]]*/reg8\[[0..15\]] = <cleared>/' | \
sed 's/reg8\[[0..15\]] == [[0-9]]*/reg8\[[0..15\]] == <cleared>/' | sort], [0], [dnl
  table=12(lr_in_policy       ), priority=0    , match=(1), action=(reg8[[0..15]] = <cleared>; next;)
  table=13(lr_in_policy_ecmp  ), priority=150  , match=(reg8[[0..15]] == <cleared>), action=(next;)
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- ACL allow-stateless omit conntrack - Logical_Switch])
ovn_start

ovn-nbctl ls-add ls
ovn-nbctl lsp-add ls lsp1
ovn-nbctl lsp-set-addresses lsp1 00:00:00:00:00:01
ovn-nbctl lsp-add ls lsp2
ovn-nbctl lsp-set-addresses lsp2 00:00:00:00:00:02

for direction in from to; do
    ovn-nbctl acl-add ls ${direction}-lport 3 "tcp" allow-related
    ovn-nbctl acl-add ls ${direction}-lport 2 "udp" allow-related
    ovn-nbctl acl-add ls ${direction}-lport 1 "ip" drop
done
ovn-nbctl --wait=sb sync

flow_eth='eth.src == 00:00:00:00:00:01 && eth.dst == 00:00:00:00:00:02'
flow_ip='ip.ttl==64 && ip4.src == 42.42.42.1 && ip4.dst == 66.66.66.66'
flow_tcp='tcp && tcp.dst == 80'
flow_udp='udp && udp.dst == 80'

lsp1_inport=$(fetch_column Port_Binding tunnel_key logical_port=lsp1)

# TCP packets should go to conntrack.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_tcp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# tcp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80,tcp_flags=0
ct_next(ct_state=new|trk) {
    ct_next(ct_state=new|trk) {
        output("lsp2");
    };
};
])

# UDP packets should go to conntrack.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_udp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# udp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80
ct_next(ct_state=new|trk) {
    ct_next(ct_state=new|trk) {
        output("lsp2");
    };
};
])

# Allow stateless for TCP.
for direction in from to; do
    ovn-nbctl acl-add ls ${direction}-lport 4 tcp allow-stateless
done
ovn-nbctl --wait=sb sync

# TCP packets should not go to conntrack anymore.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_tcp}"
AT_CHECK_UNQUOTED([ovn-trace --minimal ls "${flow}"], [0], [dnl
# tcp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80,tcp_flags=0
output("lsp2");
])

# UDP packets still go to conntrack.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_udp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# udp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80
ct_next(ct_state=new|trk) {
    ct_next(ct_state=new|trk) {
        output("lsp2");
    };
};
])

# Add a load balancer.
ovn-nbctl lb-add lb-tcp 66.66.66.66:80 42.42.42.2:8080 tcp
ovn-nbctl lb-add lb-udp 66.66.66.66:80 42.42.42.2:8080 udp
ovn-nbctl ls-lb-add ls lb-tcp
ovn-nbctl ls-lb-add ls lb-udp

# Remove stateless for TCP.
ovn-nbctl acl-del ls
ovn-nbctl --wait=sb sync

# TCP packets should go to conntrack.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_tcp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# tcp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80,tcp_flags=0
ct_lb {
    ct_lb {
        output("lsp2");
    };
};
])

# UDP packets should go to conntrack.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_udp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# udp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80
ct_lb {
    ct_lb {
        output("lsp2");
    };
};
])

# Allow stateless for TCP.
for direction in from to; do
    ovn-nbctl acl-add ls ${direction}-lport 4 tcp allow-stateless
done
ovn-nbctl --wait=sb sync

# TCP packets should go to conntrack for load balancing.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_tcp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# tcp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80,tcp_flags=0
ct_lb {
    ct_lb {
        output("lsp2");
    };
};
])

# UDP packets still go to conntrack.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_udp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# udp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80
ct_lb {
    ct_lb {
        output("lsp2");
    };
};
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- ACL allow-stateless omit conntrack - Port_Group])
ovn_start

ovn-nbctl ls-add ls
ovn-nbctl lsp-add ls lsp1
ovn-nbctl lsp-set-addresses lsp1 00:00:00:00:00:01
ovn-nbctl lsp-add ls lsp2
ovn-nbctl lsp-set-addresses lsp2 00:00:00:00:00:02

ovn-nbctl pg-add pg lsp1 lsp2

for direction in from to; do
    ovn-nbctl acl-add pg ${direction}-lport 3 "tcp" allow-related
    ovn-nbctl acl-add pg ${direction}-lport 2 "udp" allow-related
    ovn-nbctl acl-add pg ${direction}-lport 1 "ip" drop
done
ovn-nbctl --wait=sb sync

lsp1_inport=$(fetch_column Port_Binding tunnel_key logical_port=lsp1)
echo $lsp1_inport

flow_eth='eth.src == 00:00:00:00:00:01 && eth.dst == 00:00:00:00:00:02'
flow_ip='ip.ttl==64 && ip4.src == 42.42.42.1 && ip4.dst == 66.66.66.66'
flow_tcp='tcp && tcp.dst == 80'
flow_udp='udp && udp.dst == 80'

# TCP packets should go to conntrack.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_tcp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# tcp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80,tcp_flags=0
ct_next(ct_state=new|trk) {
    ct_next(ct_state=new|trk) {
        output("lsp2");
    };
};
])

# UDP packets should go to conntrack.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_udp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# udp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80
ct_next(ct_state=new|trk) {
    ct_next(ct_state=new|trk) {
        output("lsp2");
    };
};
])

# Allow stateless for TCP.
for direction in from to; do
    ovn-nbctl acl-add pg ${direction}-lport 4 tcp allow-stateless
done
ovn-nbctl --wait=sb sync

# TCP packets should not go to conntrack anymore.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_tcp}"
AT_CHECK_UNQUOTED([ovn-trace --minimal ls "${flow}"], [0], [dnl
# tcp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80,tcp_flags=0
output("lsp2");
])

# UDP packets still go to conntrack.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_udp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# udp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80
ct_next(ct_state=new|trk) {
    ct_next(ct_state=new|trk) {
        output("lsp2");
    };
};
])

# Add a load balancer.
ovn-nbctl lb-add lb-tcp 66.66.66.66:80 42.42.42.2:8080 tcp
ovn-nbctl lb-add lb-udp 66.66.66.66:80 42.42.42.2:8080 udp
ovn-nbctl ls-lb-add ls lb-tcp
ovn-nbctl ls-lb-add ls lb-udp

# Remove stateless for TCP.
ovn-nbctl acl-del pg
ovn-nbctl --wait=sb sync

# TCP packets should go to conntrack.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_tcp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# tcp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80,tcp_flags=0
ct_lb {
    ct_lb {
        output("lsp2");
    };
};
])

# UDP packets should go to conntrack.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_udp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# udp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80
ct_lb {
    ct_lb {
        output("lsp2");
    };
};
])

# Allow stateless for TCP.
for direction in from to; do
    ovn-nbctl acl-add pg ${direction}-lport 4 tcp allow-stateless
done
ovn-nbctl --wait=sb sync

# TCP packets should go to conntrack for load balancing.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_tcp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# tcp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80,tcp_flags=0
ct_lb {
    ct_lb {
        output("lsp2");
    };
};
])

# UDP packets still go to conntrack.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_udp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# udp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80
ct_lb {
    ct_lb {
        output("lsp2");
    };
};
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- ACL allow-stateless overrides stateful rules with higher priority - Logical_Switch])
ovn_start

ovn-nbctl ls-add ls
ovn-nbctl lsp-add ls lsp1
ovn-nbctl lsp-set-addresses lsp1 00:00:00:00:00:01
ovn-nbctl lsp-add ls lsp2
ovn-nbctl lsp-set-addresses lsp2 00:00:00:00:00:02

for direction in from to; do
    ovn-nbctl acl-add ls ${direction}-lport 3 "tcp" allow-related
    ovn-nbctl acl-add ls ${direction}-lport 3 "udp" allow
done
ovn-nbctl --wait=sb sync

flow_eth='eth.src == 00:00:00:00:00:01 && eth.dst == 00:00:00:00:00:02'
flow_ip='ip.ttl==64 && ip4.src == 42.42.42.1 && ip4.dst == 66.66.66.66'
flow_tcp='tcp && tcp.dst == 80'
flow_udp='udp && udp.dst == 80'

lsp1_inport=$(fetch_column Port_Binding tunnel_key logical_port=lsp1)

# TCP packets should go to conntrack.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_tcp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# tcp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80,tcp_flags=0
ct_next(ct_state=new|trk) {
    ct_next(ct_state=new|trk) {
        output("lsp2");
    };
};
])

# Allow stateless with *lower* priority. It always beats stateful rules.
for direction in from to; do
    ovn-nbctl acl-add ls ${direction}-lport 1 tcp allow-stateless
    ovn-nbctl acl-add ls ${direction}-lport 1 udp allow-stateless
done
ovn-nbctl --wait=sb sync

# TCP packets should not go to conntrack anymore.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_tcp}"
AT_CHECK_UNQUOTED([ovn-trace --minimal ls "${flow}"], [0], [dnl
# tcp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80,tcp_flags=0
output("lsp2");
])

# UDP packets should not go to conntrack anymore.
flow="inport == \"lsp1\" && ${flow_eth} && ${flow_ip} && ${flow_udp}"
AT_CHECK_UNQUOTED([ovn-trace --ct new --ct new --minimal ls "${flow}"], [0], [dnl
# udp,reg14=0x${lsp1_inport},vlan_tci=0x0000,dl_src=00:00:00:00:00:01,dl_dst=00:00:00:00:00:02,nw_src=42.42.42.1,nw_dst=66.66.66.66,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=80
output("lsp2");
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- check BFD config propagation to SBDB])
AT_KEYWORDS([northd-bfd])
ovn_start

check ovn-nbctl --wait=sb lr-add r0
for i in $(seq 1 5); do
    check ovn-nbctl --wait=sb lrp-add r0 r0-sw$i 00:00:00:00:00:0$i 192.168.$i.1/24
    check ovn-nbctl --wait=sb ls-add sw$i
    check ovn-nbctl --wait=sb lsp-add sw$i sw$i-r0
    check ovn-nbctl --wait=sb lsp-set-type sw$i-r0 router
    check ovn-nbctl --wait=sb lsp-set-options sw$i-r0 router-port=r0-sw$i
    check ovn-nbctl --wait=sb lsp-set-addresses sw$i-r0 00:00:00:00:00:0$i
done

uuid=$(ovn-nbctl create bfd logical_port=r0-sw1 dst_ip=192.168.1.2 status=down min_tx=250 min_rx=250 detect_mult=10)
ovn-nbctl create bfd logical_port=r0-sw2 dst_ip=192.168.2.2 status=down min_tx=500 min_rx=500 detect_mult=20
ovn-nbctl create bfd logical_port=r0-sw3 dst_ip=192.168.3.2 status=down
ovn-nbctl create bfd logical_port=r0-sw4 dst_ip=192.168.4.2 status=down min_tx=0 detect_mult=0

wait_row_count bfd 1 logical_port=r0-sw1 detect_mult=10 dst_ip=192.168.1.2 \
                     min_rx=250 min_tx=250 status=admin_down
wait_row_count bfd 1 logical_port=r0-sw2 detect_mult=20 dst_ip=192.168.2.2 \
                     min_rx=500 min_tx=500 status=admin_down
wait_row_count bfd 1 logical_port=r0-sw3 detect_mult=5 dst_ip=192.168.3.2 \
                     min_rx=1000 min_tx=1000 status=admin_down

uuid=$(fetch_column nb:bfd _uuid logical_port=r0-sw1)
check ovn-nbctl set bfd $uuid min_tx=1000 min_rx=1000 detect_mult=100

uuid_2=$(fetch_column nb:bfd _uuid logical_port=r0-sw2)
check ovn-nbctl clear bfd $uuid_2 min_rx
wait_row_count bfd 1 logical_port=r0-sw2 min_rx=1000
wait_row_count bfd 1 logical_port=r0-sw1 min_rx=1000 min_tx=1000 detect_mult=100

check ovn-nbctl --bfd=$uuid lr-route-add r0 100.0.0.0/8 192.168.1.2
wait_column down bfd status logical_port=r0-sw1
AT_CHECK([ovn-nbctl lr-route-list r0 | grep 192.168.1.2 | grep -q bfd],[0])

check ovn-nbctl --bfd lr-route-add r0 200.0.0.0/8 192.168.2.2
wait_column down bfd status logical_port=r0-sw2
AT_CHECK([ovn-nbctl lr-route-list r0 | grep 192.168.2.2 | grep -q bfd],[0])

check ovn-nbctl --bfd lr-route-add r0 240.0.0.0/8 192.168.5.2 r0-sw5
wait_column down bfd status logical_port=r0-sw5
AT_CHECK([ovn-nbctl lr-route-list r0 | grep 192.168.5.2 | grep -q bfd],[0])

route_uuid=$(fetch_column nb:logical_router_static_route _uuid ip_prefix="100.0.0.0/8")
check ovn-nbctl clear logical_router_static_route $route_uuid bfd
wait_column admin_down bfd status logical_port=r0-sw1

ovn-nbctl destroy bfd $uuid
wait_row_count bfd 3

AT_CLEANUP
])

AT_SETUP([ovn -- check LSP attached to multiple LS])
ovn_start

check ovn-nbctl ls-add ls1 \
    -- ls-add ls2 \
    -- lsp-add ls1 p1
check ovn-nbctl --wait=sb sync

uuid=$(fetch_column nb:Logical_Switch_Port _uuid name=p1)
check ovn-nbctl set Logical_Switch ls2 ports=$uuid
check ovn-nbctl --wait=sb sync

AT_CHECK([grep -qE 'duplicate logical port p1' northd/ovn-northd.log], [0])

AT_CLEANUP

AT_SETUP([ovn -- check LRP attached to multiple LR])
ovn_start

check ovn-nbctl lr-add lr1 \
    -- lr-add lr2 \
    -- lrp-add lr1 p1 00:00:00:00:00:01 10.0.0.1/24
check ovn-nbctl --wait=sb sync

uuid=$(fetch_column nb:Logical_Router_Port _uuid name=p1)
check ovn-nbctl set Logical_Router lr2 ports=$uuid
check ovn-nbctl --wait=sb sync

AT_CHECK([grep -qE 'duplicate logical router port p1' northd/ovn-northd.log], [0])

AT_CLEANUP

AT_SETUP([ovn -- check duplicate LSP/LRP])
ovn_start

check ovn-nbctl ls-add ls \
    -- lsp-add ls p1 \
    -- lr-add lr \
    -- lrp-add lr p1 00:00:00:00:00:01 10.0.0.1/24
check ovn-nbctl --wait=sb sync

AT_CHECK([grep -qE 'duplicate logical.*port p1' northd/ovn-northd.log], [0])

AT_CLEANUP

AT_SETUP([ovn -- Port_Binding.up backwards compatibility])
ovn_start

ovn-nbctl ls-add ls1
ovn-nbctl --wait=sb lsp-add ls1 lsp1

# Simulate the fact that lsp1 had been previously bound on hv1 by an
# ovn-controller running an older version.
ovn-sbctl \
    --id=@e create encap chassis_name=hv1 ip="192.168.0.1" type="geneve" \
    -- --id=@c create chassis name=hv1 encaps=@e \
    -- set Port_Binding lsp1 chassis=@c

wait_for_ports_up lsp1

# Simulate the fact that hv1 is aware of Port_Binding.up, ovn-northd
# should transition the port state to down.
check ovn-sbctl set chassis hv1 other_config:port-up-notif=true
wait_row_count nb:Logical_Switch_Port 1 up=false name=lsp1

AT_CLEANUP

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- Load Balancers and lb_force_snat_ip for Gateway Routers])
ovn_start

check ovn-nbctl ls-add sw0
check ovn-nbctl ls-add sw1

# Create a logical router and attach both logical switches
check ovn-nbctl lr-add lr0
check ovn-nbctl lrp-add lr0 lr0-sw0 00:00:00:00:ff:01 10.0.0.1/24
check ovn-nbctl lsp-add sw0 sw0-lr0
check ovn-nbctl lsp-set-type sw0-lr0 router
check ovn-nbctl lsp-set-addresses sw0-lr0 00:00:00:00:ff:01
check ovn-nbctl lsp-set-options sw0-lr0 router-port=lr0-sw0

check ovn-nbctl lrp-add lr0 lr0-sw1 00:00:00:00:ff:02 20.0.0.1/24
check ovn-nbctl lsp-add sw1 sw1-lr0
check ovn-nbctl lsp-set-type sw1-lr0 router
check ovn-nbctl lsp-set-addresses sw1-lr0 00:00:00:00:ff:02
check ovn-nbctl lsp-set-options sw1-lr0 router-port=lr0-sw1

check ovn-nbctl ls-add public
check ovn-nbctl lrp-add lr0 lr0-public 00:00:20:20:12:13 172.168.0.100/24
check ovn-nbctl lsp-add public public-lr0
check ovn-nbctl lsp-set-type public-lr0 router
check ovn-nbctl lsp-set-addresses public-lr0 router
check ovn-nbctl lsp-set-options public-lr0 router-port=lr0-public

check ovn-nbctl lb-add lb1 10.0.0.10:80 10.0.0.4:8080
check ovn-nbctl lr-lb-add lr0 lb1
check ovn-nbctl set logical_router lr0 options:chassis=ch1

check ovn-nbctl --wait=sb sync

ovn-sbctl dump-flows lr0 > lr0flows
AT_CAPTURE_FILE([lr0flows])

AT_CHECK([grep "lr_in_unsnat" lr0flows | sort], [0], [dnl
  table=5 (lr_in_unsnat       ), priority=0    , match=(1), action=(next;)
])

AT_CHECK([grep "lr_in_dnat" lr0flows | sort], [0], [dnl
  table=6 (lr_in_dnat         ), priority=0    , match=(1), action=(next;)
  table=6 (lr_in_dnat         ), priority=120  , match=(ct.est && ip && ip4.dst == 10.0.0.10 && tcp && tcp.dst == 80), action=(ct_dnat;)
  table=6 (lr_in_dnat         ), priority=120  , match=(ct.new && ip && ip4.dst == 10.0.0.10 && tcp && tcp.dst == 80), action=(ct_lb(backends=10.0.0.4:8080);)
  table=6 (lr_in_dnat         ), priority=50   , match=(ip), action=(flags.loopback = 1; ct_dnat;)
])

check ovn-nbctl --wait=sb set logical_router lr0 options:lb_force_snat_ip="20.0.0.4 aef0::4"

ovn-sbctl dump-flows lr0 > lr0flows
AT_CAPTURE_FILE([lr0flows])


AT_CHECK([grep "lr_in_unsnat" lr0flows | sort], [0], [dnl
  table=5 (lr_in_unsnat       ), priority=0    , match=(1), action=(next;)
  table=5 (lr_in_unsnat       ), priority=110  , match=(ip4 && ip4.dst == 20.0.0.4), action=(ct_snat;)
  table=5 (lr_in_unsnat       ), priority=110  , match=(ip6 && ip6.dst == aef0::4), action=(ct_snat;)
])

AT_CHECK([grep "lr_in_dnat" lr0flows | sort], [0], [dnl
  table=6 (lr_in_dnat         ), priority=0    , match=(1), action=(next;)
  table=6 (lr_in_dnat         ), priority=120  , match=(ct.est && ip && ip4.dst == 10.0.0.10 && tcp && tcp.dst == 80), action=(flags.force_snat_for_lb = 1; ct_dnat;)
  table=6 (lr_in_dnat         ), priority=120  , match=(ct.new && ip && ip4.dst == 10.0.0.10 && tcp && tcp.dst == 80), action=(flags.force_snat_for_lb = 1; ct_lb(backends=10.0.0.4:8080);)
  table=6 (lr_in_dnat         ), priority=50   , match=(ip), action=(flags.loopback = 1; ct_dnat;)
])

AT_CHECK([grep "lr_out_snat" lr0flows | sort], [0], [dnl
  table=1 (lr_out_snat        ), priority=0    , match=(1), action=(next;)
  table=1 (lr_out_snat        ), priority=100  , match=(flags.force_snat_for_lb == 1 && ip4), action=(ct_snat(20.0.0.4);)
  table=1 (lr_out_snat        ), priority=100  , match=(flags.force_snat_for_lb == 1 && ip6), action=(ct_snat(aef0::4);)
  table=1 (lr_out_snat        ), priority=120  , match=(nd_ns), action=(next;)
])

check ovn-nbctl --wait=sb set logical_router lr0 options:lb_force_snat_ip="router_ip"

ovn-sbctl dump-flows lr0 > lr0flows
AT_CAPTURE_FILE([lr0flows])

AT_CHECK([grep "lr_in_ip_input" lr0flows | grep "priority=60" | sort], [0], [dnl
])

AT_CHECK([grep "lr_in_unsnat" lr0flows | sort], [0], [dnl
  table=5 (lr_in_unsnat       ), priority=0    , match=(1), action=(next;)
  table=5 (lr_in_unsnat       ), priority=110  , match=(inport == "lr0-public" && ip4.dst == 172.168.0.100), action=(ct_snat;)
  table=5 (lr_in_unsnat       ), priority=110  , match=(inport == "lr0-sw0" && ip4.dst == 10.0.0.1), action=(ct_snat;)
  table=5 (lr_in_unsnat       ), priority=110  , match=(inport == "lr0-sw1" && ip4.dst == 20.0.0.1), action=(ct_snat;)
])

AT_CHECK([grep "lr_in_dnat" lr0flows | sort], [0], [dnl
  table=6 (lr_in_dnat         ), priority=0    , match=(1), action=(next;)
  table=6 (lr_in_dnat         ), priority=120  , match=(ct.est && ip && ip4.dst == 10.0.0.10 && tcp && tcp.dst == 80), action=(flags.force_snat_for_lb = 1; ct_dnat;)
  table=6 (lr_in_dnat         ), priority=120  , match=(ct.new && ip && ip4.dst == 10.0.0.10 && tcp && tcp.dst == 80), action=(flags.force_snat_for_lb = 1; ct_lb(backends=10.0.0.4:8080);)
  table=6 (lr_in_dnat         ), priority=50   , match=(ip), action=(flags.loopback = 1; ct_dnat;)
])

AT_CHECK([grep "lr_out_snat" lr0flows | sort], [0], [dnl
  table=1 (lr_out_snat        ), priority=0    , match=(1), action=(next;)
  table=1 (lr_out_snat        ), priority=110  , match=(flags.force_snat_for_lb == 1 && ip4 && outport == "lr0-public"), action=(ct_snat(172.168.0.100);)
  table=1 (lr_out_snat        ), priority=110  , match=(flags.force_snat_for_lb == 1 && ip4 && outport == "lr0-sw0"), action=(ct_snat(10.0.0.1);)
  table=1 (lr_out_snat        ), priority=110  , match=(flags.force_snat_for_lb == 1 && ip4 && outport == "lr0-sw1"), action=(ct_snat(20.0.0.1);)
  table=1 (lr_out_snat        ), priority=120  , match=(nd_ns), action=(next;)
])

check ovn-nbctl --wait=sb remove logical_router lr0 options chassis

ovn-sbctl dump-flows lr0 > lr0flows
AT_CAPTURE_FILE([lr0flows])

AT_CHECK([grep "lr_in_unsnat" lr0flows | sort], [0], [dnl
  table=5 (lr_in_unsnat       ), priority=0    , match=(1), action=(next;)
])

AT_CHECK([grep "lr_out_snat" lr0flows | sort], [0], [dnl
  table=1 (lr_out_snat        ), priority=0    , match=(1), action=(next;)
  table=1 (lr_out_snat        ), priority=120  , match=(nd_ns), action=(next;)
])

check ovn-nbctl set logical_router lr0 options:chassis=ch1
check ovn-nbctl --wait=sb add logical_router_port lr0-sw1 networks "bef0\:\:1/64"

ovn-sbctl dump-flows lr0 > lr0flows
AT_CAPTURE_FILE([lr0flows])

AT_CHECK([grep "lr_in_unsnat" lr0flows | sort], [0], [dnl
  table=5 (lr_in_unsnat       ), priority=0    , match=(1), action=(next;)
  table=5 (lr_in_unsnat       ), priority=110  , match=(inport == "lr0-public" && ip4.dst == 172.168.0.100), action=(ct_snat;)
  table=5 (lr_in_unsnat       ), priority=110  , match=(inport == "lr0-sw0" && ip4.dst == 10.0.0.1), action=(ct_snat;)
  table=5 (lr_in_unsnat       ), priority=110  , match=(inport == "lr0-sw1" && ip4.dst == 20.0.0.1), action=(ct_snat;)
  table=5 (lr_in_unsnat       ), priority=110  , match=(inport == "lr0-sw1" && ip6.dst == bef0::1), action=(ct_snat;)
])

AT_CHECK([grep "lr_in_dnat" lr0flows | sort], [0], [dnl
  table=6 (lr_in_dnat         ), priority=0    , match=(1), action=(next;)
  table=6 (lr_in_dnat         ), priority=120  , match=(ct.est && ip && ip4.dst == 10.0.0.10 && tcp && tcp.dst == 80), action=(flags.force_snat_for_lb = 1; ct_dnat;)
  table=6 (lr_in_dnat         ), priority=120  , match=(ct.new && ip && ip4.dst == 10.0.0.10 && tcp && tcp.dst == 80), action=(flags.force_snat_for_lb = 1; ct_lb(backends=10.0.0.4:8080);)
  table=6 (lr_in_dnat         ), priority=50   , match=(ip), action=(flags.loopback = 1; ct_dnat;)
])

AT_CHECK([grep "lr_out_snat" lr0flows | sort], [0], [dnl
  table=1 (lr_out_snat        ), priority=0    , match=(1), action=(next;)
  table=1 (lr_out_snat        ), priority=110  , match=(flags.force_snat_for_lb == 1 && ip4 && outport == "lr0-public"), action=(ct_snat(172.168.0.100);)
  table=1 (lr_out_snat        ), priority=110  , match=(flags.force_snat_for_lb == 1 && ip4 && outport == "lr0-sw0"), action=(ct_snat(10.0.0.1);)
  table=1 (lr_out_snat        ), priority=110  , match=(flags.force_snat_for_lb == 1 && ip4 && outport == "lr0-sw1"), action=(ct_snat(20.0.0.1);)
  table=1 (lr_out_snat        ), priority=110  , match=(flags.force_snat_for_lb == 1 && ip6 && outport == "lr0-sw1"), action=(ct_snat(bef0::1);)
  table=1 (lr_out_snat        ), priority=120  , match=(nd_ns), action=(next;)
])

check ovn-nbctl --wait=sb lb-add lb2 10.0.0.20:80 10.0.0.40:8080
check ovn-nbctl --wait=sb set load_balancer lb2 options:skip_snat=true
check ovn-nbctl lr-lb-add lr0 lb2
check ovn-nbctl --wait=sb lb-del lb1
ovn-sbctl dump-flows lr0 > lr0flows

AT_CHECK([grep "lr_in_unsnat" lr0flows | sort], [0], [dnl
  table=5 (lr_in_unsnat       ), priority=0    , match=(1), action=(next;)
  table=5 (lr_in_unsnat       ), priority=110  , match=(inport == "lr0-public" && ip4.dst == 172.168.0.100), action=(ct_snat;)
  table=5 (lr_in_unsnat       ), priority=110  , match=(inport == "lr0-sw0" && ip4.dst == 10.0.0.1), action=(ct_snat;)
  table=5 (lr_in_unsnat       ), priority=110  , match=(inport == "lr0-sw1" && ip4.dst == 20.0.0.1), action=(ct_snat;)
  table=5 (lr_in_unsnat       ), priority=110  , match=(inport == "lr0-sw1" && ip6.dst == bef0::1), action=(ct_snat;)
])

AT_CHECK([grep "lr_in_dnat" lr0flows | grep skip_snat_for_lb | sort], [0], [dnl
  table=6 (lr_in_dnat         ), priority=120  , match=(ct.est && ip && ip4.dst == 10.0.0.20 && tcp && tcp.dst == 80), action=(flags.skip_snat_for_lb = 1; ct_dnat;)
  table=6 (lr_in_dnat         ), priority=120  , match=(ct.new && ip && ip4.dst == 10.0.0.20 && tcp && tcp.dst == 80), action=(flags.skip_snat_for_lb = 1; ct_lb(backends=10.0.0.40:8080);)
])

AT_CHECK([grep "lr_out_snat" lr0flows | grep skip_snat_for_lb | sort], [0], [dnl
  table=1 (lr_out_snat        ), priority=120  , match=(flags.skip_snat_for_lb == 1 && ip), action=(next;)
])

AT_CLEANUP
])

AT_SETUP([ovn -- HA chassis group cleanup for external port ])
ovn_start

check ovn-nbctl ls-add sw0
check ovn-nbctl lsp-add sw0 sw0-p1
check ovn-nbctl lsp-set-type sw0-p1 external

check ovn-sbctl chassis-add ch1 geneve 127.0.0.1
check ovn-sbctl chassis-add ch2 geneve 127.0.0.2

check ovn-nbctl ha-chassis-group-add hagrp1
check ovn-nbctl ha-chassis-group-add-chassis hagrp1 ch1 20
check ovn-nbctl --wait=sb ha-chassis-group-add-chassis hagrp1 ch2 10

ha_grp1_uuid=$(fetch_column nb:ha_chassis_group _uuid)
echo "ha grp1 uuid = $ha_grp1_uuid"
ovn-nbctl list ha_chassis_group
check ovn-nbctl set logical_switch_port sw0-p1 ha_chassis_group=$ha_grp1_uuid

wait_row_count ha_chassis_group 1
check ovn-nbctl clear logical_switch_port sw0-p1 ha_chassis_group
wait_row_count ha_chassis_group 0

check ovn-nbctl set logical_switch_port sw0-p1 ha_chassis_group=$ha_grp1_uuid
wait_row_count ha_chassis_group 1
sb_ha_grp1_uuid=$(fetch_column ha_chassis_group _uuid)

echo
echo "__file__:__line__:Check that port_binding sw0-p1 has ha_chassis_group set"

check_column "$sb_ha_grp1_uuid" Port_Binding ha_chassis_group logical_port=sw0-p1

AS_BOX([Clear ha_chassis_group for sw0-p1 and reset port type to normal port in the same txn])

check ovn-nbctl clear logical_switch_port sw0-p1 ha_chassis_group -- set logical_switch_port sw0-p1 'type=""'
wait_row_count ha_chassis_group 0
check_column "" Port_Binding chassis logical_port=sw0-p1

AT_CLEANUP

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- FDB cleanup])

ovn_start

ovn-nbctl ls-add sw0
ovn-nbctl lsp-add sw0 sw0-p1
ovn-nbctl lsp-add sw0 sw0-p2
ovn-nbctl lsp-add sw0 sw0-p3

ovn-nbctl ls-add sw1
ovn-nbctl lsp-add sw1 sw1-p1
ovn-nbctl lsp-add sw1 sw1-p2
ovn-nbctl --wait=sb lsp-add sw1 sw1-p3

sw0_key=$(fetch_column datapath_binding tunnel_key external_ids:name=sw0)
sw1_key=$(fetch_column datapath_binding tunnel_key external_ids:name=sw1)
sw0p1_key=$(fetch_column port_binding tunnel_key logical_port=sw0-p1)
sw0p2_key=$(fetch_column port_binding tunnel_key logical_port=sw0-p2)
sw1p1_key=$(fetch_column port_binding tunnel_key logical_port=sw1-p1)

ovn-sbctl create FDB mac="00\:00\:00\:00\:00\:01" dp_key=$sw0_key port_key=$sw0p1_key
ovn-sbctl create FDB mac="00\:00\:00\:00\:00\:02" dp_key=$sw0_key port_key=$sw0p1_key
ovn-sbctl create FDB mac="00\:00\:00\:00\:00\:03" dp_key=$sw0_key port_key=$sw0p2_key
ovn-sbctl create FDB mac="00\:00\:00\:00\:01\:01" dp_key=$sw1_key port_key=$sw1p1_key
ovn-sbctl create FDB mac="00\:00\:00\:00\:01\:02" dp_key=$sw1_key port_key=$sw1p1_key
ovn-sbctl create FDB mac="00\:00\:00\:00\:01\:03" dp_key=$sw1_key port_key=$sw1p1_key

wait_row_count FDB 6

ovn-sbctl create fdb mac="00\:00\:00\:00\:01\:03" dp_key=$sw1_key port_key=10
wait_row_count FDB 6
ovn-sbctl create fdb mac="00\:00\:00\:00\:01\:03" dp_key=4 port_key=10
wait_row_count FDB 6

ovn-nbctl --wait=sb ls-del sw1
wait_row_count FDB 3

ovn-nbctl lsp-del sw0-p3
wait_row_count FDB 3

ovn-nbctl lsp-del sw0-p1
wait_row_count FDB 1

check_column '00:00:00:00:00:03' FDB mac
ovn-sbctl list fdb

check_column $sw0_key FDB dp_key
check_column $sw0p2_key FDB port_key

ovn-nbctl --wait=sb lsp-add sw0-p1
wait_row_count FDB 1

ovn-nbctl lsp-del sw0-p2
ovn-nbctl lsp-add sw0-p2
wait_row_count FDB 0

ovn-sbctl list FDB

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- LS load balancer logical flows])
ovn_start

check ovn-nbctl \
    -- ls-add sw0 \
    -- lb-add lb0 10.0.0.10:80 10.0.0.4:8080 \
    -- ls-lb-add sw0 lb0

check ovn-nbctl lr-add lr0
check ovn-nbctl lrp-add lr0 lr0-sw0 00:00:00:00:ff:01 10.0.0.1/24
check ovn-nbctl lsp-add sw0 sw0-lr0
check ovn-nbctl lsp-set-type sw0-lr0 router
check ovn-nbctl lsp-set-addresses sw0-lr0 00:00:00:00:ff:01
check ovn-nbctl lsp-set-options sw0-lr0 router-port=lr0-sw0

check ovn-nbctl --wait=sb sync

check_stateful_flows() {
    ovn-sbctl dump-flows sw0 > sw0flows
    AT_CAPTURE_FILE([sw0flows])

    AT_CHECK([grep "ls_in_pre_lb" sw0flows | sort], [0], [dnl
  table=6 (ls_in_pre_lb       ), priority=0    , match=(1), action=(next;)
  table=6 (ls_in_pre_lb       ), priority=100  , match=(ip), action=(reg0[[2]] = 1; next;)
  table=6 (ls_in_pre_lb       ), priority=110  , match=(eth.dst == $svc_monitor_mac), action=(next;)
  table=6 (ls_in_pre_lb       ), priority=110  , match=(eth.mcast), action=(next;)
  table=6 (ls_in_pre_lb       ), priority=110  , match=(ip && inport == "sw0-lr0"), action=(next;)
  table=6 (ls_in_pre_lb       ), priority=110  , match=(nd || nd_rs || nd_ra || mldv1 || mldv2), action=(next;)
])

    AT_CHECK([grep "ls_in_pre_stateful" sw0flows | sort], [0], [dnl
  table=7 (ls_in_pre_stateful ), priority=0    , match=(1), action=(next;)
  table=7 (ls_in_pre_stateful ), priority=100  , match=(reg0[[0]] == 1), action=(ct_next;)
  table=7 (ls_in_pre_stateful ), priority=110  , match=(reg0[[2]] == 1), action=(ct_lb;)
  table=7 (ls_in_pre_stateful ), priority=120  , match=(reg0[[2]] == 1 && ip4 && sctp), action=(reg1 = ip4.dst; reg2[[0..15]] = sctp.dst; ct_lb;)
  table=7 (ls_in_pre_stateful ), priority=120  , match=(reg0[[2]] == 1 && ip4 && tcp), action=(reg1 = ip4.dst; reg2[[0..15]] = tcp.dst; ct_lb;)
  table=7 (ls_in_pre_stateful ), priority=120  , match=(reg0[[2]] == 1 && ip4 && udp), action=(reg1 = ip4.dst; reg2[[0..15]] = udp.dst; ct_lb;)
  table=7 (ls_in_pre_stateful ), priority=120  , match=(reg0[[2]] == 1 && ip6 && sctp), action=(xxreg1 = ip6.dst; reg2[[0..15]] = sctp.dst; ct_lb;)
  table=7 (ls_in_pre_stateful ), priority=120  , match=(reg0[[2]] == 1 && ip6 && tcp), action=(xxreg1 = ip6.dst; reg2[[0..15]] = tcp.dst; ct_lb;)
  table=7 (ls_in_pre_stateful ), priority=120  , match=(reg0[[2]] == 1 && ip6 && udp), action=(xxreg1 = ip6.dst; reg2[[0..15]] = udp.dst; ct_lb;)
])

    AT_CHECK([grep "ls_in_stateful" sw0flows | sort], [0], [dnl
  table=12(ls_in_stateful     ), priority=0    , match=(1), action=(next;)
  table=12(ls_in_stateful     ), priority=100  , match=(reg0[[1]] == 1), action=(ct_commit { ct_label.blocked = 0; }; next;)
  table=12(ls_in_stateful     ), priority=120  , match=(ct.new && ip4.dst == 10.0.0.10 && tcp.dst == 80), action=(reg1 = 10.0.0.10; reg2[[0..15]] = 80; ct_lb(backends=10.0.0.4:8080);)
])

    AT_CHECK([grep "ls_out_pre_lb" sw0flows | sort], [0], [dnl
  table=0 (ls_out_pre_lb      ), priority=0    , match=(1), action=(next;)
  table=0 (ls_out_pre_lb      ), priority=100  , match=(ip), action=(reg0[[2]] = 1; next;)
  table=0 (ls_out_pre_lb      ), priority=110  , match=(eth.mcast), action=(next;)
  table=0 (ls_out_pre_lb      ), priority=110  , match=(eth.src == $svc_monitor_mac), action=(next;)
  table=0 (ls_out_pre_lb      ), priority=110  , match=(ip && outport == "sw0-lr0"), action=(next;)
  table=0 (ls_out_pre_lb      ), priority=110  , match=(nd || nd_rs || nd_ra || mldv1 || mldv2), action=(next;)
])

    AT_CHECK([grep "ls_out_pre_stateful" sw0flows | sort], [0], [dnl
  table=2 (ls_out_pre_stateful), priority=0    , match=(1), action=(next;)
  table=2 (ls_out_pre_stateful), priority=100  , match=(reg0[[0]] == 1), action=(ct_next;)
  table=2 (ls_out_pre_stateful), priority=110  , match=(reg0[[2]] == 1), action=(ct_lb;)
])

    AT_CHECK([grep "ls_out_lb" sw0flows | sort], [0], [])

    AT_CHECK([grep "ls_out_stateful" sw0flows | sort], [0], [dnl
  table=7 (ls_out_stateful    ), priority=0    , match=(1), action=(next;)
  table=7 (ls_out_stateful    ), priority=100  , match=(reg0[[1]] == 1), action=(ct_commit { ct_label.blocked = 0; }; next;)
])
}

check_stateful_flows

# Add few ACLs
check ovn-nbctl --wait=sb acl-add sw0 from-lport 1002 "ip4 && tcp && tcp.dst == 80" allow-related
check ovn-nbctl --wait=sb acl-add sw0 to-lport 1002 "ip4 && tcp && tcp.src == 80" drop

check_stateful_flows

# Remove load balancer from sw0
check ovn-nbctl --wait=sb ls-lb-del sw0 lb0

ovn-sbctl dump-flows sw0 > sw0flows
AT_CAPTURE_FILE([sw0flows])

AT_CHECK([grep "ls_in_pre_lb" sw0flows | sort], [0], [dnl
  table=6 (ls_in_pre_lb       ), priority=0    , match=(1), action=(next;)
  table=6 (ls_in_pre_lb       ), priority=110  , match=(eth.dst == $svc_monitor_mac), action=(next;)
  table=6 (ls_in_pre_lb       ), priority=110  , match=(eth.mcast), action=(next;)
  table=6 (ls_in_pre_lb       ), priority=110  , match=(ip && inport == "sw0-lr0"), action=(next;)
  table=6 (ls_in_pre_lb       ), priority=110  , match=(nd || nd_rs || nd_ra || mldv1 || mldv2), action=(next;)
])

AT_CHECK([grep "ls_in_pre_stateful" sw0flows | sort], [0], [dnl
  table=7 (ls_in_pre_stateful ), priority=0    , match=(1), action=(next;)
  table=7 (ls_in_pre_stateful ), priority=100  , match=(reg0[[0]] == 1), action=(ct_next;)
  table=7 (ls_in_pre_stateful ), priority=110  , match=(reg0[[2]] == 1), action=(ct_lb;)
  table=7 (ls_in_pre_stateful ), priority=120  , match=(reg0[[2]] == 1 && ip4 && sctp), action=(reg1 = ip4.dst; reg2[[0..15]] = sctp.dst; ct_lb;)
  table=7 (ls_in_pre_stateful ), priority=120  , match=(reg0[[2]] == 1 && ip4 && tcp), action=(reg1 = ip4.dst; reg2[[0..15]] = tcp.dst; ct_lb;)
  table=7 (ls_in_pre_stateful ), priority=120  , match=(reg0[[2]] == 1 && ip4 && udp), action=(reg1 = ip4.dst; reg2[[0..15]] = udp.dst; ct_lb;)
  table=7 (ls_in_pre_stateful ), priority=120  , match=(reg0[[2]] == 1 && ip6 && sctp), action=(xxreg1 = ip6.dst; reg2[[0..15]] = sctp.dst; ct_lb;)
  table=7 (ls_in_pre_stateful ), priority=120  , match=(reg0[[2]] == 1 && ip6 && tcp), action=(xxreg1 = ip6.dst; reg2[[0..15]] = tcp.dst; ct_lb;)
  table=7 (ls_in_pre_stateful ), priority=120  , match=(reg0[[2]] == 1 && ip6 && udp), action=(xxreg1 = ip6.dst; reg2[[0..15]] = udp.dst; ct_lb;)
])

AT_CHECK([grep "ls_in_stateful" sw0flows | sort], [0], [dnl
  table=12(ls_in_stateful     ), priority=0    , match=(1), action=(next;)
  table=12(ls_in_stateful     ), priority=100  , match=(reg0[[1]] == 1), action=(ct_commit { ct_label.blocked = 0; }; next;)
])

AT_CHECK([grep "ls_out_pre_lb" sw0flows | sort], [0], [dnl
  table=0 (ls_out_pre_lb      ), priority=0    , match=(1), action=(next;)
  table=0 (ls_out_pre_lb      ), priority=110  , match=(eth.mcast), action=(next;)
  table=0 (ls_out_pre_lb      ), priority=110  , match=(eth.src == $svc_monitor_mac), action=(next;)
  table=0 (ls_out_pre_lb      ), priority=110  , match=(ip && outport == "sw0-lr0"), action=(next;)
  table=0 (ls_out_pre_lb      ), priority=110  , match=(nd || nd_rs || nd_ra || mldv1 || mldv2), action=(next;)
])

AT_CHECK([grep "ls_out_pre_stateful" sw0flows | sort], [0], [dnl
  table=2 (ls_out_pre_stateful), priority=0    , match=(1), action=(next;)
  table=2 (ls_out_pre_stateful), priority=100  , match=(reg0[[0]] == 1), action=(ct_next;)
  table=2 (ls_out_pre_stateful), priority=110  , match=(reg0[[2]] == 1), action=(ct_lb;)
])

AT_CHECK([grep "ls_out_stateful" sw0flows | sort], [0], [dnl
  table=7 (ls_out_stateful    ), priority=0    , match=(1), action=(next;)
  table=7 (ls_out_stateful    ), priority=100  , match=(reg0[[1]] == 1), action=(ct_commit { ct_label.blocked = 0; }; next;)
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- ct.inv usage])
ovn_start

check ovn-nbctl ls-add sw0
check ovn-nbctl lsp-add sw0 sw0p1

check ovn-nbctl --wait=sb acl-add sw0 to-lport 1002 ip allow-related

ovn-sbctl dump-flows sw0 > sw0flows
AT_CAPTURE_FILE([sw0flows])

AT_CHECK([grep -w "ls_in_acl" sw0flows | grep 6553 | sort], [0], [dnl
  table=9 (ls_in_acl          ), priority=65532, match=(!ct.est && ct.rel && !ct.new && !ct.inv && ct_label.blocked == 0), action=(next;)
  table=9 (ls_in_acl          ), priority=65532, match=(ct.est && !ct.rel && !ct.new && !ct.inv && ct.rpl && ct_label.blocked == 0), action=(next;)
  table=9 (ls_in_acl          ), priority=65532, match=(ct.inv || (ct.est && ct.rpl && ct_label.blocked == 1)), action=(drop;)
  table=9 (ls_in_acl          ), priority=65532, match=(nd || nd_ra || nd_rs || mldv1 || mldv2), action=(next;)
])

AT_CHECK([grep -w "ls_out_acl" sw0flows | grep 6553 | sort], [0], [dnl
  table=4 (ls_out_acl         ), priority=65532, match=(!ct.est && ct.rel && !ct.new && !ct.inv && ct_label.blocked == 0), action=(next;)
  table=4 (ls_out_acl         ), priority=65532, match=(ct.est && !ct.rel && !ct.new && !ct.inv && ct.rpl && ct_label.blocked == 0), action=(next;)
  table=4 (ls_out_acl         ), priority=65532, match=(ct.inv || (ct.est && ct.rpl && ct_label.blocked == 1)), action=(drop;)
  table=4 (ls_out_acl         ), priority=65532, match=(nd || nd_ra || nd_rs || mldv1 || mldv2), action=(next;)
])

# Disable ct.inv usage.
check ovn-nbctl --wait=sb set NB_Global . options:use_ct_inv_match=false

ovn-sbctl dump-flows sw0 > sw0flows
AT_CAPTURE_FILE([sw0flows])

AT_CHECK([grep -w "ls_in_acl" sw0flows | grep 6553 | sort], [0], [dnl
  table=9 (ls_in_acl          ), priority=65532, match=(!ct.est && ct.rel && !ct.new && ct_label.blocked == 0), action=(next;)
  table=9 (ls_in_acl          ), priority=65532, match=((ct.est && ct.rpl && ct_label.blocked == 1)), action=(drop;)
  table=9 (ls_in_acl          ), priority=65532, match=(ct.est && !ct.rel && !ct.new && ct.rpl && ct_label.blocked == 0), action=(next;)
  table=9 (ls_in_acl          ), priority=65532, match=(nd || nd_ra || nd_rs || mldv1 || mldv2), action=(next;)
])

AT_CHECK([grep -w "ls_out_acl" sw0flows | grep 6553 | sort], [0], [dnl
  table=4 (ls_out_acl         ), priority=65532, match=(!ct.est && ct.rel && !ct.new && ct_label.blocked == 0), action=(next;)
  table=4 (ls_out_acl         ), priority=65532, match=((ct.est && ct.rpl && ct_label.blocked == 1)), action=(drop;)
  table=4 (ls_out_acl         ), priority=65532, match=(ct.est && !ct.rel && !ct.new && ct.rpl && ct_label.blocked == 0), action=(next;)
  table=4 (ls_out_acl         ), priority=65532, match=(nd || nd_ra || nd_rs || mldv1 || mldv2), action=(next;)
])

AT_CHECK([grep -c "ct.inv" sw0flows], [1], [dnl
0
])

# Enable ct.inv usage.
check ovn-nbctl --wait=sb set NB_Global . options:use_ct_inv_match=true

ovn-sbctl dump-flows sw0 > sw0flows
AT_CAPTURE_FILE([sw0flows])

AT_CHECK([grep -w "ls_in_acl" sw0flows | grep 6553 | sort], [0], [dnl
  table=9 (ls_in_acl          ), priority=65532, match=(!ct.est && ct.rel && !ct.new && !ct.inv && ct_label.blocked == 0), action=(next;)
  table=9 (ls_in_acl          ), priority=65532, match=(ct.est && !ct.rel && !ct.new && !ct.inv && ct.rpl && ct_label.blocked == 0), action=(next;)
  table=9 (ls_in_acl          ), priority=65532, match=(ct.inv || (ct.est && ct.rpl && ct_label.blocked == 1)), action=(drop;)
  table=9 (ls_in_acl          ), priority=65532, match=(nd || nd_ra || nd_rs || mldv1 || mldv2), action=(next;)
])

AT_CHECK([grep -w "ls_out_acl" sw0flows | grep 6553 | sort], [0], [dnl
  table=4 (ls_out_acl         ), priority=65532, match=(!ct.est && ct.rel && !ct.new && !ct.inv && ct_label.blocked == 0), action=(next;)
  table=4 (ls_out_acl         ), priority=65532, match=(ct.est && !ct.rel && !ct.new && !ct.inv && ct.rpl && ct_label.blocked == 0), action=(next;)
  table=4 (ls_out_acl         ), priority=65532, match=(ct.inv || (ct.est && ct.rpl && ct_label.blocked == 1)), action=(drop;)
  table=4 (ls_out_acl         ), priority=65532, match=(nd || nd_ra || nd_rs || mldv1 || mldv2), action=(next;)
])

AT_CHECK([grep -c "ct.inv" sw0flows], [0], [dnl
6
])

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- northd ssl file change])
AT_SKIP_IF([test "$HAVE_OPENSSL" = no])
PKIDIR="$(cd $abs_top_builddir/tests && pwd)"
AT_SKIP_IF([expr "$PKIDIR" : ".*[[ 	'\"
\\]]"])
ovn_start --backup-northd=none

as northd
OVS_APP_EXIT_AND_WAIT([NORTHD_TYPE])

as ovn-sb
OVS_APP_EXIT_AND_WAIT([ovsdb-server])

key_server=testpki-test-privkey.pem
cert_server=testpki-test-cert.pem
cacert=testpki-cacert.pem

cd ovn-sb
rm ovsdb-server.log
ssl_options="--remote=pssl:0:127.0.0.1 ovn-sb.db -p $PKIDIR/$key_server -c $PKIDIR/$cert_server -C $PKIDIR/$cacert"
AT_CHECK([ovsdb-server --detach --no-chdir --pidfile --log-file $ssl_options], [0], [], [stderr])
on_exit "kill `cat ovsdb-server.pid`"
PARSE_LISTENING_PORT([ovsdb-server.log], [TCP_PORT])
cd ..

key=testpki-hv1-privkey.pem
cert=testpki-hv1-cert.pem

key2=testpki-hv2-privkey.pem
cert3=testpki-hv3-cert.pem

# Use mismatched key and cert when restarting using SSL options
cp $PKIDIR/$key2 $key
cp $PKIDIR/$cert3 $cert
cp $PKIDIR/$cacert $cacert
as northd
start_daemon ovn$NORTHD_TYPE -vjsonrpc \
    --ovnnb-db=$OVN_NB_DB --ovnsb-db=ssl:127.0.0.1:$TCP_PORT \
    -p $key -c $cert -C $cacert

# SSL should not connect because of key and cert mismatch
AT_FAIL_IF([ovn-nbctl --timeout=3 --wait=sb sync])

# Modify the files with the correct key and cert, and reconnect should succeed
cp $PKIDIR/$key $key
cp $PKIDIR/$cert $cert
check ovn-nbctl --wait=sb sync

OVS_APP_EXIT_AND_WAIT([NORTHD_TYPE])
AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([ovn -- ecmp routes flows])
AT_KEYWORDS([ecmp-routes-flows])
ovn_start

check ovn-sbctl chassis-add ch1 geneve 127.0.0.1

check ovn-nbctl lr-add lr0
check ovn-nbctl ls-add public
check ovn-nbctl lrp-add lr0 lr0-public 00:00:20:20:12:13 192.168.0.1/24
check ovn-nbctl lsp-add public public-lr0
check ovn-nbctl lsp-set-type public-lr0 router
check ovn-nbctl lsp-set-addresses public-lr0 router
check ovn-nbctl lsp-set-options public-lr0 router-port=lr0-public

check ovn-nbctl --wait=sb --ecmp-symmetric-reply lr-route-add lr0 1.0.0.1 192.168.0.10

ovn-sbctl dump-flows lr0 > lr0flows

AT_CHECK([grep -e "lr_in_ip_routing.*select" lr0flows |sort], [0], [dnl
])
AT_CHECK([grep -e "lr_in_ip_routing_ecmp" lr0flows |sort], [0], [dnl
  table=11(lr_in_ip_routing_ecmp), priority=150  , match=(reg8[[0..15]] == 0), action=(next;)
])

check ovn-nbctl --wait=sb --ecmp-symmetric-reply lr-route-add lr0 1.0.0.1 192.168.0.20

ovn-sbctl dump-flows lr0 > lr0flows
AT_CHECK([grep -e "lr_in_ip_routing.*select" lr0flows |sort], [0], [dnl
  table=10(lr_in_ip_routing   ), priority=65   , match=(ip4.dst == 1.0.0.1/32), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(1, 2);)
])
AT_CHECK([grep -e "lr_in_ip_routing_ecmp" lr0flows | sed 's/192\.168\.0\..0/192.168.0.??/' |sort], [0], [dnl
  table=11(lr_in_ip_routing_ecmp), priority=100  , match=(reg8[[0..15]] == 1 && reg8[[16..31]] == 1), action=(reg0 = 192.168.0.??; reg1 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; next;)
  table=11(lr_in_ip_routing_ecmp), priority=100  , match=(reg8[[0..15]] == 1 && reg8[[16..31]] == 2), action=(reg0 = 192.168.0.??; reg1 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; next;)
  table=11(lr_in_ip_routing_ecmp), priority=150  , match=(reg8[[0..15]] == 0), action=(next;)
])

# add ecmp route with wrong nexthop
check ovn-nbctl --wait=sb --ecmp-symmetric-reply lr-route-add lr0 1.0.0.1 192.168.1.20

ovn-sbctl dump-flows lr0 > lr0flows
AT_CHECK([grep -e "lr_in_ip_routing.*select" lr0flows |sort], [0], [dnl
  table=10(lr_in_ip_routing   ), priority=65   , match=(ip4.dst == 1.0.0.1/32), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(1, 2);)
])
AT_CHECK([grep -e "lr_in_ip_routing_ecmp" lr0flows | sed 's/192\.168\.0\..0/192.168.0.??/' |sort], [0], [dnl
  table=11(lr_in_ip_routing_ecmp), priority=100  , match=(reg8[[0..15]] == 1 && reg8[[16..31]] == 1), action=(reg0 = 192.168.0.??; reg1 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; next;)
  table=11(lr_in_ip_routing_ecmp), priority=100  , match=(reg8[[0..15]] == 1 && reg8[[16..31]] == 2), action=(reg0 = 192.168.0.??; reg1 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; next;)
  table=11(lr_in_ip_routing_ecmp), priority=150  , match=(reg8[[0..15]] == 0), action=(next;)
])

AT_CLEANUP
])

# Duplicated datapaths shouldn't be created, but in case it is created because
# of bug or dirty data, it should be properly deleted instead of causing
# permanent failure in northd.
OVN_FOR_EACH_NORTHD([
AT_SETUP([handling duplicated datapaths])
ovn_start

check ovn-nbctl --wait=sb ls-add ls1
ls1_uuid=$(fetch_column nb:Logical_Switch _uuid)

# create a duplicated sb datapath (and an IP_Mulicast record that references
# it) on purpose.
AT_CHECK([ovn-sbctl --id=@dp create Datapath_Binding external_ids:logical-switch=$ls1_uuid external_ids:name=ls1 tunnel_key=123 -- create IP_Multicast datapath=@dp], [0], [ignore])

# northd should delete one of the datapaths in the end
wait_row_count Datapath_Binding 1

AT_CLEANUP
])

OVN_FOR_EACH_NORTHD([
AT_SETUP([conntrack nat implies conntrack])
ovn_start

check ovn-nbctl lr-add rtr \
  -- set logical_router rtr options:chassis=hv \
  -- lrp-add rtr rtr-ls 00:00:00:00:01:00 42.42.42.1/24 \
  -- lb-add lb-test 43.43.43.43:4343 42.42.42.2:4242 tcp \
  -- lr-lb-add rtr lb-test
check ovn-nbctl --wait=sb sync

flow="eth.dst == 00:00:00:00:01:00 && inport == \"rtr-ls\" && ip4.src == 42.42.42.42 && ip4.dst == 43.43.43.43 && ip.ttl == 64 && tcp && tcp.dst == 4343"

AT_CHECK_UNQUOTED([ovn-trace --ct new --minimal "${flow}" --lb-dst 42.42.42.42:4242], [0], [dnl
# tcp,reg14=0x1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:01:00,nw_src=42.42.42.42,nw_dst=43.43.43.43,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=4343,tcp_flags=0
ct_dnat /* assuming no un-dnat entry, so no change */ {
    ct_lb {
        ip.ttl--;
        eth.src = 00:00:00:00:01:00;
        eth.dst = 00:00:00:00:00:00;
        arp {
            eth.dst = ff:ff:ff:ff:ff:ff;
            arp.spa = 0x2a2a2a01;
            arp.tpa = 0x2a2a2a02;
            arp.op = 1;
            output("rtr-ls");
        };
    };
};
])

AT_CHECK_UNQUOTED([ovn-trace --minimal "${flow}" --lb-dst 42.42.42.42:4242], [0], [dnl
# tcp,reg14=0x1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:01:00,nw_src=42.42.42.42,nw_dst=43.43.43.43,nw_tos=0,nw_ecn=0,nw_ttl=64,tp_src=0,tp_dst=4343,tcp_flags=0
ct_dnat /* assuming no un-dnat entry, so no change */ /* default (use --ct to customize) */;
])

AT_CLEANUP
])
