#
# Tests targeting performance of OVN components.
#

m4_divert_push([PREPARE_TESTS])

# vec_cmp VALUE_VEC OP-VALUE_VEC
#
# Compares each value from VALUE_VEC to the operator-value pair from the
# OP-VALUE_VEC.
#
# VALUE_VEC must be a list of values separated by a character from $IFS.
# OP-VALUE_VEC must be a list of operator-value expressions separated by a
# character from $IFS.  Operator-value expressions cannot contain any characters
# from $IFS like spaces. '=' is treated as an equality operator ('==') for
# conciseness.
#
# Returns the result of each comparison as a list of boolean values (0 or 1)
# separated by a new-line character.
vec_cmp() {
    local a b i j

    i=0
    for a in $1; do
        j=0
        for b in $2; do
            if test $i -eq $j; then
                # Replace assignment '=' with equality comparison '=='
                case "$b" in
                =[[0-9]]*) b="=$b" ;;
                esac

                echo $(($a $b))
                break
            fi
            j=$((j + 1))
        done
        i=$((i + 1))
    done
}

# vec_sub VEC_A VEC_B
#
# Subtracts two vectors:
#
#     VEC_A = [a1, a2, ...]
#     VEC_B = [b1, b2, ...]
#     OUT = [(a1 - b1), (a2 - b2), ...]
#
# VEC_A and VEC_B must be lists of values separated by a character from $IFS.
vec_sub() {
    local a b i j

    i=0
    for a in $1; do
        j=0
        for b in $2; do
            if test $i -eq $j; then
                echo $((a - b))
                break
            fi
            j=$((j + 1))
        done
        i=$((i + 1))
    done
}

# vec_fold VEC OP
#
# Reduces a vector to a single value by applying the binary operator OP (i.e.,
# one that requires two arguments) cumulatively to all vector elements from left
# to right:
#
#     VEC = [e1, e2, e3 ...]
#     OUT = (...((e1 OP e2) OP e3) OP ...)
#
# VEC must be a list of values separated by a character from $IFS.
vec_fold() {
    local first op prod

    first=1
    op=$2
    for a in $1; do
        if test $first -eq 1; then
            prod=$a
            first=0
        else
            prod=$((prod $op a))
        fi
    done
    echo $prod
}

# read_counters SANDBOXES TARGET COUNTER
#
# Prints out the coverage COUNTER for the TARGET in each of the SANDBOXES.
#
# SANDBOXES must be a list of strings separated by a character from $IFS.
read_counters() {
    local sims="$1" target="$2" counter="$3"

    for sim in $sims; do
        as $sim ovs-appctl -t "$target" coverage/read-counter "$counter" || return 1
    done
}

# counter_delta_ SANDBOXES TARGET COUNTER COMMAND
#
# Runs the COMMAND and reports the COUNTER change registered during the command
# run for the given TARGET in each of the SANDBOXES.
counter_delta_() {
    local sims="$1" target="$2" counter="$3" cmd="$4"
    local before after

    before=$(read_counters "$sims" "$target" "$counter") || return 1
    eval "$cmd" >/dev/null || return 1
    after=$(read_counters "$sims" "$target" "$counter") || return 1

    vec_sub "$after" "$before"
}

# counter_delta SANDBOXES TARGET COUNTER COMMAND
#
# Same as counter_delta_ but also prints the COUNTER values together with the
# COMMAND to standard error.
counter_delta() {
    local cmd="$4"
    local v

    v=$(counter_delta_ "$@") || return 1

    # Dump the counters and the command for troubleshooting
    echo "$v" | tr '\n' '\t' >&2
    echo "$cmd" >&2

    echo "$v"
}

# vec_cmp_counter_delta SANDBOXES TARGET COUNTER CONDS COMMAND
#
# Check if COUNTER change in the TARGET app in each of the SANDBOXES after
# running the COMMAND meets the conditions listed as operator-value pairs in
# CONDS.
vec_cmp_counter_delta() {
    local v

    v=$(counter_delta "$1" "$2" "$3" "$5") || return 1
    v=$(vec_cmp "$v" "$4") || return 1
    v=$(vec_fold "$v" "&&") || return 1

    echo "$v"
}

# cmp_counter_delta SANDBOXES TARGET COUNTER COND COMMAND
#
# Check if COUNTER change in the TARGET app in each of the SANDBOXES after
# running the COMMAND meets the COND condition given as a operator-value pair.
cmp_counter_delta() {
    local conds=""

    # Use the same condition for each sandbox
    for _ in $1; do
        conds="$conds $4"
    done

    vec_cmp_counter_delta "$1" "$2" "$3" "$conds" "$5"
}

m4_divert_pop([PREPARE_TESTS])

# CHECK_COUNTER_DELTA_IS_ZERO SANDBOXES TARGET COUNTER COMMAND
#
# Runs the COMMAND and checks if the COUNTER value for the TARGET in all of
# the SANDBOXES did not change.
m4_define([CHECK_COUNTER_DELTA_IS_ZERO],[
    rv=$(cmp_counter_delta "$1" "$2" "$3" "=0" "$4")
    rc=$?
    AT_CHECK([test $rc -eq 0 -a $rv -eq 1])
])

# CHECK_COUNTER_DELTA_IS_NOT_ZERO SANDBOXES TARGET COUNTER COMMAND
#
# Runs the COMMAND and checks if the COUNTER value for the TARGET in
# all of the SANDBOXES has changed.
m4_define([CHECK_COUNTER_DELTA_IS_NOT_ZERO],[
    rv=$(cmp_counter_delta "$1" "$2" "$3" ">0" "$4")
    rc=$?
    AT_CHECK([test $rc -eq 0 -a $rv -eq 1])
])

# CHECK_COUNTER_DELTA_COND SANDBOXES TARGET COUNTER CONDS COMMAND
#
# Runs the COMMAND and checks if the COUNTER value for the TARGET in all of the
# SANDBOXES satisfies the conditions listed in CONDS.
m4_define([CHECK_COUNTER_DELTA_COND],[
    rv=$(vec_cmp_counter_delta "$1" "$2" "$3" "$4" "$5")
    rc=$?
    AT_CHECK([test $rc -eq 0 -a $rv -eq 1])
])

# OVN_CONTROLLER_EXPECT_HIT SANDBOXES COUNTER COMMAND
#
# Checks if the COUNTER value has changed for any of the ovn-controller
# processes in the SANDBOXES when the COMMAND was run.
m4_define([OVN_CONTROLLER_EXPECT_HIT],[
    CHECK_COUNTER_DELTA_IS_NOT_ZERO([$1], [ovn-controller], [$2], [$3])
])

# OVN_CONTROLLER_EXPECT_NO_HIT SANDBOXES COUNTER COMMAND
#
# Checks if the COUNTER value has not changed for any of the ovn-controller
# processes in the SANDBOXES when the COMMAND was run.
m4_define([OVN_CONTROLLER_EXPECT_NO_HIT],[
    CHECK_COUNTER_DELTA_IS_ZERO([$1], [ovn-controller], [$2], [$3])
])

# OVN_CONTROLLER_EXPECT_HIT_COND SANDBOXES COUNTER CONDS COMMAND
#
# Checks if the change of the COUNTER value, when the COMMAND was run, of the
# ovn-controller process in each of the SANDBOXES meets the conditions in
# CONDS. CONDS must be a list of operator-value pairs, for example "[>0 =0]",
# following the same order as SANDBOXES.
m4_define([OVN_CONTROLLER_EXPECT_HIT_COND],[
    CHECK_COUNTER_DELTA_COND([$1], [ovn-controller], [$2], [$3], [$4])
])

AT_SETUP([ovn-controller incremental processing])
TAG_UNSTABLE
# Check which operations the trigger full logical flow processing.
#
# Create and destroy logical routers, switches, ports, address sets and ACLs
# while counting calls to lflow_run() in ovn-controller.

ovn_start
net_add n1
for i in `seq 1 5`; do
    sim_add hv$i
    as hv$i
    ovs-vsctl add-br br-phys
    ovn_attach n1 br-phys 192.168.0.$i
    if [[ $i -ge 3 ]] ; then
        ovs-vsctl add-br br-ex
        ovs-vsctl set open . external_ids:ovn-bridge-mappings="public:br-ex"
        ip link add vgw$i type dummy
        ovs-vsctl add-port br-ex vgw$i
    fi
done

# Wait for the tunnel ports to be created and up.
# Otherwise this may affect the lflow_run count.
for i in `seq 1 5`; do
    for j in `seq 1 5`; do
        if [[ $i -ne $j ]] ; then
            OVS_WAIT_UNTIL([
                test $(as hv$i ovs-vsctl list interface ovn-hv$j-0 | \
            grep -c tunnel_egress_iface_carrier=up) -eq 1
            ])
        fi
    done
done


# Add router lr1
OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv lr-add lr1]
)

for i in 1 2; do
    ls=ls$i
    lsp=$ls-lr1
    lrp=lr1-$ls

    # Add switch $ls
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv ls-add $ls]
    )
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv add Logical_Switch $ls other_config subnet=10.0.$i.0/24]
    )

    # Add router port to $ls
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv lrp-add lr1 $lrp 02:00:00:00:0$i:01 10.0.$i.1/24]
    )
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv lsp-add $ls $lsp]
    )
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv lsp-set-type $lsp router]
    )
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv lsp-set-options $lsp router-port=$lrp]
    )
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv lsp-set-addresses $lsp router]
    )
done

get_lsp_uuid () {
    ovn-nbctl lsp-list ls${1#lp} | grep $1 | awk '{ print $1 }'
}

pg_ports=

for i in 1 2; do
    j=$((i%2 + 1))
    as=as$i
    ls=ls$i
    lp=lp$i
    vif=vif$i

    # Add port $lp
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv lsp-add $ls $lp]
    )

    pg_ports="$pg_port `get_lsp_uuid $lp`"

    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv lsp-set-addresses $lp "dynamic"]
    )
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl wait-until Logical_Switch_Port $lp dynamic_addresses!=[[]] &&
         ovn-nbctl --wait=hv sync]
    )
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl get Logical_Switch_Port $lp dynamic_addresses &&
         ovn-nbctl --wait=hv sync]
    )

    # Add address set $as
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv create Address_Set name="$as"]
    )
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv add Address_Set "$as" addresses "10.0.$i.10"]
    )

    # Add ACLs for port $lp
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv acl-add $ls to-lport 1001 'outport == \"$lp\" && ip4.src == \$$as' allow]
    )
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv acl-add $ls to-lport 1000 'outport == \"$lp\"' drop]
    )

    # Bind port $lp and wait for it to come up
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv$i hv$j], [lflow_run],
        [as hv$i ovs-vsctl add-port br-int $vif -- set Interface $vif external-ids:iface-id=$lp &&
         ovn-nbctl wait-until Logical_Switch_Port $lp 'up=true' &&
         ovn-nbctl --wait=hv sync]
    )

    # Delete and recreate $lp to make it unbind and rebind multiple times, and
    # ensure no recompute is triggered.
    for k in $(seq 10); do
        OVN_CONTROLLER_EXPECT_NO_HIT(
            [hv$i hv$j], [lflow_run],
            [as hv$i ovs-vsctl set Interface $vif external-ids:iface-id=xxxx &&
             ovn-nbctl wait-until Logical_Switch_Port $lp 'up=false' &&
             ovn-nbctl --wait=hv sync]
        )
        OVN_CONTROLLER_EXPECT_NO_HIT(
            [hv$i hv$j], [lflow_run],
            [as hv$i ovs-vsctl set Interface $vif external-ids:iface-id=$lp &&
             ovn-nbctl wait-until Logical_Switch_Port $lp 'up=true' &&
             ovn-nbctl --wait=hv sync]
        )
    done
done

for i in 1 2; do
    j=$((i%2 + 1))
    as=as$i
    ls=ls$i
    lp=lp$i

    # Delete ACLs for port $lp
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv acl-del $ls to-lport 1001 'outport == \"$lp\" && ip4.src == \$$as']
    )
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv acl-del $ls to-lport 1000 'outport == \"$lp\"']
    )

    # Delete address set $as
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv remove Address_Set "$as" addresses "10.0.$i.10"]
    )
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv1 hv2], [lflow_run],
        [ovn-nbctl --wait=hv destroy Address_Set "$as"]
    )
done

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv create Port_Group name=pg1 ports=\"$pg_ports\"]
)

# Add ACLs for port group pg1
OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv acl-add pg1 to-lport 1001 'outport == @pg1 && ip4.src == \$pg1_ip4' allow]
)

# Create a public logical switch and attach the router to it.
OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv ls-add public]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv lsp-add public public-lr1]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv lsp-set-type public-lr1 router]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv lsp-set-addresses public-lr1 router]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv lsp-set-options public-lr1 router-port=lr1-public]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv lrp-add lr1 lr1-public 00:00:20:20:12:13 172.168.0.100/24]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv lsp-add public ln-public]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv lsp-set-type ln-public localnet]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv lsp-set-addresses ln-public unknown]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv lsp-set-options ln-public network_name=public]
)

OVN_CONTROLLER_EXPECT_HIT_COND(
    [hv1 hv2 hv3 hv4 hv5], [lflow_run], [=0 =0 >0 =0 =0],
    [ovn-nbctl --wait=hv lrp-set-gateway-chassis lr1-public hv3 30 && ovn-nbctl --wait=hv sync]
)

# Test physical_run for logical router and other datapath binding changes.
OVN_CONTROLLER_EXPECT_HIT_COND(
    [hv1 hv2 hv3 hv4 hv5], [physical_run], [>0 >0 >0 =0 =0],
    [ovn-nbctl --wait=hv set logical_router lr1 options:snat-ct-zone=10 && ovn-nbctl --wait=hv sync]
)

OVN_CONTROLLER_EXPECT_HIT_COND(
    [hv1 hv2 hv3 hv4 hv5], [physical_run], [>0 >0 >0 =0 =0],
    [ovn-nbctl --wait=hv set logical_router lr1 options:snat-ct-zone=11 && ovn-nbctl --wait=hv sync]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2 hv3 hv4 hv5], [physical_run],
    [ovn-nbctl --wait=hv remove logical_router lr1 options snat-ct-zone && ovn-nbctl --wait=hv sync]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2 hv3 hv4 hv5], [physical_run],
    [ovn-sbctl set datapath_binding lr1 external_ids:foo=bar && ovn-nbctl --wait=hv sync]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2 hv3 hv4 hv5], [physical_run],
    [ovn-sbctl set datapath_binding ls1 external_ids:foo=bar && ovn-nbctl --wait=hv sync]
)

# After this, BFD should be enabled from hv1 and hv2 to hv3.
# So there should be lflow_run hits in hv1, hv2, hv3 and hv4
OVN_CONTROLLER_EXPECT_HIT_COND(
    [hv1 hv2 hv3 hv4 hv5], [lflow_run], [>0 >0 >0 >0 =0],
    [ovn-nbctl --wait=hv lrp-set-gateway-chassis lr1-public hv4 20 && ovn-nbctl --wait=hv sync]
)

OVN_CONTROLLER_EXPECT_HIT(
    [hv1 hv2 hv3 hv4 hv5], [lflow_run],
    [ovn-nbctl --wait=hv lrp-set-gateway-chassis lr1-public hv5 10 && ovn-nbctl --wait=hv sync]
)

# Make hv4 master. There is remote possibility that full recompute
# triggers for hv1-hv5 after hv4 becomes master because of updates to the
# ovn-hv$i-0 interfaces. Most of the time there will be no recompute.
ovn-nbctl --wait=hv lrp-set-gateway-chassis lr1-public hv4 40
hv4_ch=$(ovn-sbctl --bare --columns _uuid list chassis hv4)
OVS_WAIT_UNTIL([ovn-sbctl find port_binding logical_port=cr-lr1-public chassis=$hv4_ch])

OVN_CONTROLLER_EXPECT_HIT_COND(
    [hv1 hv2 hv3 hv4 hv5], [lflow_run],  [>=0 >=0 >=0 >=0 >=0],
    [ovn-nbctl --wait=hv sync]
)

# Delete hv4 from gateway chassis
OVN_CONTROLLER_EXPECT_HIT(
    [hv1 hv2 hv3 hv4 hv5], [lflow_run],
    [ovn-nbctl --wait=hv lrp-del-gateway-chassis lr1-public hv4 && ovn-nbctl --wait=hv sync]
)

# Delete hv3 from gateway chassis
# After this, the BFD should be disabled entirely as hv5 is the
# only gateway chassis.
OVN_CONTROLLER_EXPECT_HIT_COND(
    [hv1 hv2 hv3 hv4 hv5], [lflow_run],  [>0 >0 >0 =0 >0],
    [ovn-nbctl --wait=hv lrp-del-gateway-chassis lr1-public hv3]
)

# Wait for port_binding change related flows
hv5_ch=$(ovn-sbctl --bare --columns _uuid list chassis hv5)
OVS_WAIT_UNTIL([ovn-sbctl find port_binding logical_port=cr-lr1-public chassis=$hv5_ch])
ovn-nbctl --wait=hv sync
# Delete hv5 from gateway chassis. There should be no lflow_run.
OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2 hv3 hv4 hv5], [lflow_run],
    [ovn-nbctl --wait=hv lrp-del-gateway-chassis lr1-public hv5]
)

# create QoS rule
OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2 hv3 hv4 hv5], [lflow_run],
    [ovn-nbctl --wait=hv set Logical_Switch_Port ln-public options:qos_burst=1000]
)

ovn-nbctl --wait=hv meter-add meter0 drop 100 pktps 10

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2 hv3 hv4], [lflow_run],
    [ovn-nbctl --wait=hv copp-add copp0 arp meter0]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2 hv3 hv4], [lflow_run],
    [ovn-nbctl --wait=hv lr-copp-add copp0 lr1]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2 hv3 hv4], [lflow_run],
    [ovn-nbctl --wait=hv --may-exist meter-add meter0 drop 200 pktps 10]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2 hv3 hv4], [lflow_run],
    [ovn-nbctl --wait=hv meter-del meter0]
)

OVN_CONTROLLER_EXPECT_HIT(
    [hv1], [lflow_run],
    [as hv1 ovs-vsctl --id=@br get Bridge br-int --  \
        --id=@i create IPFIX targets=\"192.168.1.1\"  -- \
        create Flow_Sample_Collector_Set bridge=@br id=1 ipfix=@i]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv3], [lflow_run],
    [as hv2 ovs-vsctl --id=@br get Bridge br-int --  \
        --id=@i create IPFIX targets=\"192.168.1.1\"  -- \
        create Flow_Sample_Collector_Set bridge=@br id=1 ipfix=@i]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1], [lflow_run],
    [as hv1 ovs-vsctl set IPFIX . targets=\"192.168.1.2\"]
)

OVN_CONTROLLER_EXPECT_HIT(
    [hv1], [lflow_run],
    [as hv1 ovs-vsctl destroy Flow_Sample_Collector_Set .]
)

for i in 1 2; do
    j=$((i%2 + 1))
    lp=lp$i

    # Delete port $lp
    OVN_CONTROLLER_EXPECT_NO_HIT(
        [hv$i hv$j], [lflow_run],
        [ovn-nbctl --wait=hv lsp-del $lp]
    )
done

# Delete port group pg1
OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv destroy Port_Group pg1]
)

OVN_CONTROLLER_EXPECT_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv ls-del ls1]
)

OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv ls-del ls2]
)

# Delete router lr1
OVN_CONTROLLER_EXPECT_NO_HIT(
    [hv1 hv2], [lflow_run],
    [ovn-nbctl --wait=hv lr-del lr1]
)

OVN_CLEANUP([hv1], [hv2])

AT_CLEANUP
